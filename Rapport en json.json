{
  "collection": {
    "_": {
      "postman_id": "66e51adf-3e73-49a9-a278-1ec85b5cead0"
    },
    "item": [
      {
        "_": {
          "postman_id": "58bbf240-0477-4b66-9e3c-c9b43b8579a5"
        },
        "id": "58bbf240-0477-4b66-9e3c-c9b43b8579a5",
        "name": "Request Methods",
        "description": {
          "content": "HTTP has multiple request \"verbs\", such as `GET`, `PUT`, `POST`, `DELETE`,\n`PATCH`, `HEAD`, etc. \n\nAn HTTP Method (verb) defines how a request should be interpreted by a server. \nThe endpoints in this section demonstrate various HTTP Verbs. Postman supports \nall the HTTP Verbs, including some rarely used ones, such as `PROPFIND`, `UNLINK`, \netc.\n\nFor details about HTTP Verbs, refer to [RFC 2616](http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9)\n",
          "type": "text/plain"
        },
        "item": [
          {
            "_": {
              "postman_id": "6f04fb0f-dc39-4ea1-a6fc-3e26aed60bf2"
            },
            "id": "6f04fb0f-dc39-4ea1-a6fc-3e26aed60bf2",
            "name": "GET Request",
            "request": {
              "description": {
                "content": "The HTTP `GET` request method is meant to retrieve data from a server. The data\nis identified by a unique URI (Uniform Resource Identifier). \n\nA `GET` request can pass parameters to the server using \"Query String \nParameters\". For example, in the following request,\n\n> http://example.com/hi/there?hand=wave\n\nThe parameter \"hand\" has the value \"wave\".\n\nThis endpoint echoes the HTTP headers, request parameters and the complete\nURI requested.",
                "type": "text/plain"
              },
              "url": {
                "protocol": "https",
                "path": [
                  "get"
                ],
                "host": [
                  "postman-echo",
                  "com"
                ],
                "query": [
                  {
                    "key": "foo1",
                    "value": "bar1"
                  },
                  {
                    "key": "foo2",
                    "value": "bar2"
                  }
                ],
                "variable": []
              },
              "method": "GET"
            },
            "response": [
              {
                "_": {
                  "postman_previewlanguage": "json"
                },
                "id": "3cc6d75f-bfc7-499f-99a5-1308803c198b",
                "name": "GET Request Woops",
                "originalRequest": {
                  "url": {
                    "protocol": "https",
                    "path": [
                      "get"
                    ],
                    "host": [
                      "postman-echo",
                      "com"
                    ],
                    "query": [
                      {
                        "key": "foo1",
                        "value": "bar1"
                      },
                      {
                        "key": "foo2",
                        "value": "bar2"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET"
                },
                "status": "OK",
                "code": 200,
                "header": [
                  {
                    "key": "Content-Encoding",
                    "value": "gzip"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json; charset=utf-8"
                  },
                  {
                    "key": "Date",
                    "value": "Tue, 11 Jun 2019 10:43:13 GMT"
                  },
                  {
                    "key": "ETag",
                    "value": "W/\"161-aLhNcsGArlgLSKbxPqfBW3viHPI\""
                  },
                  {
                    "key": "Server",
                    "value": "nginx"
                  },
                  {
                    "key": "set-cookie",
                    "value": "sails.sid=s%3AGz-wblZgXE8FCDq7aJpx_tUgZUcG3Nsw.LdNEN8L0C7nGWkvGLwvdw6R2s6Syjr%2FzkvyevA8qR0c; Path=/; HttpOnly"
                  },
                  {
                    "key": "Vary",
                    "value": "Accept-Encoding"
                  },
                  {
                    "key": "Content-Length",
                    "value": "249"
                  },
                  {
                    "key": "Connection",
                    "value": "keep-alive"
                  }
                ],
                "body": "{\n    \"args\": {\n        \"foo1\": \"bar1\",\n        \"foo2\": \"bar2\"\n    },\n    \"headers\": {\n        \"x-forwarded-proto\": \"https\",\n        \"host\": \"postman-echo.com\",\n        \"accept\": \"*/*\",\n        \"accept-encoding\": \"gzip, deflate\",\n        \"cache-control\": \"no-cache\",\n        \"postman-token\": \"5c27cd7d-6b16-4e5a-a0ef-191c9a3a275f\",\n        \"user-agent\": \"PostmanRuntime/7.6.1\",\n        \"x-forwarded-port\": \"443\"\n    },\n    \"url\": \"https://postman-echo.com/get?foo1=bar1&foo2=bar2\"\n}",
                "cookie": []
              }
            ],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "7e9863ce-6ce4-45d5-88f2-6227f01e9661",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"response body has json with request queries\", function () {",
                    "    pm.response.to.have.jsonBody('args.foo1', 'bar1')",
                    "        .and.have.jsonBody('args.foo2', 'bar2');",
                    "});"
                  ],
                  "_lastExecutionId": "976a61c4-baf8-451f-92ba-774e49c38d62"
                }
              }
            ]
          },
          {
            "_": {
              "postman_id": "4235270b-9a17-4885-94e3-effe76708375"
            },
            "id": "4235270b-9a17-4885-94e3-effe76708375",
            "name": "POST Raw Text",
            "request": {
              "description": {
                "content": "The HTTP `POST` request method is meant to transfer data to a server \n(and elicit a response). What data is returned depends on the implementation\nof the server.\n\nA `POST` request can pass parameters to the server using \"Query String \nParameters\", as well as the Request Body. For example, in the following request,\n\n> POST /hi/there?hand=wave\n>\n> <request-body>\n\nThe parameter \"hand\" has the value \"wave\". The request body can be in multiple\nformats. These formats are defined by the MIME type of the request. The MIME \nType can be set using the ``Content-Type`` HTTP header. The most commonly used \nMIME types are:\n\n* `multipart/form-data`\n* `application/x-www-form-urlencoded`\n* `application/json`\n\nThis endpoint echoes the HTTP headers, request parameters, the contents of\nthe request body and the complete URI requested.",
                "type": "text/plain"
              },
              "url": {
                "protocol": "https",
                "path": [
                  "post"
                ],
                "host": [
                  "postman-echo",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "This is expected to be sent back as part of response body."
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "7350c107-2e09-4b12-83ce-9a7590febd7f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"response body has json with request body\", function () {",
                    "    pm.response.to.have.jsonBody('data', ",
                    "        'This is expected to be sent back as part of response body.');",
                    "});"
                  ],
                  "_lastExecutionId": "b96be690-9b7b-4d09-b23c-f024660452b3"
                }
              }
            ]
          },
          {
            "_": {
              "postman_id": "c3940b37-6cc0-446b-91d5-c09c2a1be9b8"
            },
            "id": "c3940b37-6cc0-446b-91d5-c09c2a1be9b8",
            "name": "POST Form Data",
            "request": {
              "description": {
                "content": "The HTTP `POST` request method is meant to transfer data to a server \n(and elicit a response). What data is returned depends on the implementation\nof the server.\n\nA `POST` request can pass parameters to the server using \"Query String \nParameters\", as well as the Request Body. For example, in the following request,\n\n> POST /hi/there?hand=wave\n>\n> <request-body>\n\nThe parameter \"hand\" has the value \"wave\". The request body can be in multiple\nformats. These formats are defined by the MIME type of the request. The MIME \nType can be set using the ``Content-Type`` HTTP header. The most commonly used \nMIME types are:\n\n* `multipart/form-data`\n* `application/x-www-form-urlencoded`\n* `application/json`\n\nThis endpoint echoes the HTTP headers, request parameters, the contents of\nthe request body and the complete URI requested when data is sent as a form parameter.",
                "type": "text/plain"
              },
              "url": {
                "protocol": "https",
                "path": [
                  "post"
                ],
                "host": [
                  "postman-echo",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "urlencoded",
                "urlencoded": [
                  {
                    "key": "foo1",
                    "value": "bar1"
                  },
                  {
                    "key": "foo2",
                    "value": "bar2"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "132f0d04-006c-4869-82b4-19b63ebd9dc4",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"response body has json with form data\", function () {",
                    "    pm.response.to.have.jsonBody('form.foo1', 'bar1')",
                    "        .and.have.jsonBody('form.foo2', 'bar2');",
                    "});"
                  ],
                  "_lastExecutionId": "e65135f4-d5cf-4e0d-a2b6-01c9438af5fe"
                }
              }
            ]
          },
          {
            "_": {
              "postman_id": "82883b3d-51ee-452b-bf98-ab7b37c551a1"
            },
            "id": "82883b3d-51ee-452b-bf98-ab7b37c551a1",
            "name": "PUT Request",
            "request": {
              "description": {
                "content": "The HTTP `PUT` request method is similar to HTTP `POST`. It too is meant to \ntransfer data to a server (and elicit a response). What data is returned depends on the implementation\nof the server.\n\nA `PUT` request can pass parameters to the server using \"Query String \nParameters\", as well as the Request Body. For example, in the following \nraw HTTP request,\n\n> PUT /hi/there?hand=wave\n>\n> <request-body>\n\n\n",
                "type": "text/plain"
              },
              "url": {
                "protocol": "https",
                "path": [
                  "put"
                ],
                "host": [
                  "postman-echo",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "This is expected to be sent back as part of response body."
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "fcab39af-9803-43b9-b773-0d044bffc34c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"response body has json with form data\", function () {",
                    "    pm.response.to.have.jsonBody('data', ",
                    "        'This is expected to be sent back as part of response body.');",
                    "});"
                  ],
                  "_lastExecutionId": "3fa26eab-2d52-43ab-a2a8-53f0544746c1"
                }
              }
            ]
          },
          {
            "_": {
              "postman_id": "ccfd6d60-b02b-426e-99b5-a520dd54b080"
            },
            "id": "ccfd6d60-b02b-426e-99b5-a520dd54b080",
            "name": "PATCH Request",
            "request": {
              "description": {
                "content": "The HTTP `PATCH` method is used to update resources on a server. The exact\nuse of `PATCH` requests depends on the server in question. There are a number\nof server implementations which handle `PATCH` differently. Technically, \n`PATCH` supports both Query String parameters and a Request Body.\n\nThis endpoint accepts an HTTP `PATCH` request and provides debug information\nsuch as the HTTP headers, Query String arguments, and the Request Body.",
                "type": "text/plain"
              },
              "url": {
                "protocol": "https",
                "path": [
                  "patch"
                ],
                "host": [
                  "postman-echo",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "PATCH",
              "body": {
                "mode": "raw",
                "raw": "This is expected to be sent back as part of response body."
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "5b18cd54-8382-42a0-893c-209794d7a805",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"response body has json with form data\", function () {",
                    "    pm.response.to.have.jsonBody('data', ",
                    "        'This is expected to be sent back as part of response body.');",
                    "});"
                  ],
                  "_lastExecutionId": "bc00b5cb-3607-4e4a-994f-b0961aea0a93"
                }
              }
            ]
          },
          {
            "_": {
              "postman_id": "795639eb-d575-4f49-9d91-11b9eed72a6e"
            },
            "id": "795639eb-d575-4f49-9d91-11b9eed72a6e",
            "name": "DELETE Request",
            "request": {
              "description": {
                "content": "The HTTP `DELETE` method is used to delete resources on a server. The exact\nuse of `DELETE` requests depends on the server implementation. In general, \n`DELETE` requests support both, Query String parameters as well as a Request \nBody.\n\nThis endpoint accepts an HTTP `DELETE` request and provides debug information\nsuch as the HTTP headers, Query String arguments, and the Request Body.",
                "type": "text/plain"
              },
              "url": {
                "protocol": "https",
                "path": [
                  "delete"
                ],
                "host": [
                  "postman-echo",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "DELETE",
              "body": {
                "mode": "raw",
                "raw": "This is expected to be sent back as part of response body."
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "ad581c8e-c465-4aa0-83ab-59906f64dc5e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"response body has json with form data\", function () {",
                    "    pm.response.to.have.jsonBody('data', ",
                    "        'This is expected to be sent back as part of response body.');",
                    "});"
                  ],
                  "_lastExecutionId": "96924df0-4f97-4be1-9778-cca02e86fa93"
                }
              }
            ]
          }
        ],
        "event": [],
        "protocolProfileBehavior": {}
      },
      {
        "_": {
          "postman_id": "b68122ef-762d-44a9-bd4c-4641424704c8"
        },
        "id": "b68122ef-762d-44a9-bd4c-4641424704c8",
        "name": "Headers",
        "description": {
          "content": "The following set of endpoints allow one to see the headers being sent as part of a request and to get a custom set of headers as part of response.\n\nHTTP header fields provide required information about the request or response, or about the object sent in the message body. Both request headers and response headers can be controlled using these endpoints.",
          "type": "text/plain"
        },
        "item": [
          {
            "_": {
              "postman_id": "0490baef-b3bf-43a1-acac-8579620031a7"
            },
            "id": "0490baef-b3bf-43a1-acac-8579620031a7",
            "name": "Request Headers",
            "request": {
              "description": {
                "content": "A `GET` request to this endpoint returns the list of all request headers as part of the response JSON.\nIn Postman, sending your own set of headers through the [Headers tab](https://www.getpostman.com/docs/requests#headers?source=echo-collection-app-onboarding) will reveal the headers as part of the response.",
                "type": "text/plain"
              },
              "url": {
                "protocol": "https",
                "path": [
                  "headers"
                ],
                "host": [
                  "postman-echo",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "my-sample-header",
                  "value": "Lorem ipsum dolor sit amet"
                }
              ],
              "method": "GET"
            },
            "response": [
              {
                "_": {
                  "postman_previewlanguage": "javascript"
                },
                "id": "9cfc3a18-695b-4d3e-8451-4ddcdc1c5f29",
                "name": "my-sample-header",
                "originalRequest": {
                  "url": {
                    "protocol": "https",
                    "path": [
                      "headers"
                    ],
                    "host": [
                      "echo",
                      "getpostman",
                      "com"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "my-sample-header",
                      "value": "Lorem ipsum dolor sit amet"
                    }
                  ],
                  "method": "GET"
                },
                "status": "OK",
                "code": 200,
                "header": [
                  {
                    "name": "Access-Control-Allow-Credentials",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Credentials",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Headers",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Headers",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Methods",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Methods",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Origin",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Origin",
                    "value": ""
                  },
                  {
                    "name": "Connection",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Connection",
                    "value": "keep-alive"
                  },
                  {
                    "name": "Content-Encoding",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Encoding",
                    "value": "gzip"
                  },
                  {
                    "name": "Content-Length",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Length",
                    "value": "342"
                  },
                  {
                    "name": "Content-Type",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Type",
                    "value": "application/json; charset=utf-8"
                  },
                  {
                    "name": "Date",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Date",
                    "value": "Thu, 31 Mar 2016 11:14:00 GMT"
                  },
                  {
                    "name": "Server",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Server",
                    "value": "nginx/1.6.2"
                  },
                  {
                    "name": "Vary",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Vary",
                    "value": "Accept-Encoding"
                  },
                  {
                    "name": "X-Powered-By",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "X-Powered-By",
                    "value": "Sails <sailsjs.org>"
                  }
                ],
                "body": "{\"headers\":{\"host\":\"echo.getpostman.com\",\"accept\":\"*/*\",\"accept-encoding\":\"gzip, deflate, sdch\",\"accept-language\":\"en-US,en;q=0.8\",\"cache-control\":\"no-cache\",\"my-sample-header\":\"Lorem ipsum dolor sit amet\",\"postman-token\":\"3c8ea80b-f599-fba6-e0b4-a0910440e7b6\",\"user-agent\":\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.110 Safari/537.36\",\"x-forwarded-port\":\"443\",\"x-forwarded-proto\":\"https\"}}",
                "cookie": [
                  {
                    "name": "sails.sid",
                    "expires": null,
                    "domain": "echo.getpostman.com",
                    "path": "/",
                    "secure": false,
                    "httpOnly": true,
                    "hostOnly": true,
                    "session": true,
                    "value": "s%3A9stja5zKmIILxq9Jvtha7Lp9LIz1VIdK.Vp8MHC%2BEUJe4ICZPXn2JAoXaV2bTgtoQd%2B3XJLNr51Y"
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "4321cf8c-f1c7-461e-88b8-280c52216cd5",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "// we check to ensire that the headers we sent as request is returned as part of",
                    "// the response body. if you change the request headers, make sure to add them",
                    "// to the tests here",
                    "pm.test(\"sample request header should be returned in response body\", function () {",
                    "    pm.response.to.have.jsonBody('headers.my-sample-header', 'Lorem ipsum dolor sit amet');",
                    "});"
                  ],
                  "_lastExecutionId": "ad0df54a-b251-4285-ab39-8d6ee8ff8d42"
                }
              }
            ]
          },
          {
            "_": {
              "postman_id": "6bd5610f-17fc-464f-bb5d-9e0ae89a3942"
            },
            "id": "6bd5610f-17fc-464f-bb5d-9e0ae89a3942",
            "name": "Response Headers",
            "request": {
              "description": {
                "content": "This endpoint causes the server to send custom set of response headers. Providing header values as part of the URL parameters of a `GET` request to this endpoint returns the same as part of response header.\n\nTo send your own set of headers, simply add or replace the the URL parameters with your own set.",
                "type": "text/plain"
              },
              "url": {
                "protocol": "https",
                "path": [
                  "response-headers"
                ],
                "host": [
                  "postman-echo",
                  "com"
                ],
                "query": [
                  {
                    "key": "foo1",
                    "value": "bar1"
                  },
                  {
                    "key": "foo2",
                    "value": "bar2"
                  }
                ],
                "variable": []
              },
              "method": "GET"
            },
            "response": [
              {
                "_": {
                  "postman_previewlanguage": "html"
                },
                "id": "e53684e0-465e-4c96-bf65-873b88ca3924",
                "name": "Response headers",
                "originalRequest": {
                  "url": {
                    "protocol": "https",
                    "path": [
                      "response-headers"
                    ],
                    "host": [
                      "echo",
                      "getpostman",
                      "com"
                    ],
                    "query": [
                      {
                        "key": "Content-Type",
                        "value": "text/html"
                      },
                      {
                        "key": "test",
                        "value": "response_headers"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET"
                },
                "status": "OK",
                "code": 200,
                "header": [
                  {
                    "name": "Access-Control-Allow-Credentials",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Credentials",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Headers",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Headers",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Methods",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Methods",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Origin",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Origin",
                    "value": ""
                  },
                  {
                    "name": "Connection",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Connection",
                    "value": "keep-alive"
                  },
                  {
                    "name": "Content-Encoding",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Encoding",
                    "value": "gzip"
                  },
                  {
                    "name": "Content-Length",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Length",
                    "value": "71"
                  },
                  {
                    "name": "Content-Type",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Type",
                    "value": "text/html; charset=utf-8"
                  },
                  {
                    "name": "Date",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Date",
                    "value": "Thu, 31 Mar 2016 11:14:18 GMT"
                  },
                  {
                    "name": "Server",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Server",
                    "value": "nginx/1.6.2"
                  },
                  {
                    "name": "Vary",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Vary",
                    "value": "Accept-Encoding"
                  },
                  {
                    "name": "X-Powered-By",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "X-Powered-By",
                    "value": "Sails <sailsjs.org>"
                  },
                  {
                    "name": "test",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "test",
                    "value": "response_headers"
                  }
                ],
                "body": "{\"Content-Type\":\"text/html\",\"test\":\"response_headers\"}",
                "cookie": [
                  {
                    "name": "sails.sid",
                    "expires": null,
                    "domain": "echo.getpostman.com",
                    "path": "/",
                    "secure": false,
                    "httpOnly": true,
                    "hostOnly": true,
                    "session": true,
                    "value": "s%3A9stja5zKmIILxq9Jvtha7Lp9LIz1VIdK.Vp8MHC%2BEUJe4ICZPXn2JAoXaV2bTgtoQd%2B3XJLNr51Y"
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "f0f459fa-1811-4431-9ebd-0aa31dee49fe",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"response has the headers sent as part of request query\", function () {",
                    "    pm.response.to.have.header('foo1', 'bar1')",
                    "        .and.have.header('foo2', 'bar2');",
                    "});",
                    "",
                    "pm.test(\"sample request param should be returned in response body\", function () {",
                    "    pm.response.to.have.jsonBody('foo1', 'bar1')",
                    "        .and.have.jsonBody('foo2', 'bar2');",
                    "});"
                  ],
                  "_lastExecutionId": "decd2783-20cf-4acb-885f-71ed7917b3b8"
                }
              }
            ]
          }
        ],
        "event": [],
        "protocolProfileBehavior": {}
      },
      {
        "_": {
          "postman_id": "e6e48cc4-7376-4f0b-b95a-ac77547f3c5d"
        },
        "id": "e6e48cc4-7376-4f0b-b95a-ac77547f3c5d",
        "name": "Authentication Methods",
        "item": [
          {
            "_": {
              "postman_id": "64b7a2c6-7f3e-4ddd-b5ce-e9ee1c4b3dfe"
            },
            "id": "64b7a2c6-7f3e-4ddd-b5ce-e9ee1c4b3dfe",
            "name": "Basic Auth",
            "request": {
              "description": {
                "content": "This endpoint simulates a **basic-auth** protected endpoint. \nThe endpoint accepts a default username and password and returns a status code of `200 ok` only if the same is provided. \nOtherwise it will return a status code `401 unauthorized`.\n\n> Username: `postman`\n> \n> Password: `password`\n\nTo use this endpoint, send a request with the header `Authorization: Basic cG9zdG1hbjpwYXNzd29yZA==`. \nThe cryptic latter half of the header value is a base64 encoded concatenation of the default username and password. \nUsing Postman, to send this request, you can simply fill in the username and password in the \"Authorization\" tab and Postman will do the rest for you.\n\nTo know more about basic authentication, refer to the [Basic Access Authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) wikipedia article.\nThe article on [authentication helpers](https://www.getpostman.com/docs/helpers#basic-auth?source=echo-collection-app-onboarding) elaborates how to use the same within the Postman app.",
                "type": "text/plain"
              },
              "url": {
                "protocol": "https",
                "path": [
                  "basic-auth"
                ],
                "host": [
                  "postman-echo",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "basic",
                "basic": [
                  {
                    "type": "any",
                    "value": "postman",
                    "key": "username"
                  },
                  {
                    "type": "any",
                    "value": "password",
                    "key": "password"
                  },
                  {
                    "type": "any",
                    "value": false,
                    "key": "showPassword"
                  }
                ]
              }
            },
            "response": [
              {
                "_": {
                  "postman_previewlanguage": "javascript"
                },
                "id": "e8ed109c-f7f7-44d8-8c54-ceb0c2ed67af",
                "name": "200",
                "originalRequest": {
                  "url": {
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "status": "OK",
                "code": 200,
                "header": [
                  {
                    "name": "Access-Control-Allow-Credentials",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Credentials",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Headers",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Headers",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Methods",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Methods",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Origin",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Origin",
                    "value": ""
                  },
                  {
                    "name": "Connection",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Connection",
                    "value": "keep-alive"
                  },
                  {
                    "name": "Content-Encoding",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Encoding",
                    "value": "gzip"
                  },
                  {
                    "name": "Content-Length",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Length",
                    "value": "42"
                  },
                  {
                    "name": "Content-Type",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Type",
                    "value": "application/json; charset=utf-8"
                  },
                  {
                    "name": "Date",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Date",
                    "value": "Sat, 31 Oct 2015 06:38:25 GMT"
                  },
                  {
                    "name": "Server",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Server",
                    "value": "nginx/1.6.2"
                  },
                  {
                    "name": "Vary",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Vary",
                    "value": "Accept-Encoding"
                  },
                  {
                    "name": "X-Powered-By",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "X-Powered-By",
                    "value": "Sails <sailsjs.org>"
                  }
                ],
                "body": "{\"authenticated\":true}",
                "cookie": []
              }
            ],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "c8e84bc1-7205-4883-bafc-7754ee41efec",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"response body has json saying 'authenticated'\", function () {",
                    "    pm.response.to.have.jsonBody('authenticated', true);",
                    "});"
                  ],
                  "_lastExecutionId": "38cf21c7-f996-400f-8a8d-4bbdca4c38a0"
                }
              }
            ]
          },
          {
            "_": {
              "postman_id": "3702b6e0-4a65-44be-91d9-0bed03dea66a"
            },
            "id": "3702b6e0-4a65-44be-91d9-0bed03dea66a",
            "name": "DigestAuth Success",
            "request": {
              "description": {
                "content": "This endpoint sends a hashed Digest Authorization header to gain access to a valid `200 Ok` response code. In Postman, it uses the stored [global variables](https://www.getpostman.com/docs/environments#gloval-variables?source=echo-collection-app-onboarding), `echo_digest_realm` and `echo_digest_nonce`, to generate the hashed authorisation header.\n\nWithin Postman, for this request to successfully authenticate, running the previous request \"DigestAuth Request\" stores the relevant information within the global variables.",
                "type": "text/plain"
              },
              "url": {
                "protocol": "https",
                "path": [
                  "digest-auth"
                ],
                "host": [
                  "postman-echo",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Digest username=\"postman\", realm=\"Users\", nonce=\"ni1LiL0O37PRRhofWdCLmwFsnEtH1lew\", uri=\"/digest-auth\", response=\"254679099562cf07df9b6f5d8d15db44\", opaque=\"\""
                }
              ],
              "method": "GET",
              "auth": {
                "type": "digest",
                "digest": [
                  {
                    "type": "any",
                    "value": "MD5",
                    "key": "algorithm"
                  },
                  {
                    "type": "any",
                    "value": "postman",
                    "key": "username"
                  },
                  {
                    "type": "any",
                    "value": "{{echo_digest_realm}}",
                    "key": "realm"
                  },
                  {
                    "type": "any",
                    "value": "password",
                    "key": "password"
                  },
                  {
                    "type": "any",
                    "value": "{{echo_digest_nonce}}",
                    "key": "nonce"
                  },
                  {
                    "type": "any",
                    "value": "",
                    "key": "nonceCount"
                  },
                  {
                    "type": "any",
                    "value": "",
                    "key": "clientNonce"
                  },
                  {
                    "type": "any",
                    "value": "",
                    "key": "opaque"
                  },
                  {
                    "type": "any",
                    "value": "",
                    "key": "qop"
                  }
                ]
              }
            },
            "response": [
              {
                "_": {
                  "postman_previewlanguage": "javascript"
                },
                "id": "97ac9fca-c0aa-4ed1-a87f-f442d4011c3c",
                "name": "200",
                "originalRequest": {
                  "url": {
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "status": "OK",
                "code": 200,
                "header": [
                  {
                    "name": "Access-Control-Allow-Credentials",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Credentials",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Headers",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Headers",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Methods",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Methods",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Origin",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Origin",
                    "value": ""
                  },
                  {
                    "name": "Connection",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Connection",
                    "value": "keep-alive"
                  },
                  {
                    "name": "Content-Encoding",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Encoding",
                    "value": "gzip"
                  },
                  {
                    "name": "Content-Length",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Length",
                    "value": "42"
                  },
                  {
                    "name": "Content-Type",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Type",
                    "value": "application/json; charset=utf-8"
                  },
                  {
                    "name": "Date",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Date",
                    "value": "Thu, 29 Oct 2015 06:17:51 GMT"
                  },
                  {
                    "name": "Server",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Server",
                    "value": "nginx/1.6.2"
                  },
                  {
                    "name": "Vary",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Vary",
                    "value": "Accept-Encoding"
                  },
                  {
                    "name": "X-Powered-By",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "X-Powered-By",
                    "value": "Sails <sailsjs.org>"
                  }
                ],
                "body": "{\"authenticated\":true}",
                "cookie": []
              }
            ],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "39dce069-b1a0-4440-8687-214debd8cf75",
                  "type": "text/javascript",
                  "exec": [
                    "tests[\"response code is 200\"] = responseCode.code === 200;",
                    "tests[\"body contains authenticated\"] = responseBody.has(\"authenticated\");"
                  ],
                  "_lastExecutionId": "01580e05-c182-4553-980f-fc770230a351"
                }
              }
            ]
          },
          {
            "_": {
              "postman_id": "baae227c-4680-4b7c-ac96-2d3accaf2b26"
            },
            "id": "baae227c-4680-4b7c-ac96-2d3accaf2b26",
            "name": "Hawk Auth",
            "request": {
              "description": {
                "content": "This endpoint is a Hawk Authentication protected endpoint. [Hawk authentication](https://github.com/hueniverse/hawk) is a widely used protocol for protecting API endpoints. One of Hawk's main goals is to enable HTTP authentication for services that do not use TLS (although it can be used in conjunction with TLS as well).\n\nIn order to use this endpoint, select the \"Hawk Auth\" helper inside Postman, and set the following values:\n\nHawk Auth ID: `dh37fgj492je`\n\nHawk Auth Key: `werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn`\n\nAlgorithm: `sha256`\n\nThe rest of the values are optional, and can be left blank. Hitting send should give you a response with a status code of 200 OK.",
                "type": "text/plain"
              },
              "url": {
                "protocol": "https",
                "path": [
                  "auth",
                  "hawk"
                ],
                "host": [
                  "postman-echo",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "hawk",
                "hawk": [
                  {
                    "type": "any",
                    "value": "dh37fgj492je",
                    "key": "authId"
                  },
                  {
                    "type": "any",
                    "value": "werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn",
                    "key": "authKey"
                  },
                  {
                    "type": "any",
                    "value": "sha256",
                    "key": "algorithm"
                  },
                  {
                    "type": "any",
                    "value": "",
                    "key": "user"
                  },
                  {
                    "type": "any",
                    "value": "RZKGNz",
                    "key": "nonce"
                  },
                  {
                    "type": "any",
                    "value": "",
                    "key": "timestamp"
                  }
                ]
              }
            },
            "response": [
              {
                "_": {
                  "postman_previewlanguage": "javascript"
                },
                "id": "43c98c7a-dfc9-42df-a3da-9c34f997219d",
                "name": "Success",
                "originalRequest": {
                  "url": {
                    "protocol": "https",
                    "path": [
                      "auth",
                      "hawk"
                    ],
                    "host": [
                      "echo",
                      "getpostman",
                      "com"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Authorization",
                      "key": "Authorization",
                      "value": "Hawk id=\"dh37fgj492je\", ts=\"1459422734\", nonce=\"XiwiCU\", mac=\"KzMHk67BYCC9zZqRy5hRdWFEFLHX5bNlRWGdmOAWKp0=\""
                    }
                  ],
                  "method": "GET"
                },
                "status": "OK",
                "code": 200,
                "header": [
                  {
                    "name": "Access-Control-Allow-Credentials",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Credentials",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Headers",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Headers",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Methods",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Methods",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Origin",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Origin",
                    "value": ""
                  },
                  {
                    "name": "Connection",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Connection",
                    "value": "keep-alive"
                  },
                  {
                    "name": "Content-Encoding",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Encoding",
                    "value": "gzip"
                  },
                  {
                    "name": "Content-Type",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "name": "Date",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Date",
                    "value": "Thu, 31 Mar 2016 11:12:16 GMT"
                  },
                  {
                    "name": "Server",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Server",
                    "value": "nginx/1.6.2"
                  },
                  {
                    "name": "Server-Authorization",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Server-Authorization",
                    "value": "Hawk mac=\"vRrUzDdcHu2NaNts/r4zg2xmXMdX8wPiTGTM398BDRg=\", hash=\"qmtflETMybaZiOQ2dLT17yiRunFT5OCIxZRZ0boQaiE=\""
                  },
                  {
                    "name": "Vary",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Vary",
                    "value": "Accept-Encoding"
                  },
                  {
                    "name": "X-Powered-By",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "X-Powered-By",
                    "value": "Sails <sailsjs.org>"
                  },
                  {
                    "name": "transfer-encoding",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "transfer-encoding",
                    "value": "chunked"
                  }
                ],
                "body": "{\"status\":\"pass\",\"message\":\"Hawk Authentication successful\"}",
                "cookie": [
                  {
                    "name": "getpostmanlogin",
                    "expires": null,
                    "domain": ".getpostman.com",
                    "path": "/",
                    "secure": false,
                    "httpOnly": false,
                    "hostOnly": false,
                    "session": false,
                    "value": "yes"
                  },
                  {
                    "name": "postman.sid",
                    "expires": null,
                    "domain": ".getpostman.com",
                    "path": "/",
                    "secure": false,
                    "httpOnly": false,
                    "hostOnly": false,
                    "session": false,
                    "value": "9f887f3b7f14b8c29ac4dc4109381b0b89a76e785c7b34251d6c8025b41b24013d2aa49f40e2deac19cbf0594dd984169455534d91ff98d4d1868d67ac857017629f137926e3a04a616bb83a2fb5ab9e6cbea9579ed5d5c1155d47545d72aad5be99f4abd0a7130805b3807d70cd507171dbe9d950d8e35a853f9ec075f5a767c95df4d57f7d521b66605b3bda3801700e26e651d1129c798b729ee3b91702d43ae64ab226c3f426893753def772c15442a7552dc84a3c773d6099a50b0a6af940b64c8176fedfcecd5fc31ccfc3bbc0124bfdaa0d62e4252d4aafb46a3c10963d12391e1fa97a1c0f19a636f57a3ac8cc35567d1cb6cb53b77f8adde3f6754a765596d7d00bdeb9acb5cc8d115e7c3f50ec3228e34d3e6c7464e9039b01868e03d10e9f87772397602453e9e91205de7b86021fad06eb26e69298e99ff1597a670faeb310f8c092041d544851de84f2bee89a92123da6eea286210524035c85361e2af42166a6"
                  },
                  {
                    "name": "sails.sid",
                    "expires": null,
                    "domain": "echo.getpostman.com",
                    "path": "/",
                    "secure": false,
                    "httpOnly": true,
                    "hostOnly": true,
                    "session": true,
                    "value": "s%3AryJV7v-PE4PuTjBK6nH5XOynQ4atuATV.n17KcaLhVmV8TBHNLwdwXgGR7lmqs3i478WPlTbRgZ4"
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "2aefec67-b23b-47b5-95c7-2afca45c32b7",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"response body has json saying passed 'status'\", function () {",
                    "    pm.response.to.have.jsonBody('status', 'pass');",
                    "});"
                  ],
                  "_lastExecutionId": "471ccfaa-73bf-4b3c-90f3-078114fa46e3"
                }
              }
            ]
          },
          {
            "_": {
              "postman_id": "c24dde0c-a7e6-417e-837b-f9b5d930dd8b"
            },
            "id": "c24dde0c-a7e6-417e-837b-f9b5d930dd8b",
            "name": "OAuth1.0 (verify signature)",
            "request": {
              "description": {
                "content": "OAuth1.0a is a specification that defines a protocol that can be used by one\nservice to access \"protected\" resources (endpoints) on another service. A\nmajor part of OAuth1.0 is HTTP Request Signing. This endpoint allows you to \ncheck whether the request calculation works properly in the client. \n\nThe endpoint supports the HTTP ``Authorization`` header. In case the signature\nverification fails, the endpoint provides the four debug values,\n\n* ``base_uri``\n* ``normalized_param_string``\n* ``base_string``\n* ``signing_key``\n\nFor more details about these parameters, check the [OAuth1.0a Specification](http://oauth.net/core/1.0a/)\n\nIn order to use this endpoint, you can set the following values:\n\n> Consumer Key: ``RKCGzna7bv9YD57c``\n>\n> Consumer Secret: ``D+EdQ-gs$-%@2Nu7``\n\nIf you are using Postman, also check the \"Add params to header\" and \n\"Auto add parameters\" boxes.",
                "type": "text/plain"
              },
              "url": {
                "protocol": "https",
                "path": [
                  "oauth1"
                ],
                "host": [
                  "postman-echo",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "oauth1",
                "oauth1": [
                  {
                    "type": "any",
                    "value": "RKCGzna7bv9YD57c",
                    "key": "consumerKey"
                  },
                  {
                    "type": "any",
                    "value": "D+EdQ-gs$-%@2Nu7",
                    "key": "consumerSecret"
                  },
                  {
                    "type": "any",
                    "value": "",
                    "key": "token"
                  },
                  {
                    "type": "any",
                    "value": "",
                    "key": "tokenSecret"
                  },
                  {
                    "type": "any",
                    "value": "HMAC-SHA1",
                    "key": "signatureMethod"
                  },
                  {
                    "type": "any",
                    "value": "",
                    "key": "timestamp"
                  },
                  {
                    "type": "any",
                    "value": "",
                    "key": "nonce"
                  },
                  {
                    "type": "any",
                    "value": "",
                    "key": "version"
                  },
                  {
                    "type": "any",
                    "value": "",
                    "key": "realm"
                  },
                  {
                    "type": "any",
                    "value": true,
                    "key": "addParamsToHeader"
                  },
                  {
                    "type": "any",
                    "value": false,
                    "key": "addEmptyParamsToSign"
                  }
                ]
              }
            },
            "response": [
              {
                "_": {
                  "postman_previewlanguage": "javascript"
                },
                "id": "29828e02-1c2f-4bd9-9b1c-b87bef13daec",
                "name": "401",
                "originalRequest": {
                  "url": {
                    "protocol": "https",
                    "path": [
                      "oauth1"
                    ],
                    "host": [
                      "echo",
                      "getpostman",
                      "com"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Authorization",
                      "key": "Authorization",
                      "value": "OAuth oauth_consumer_key=\"RKCGzna7bv9YD57c_wrong\",oauth_signature_method=\"HMAC-SHA1\",oauth_timestamp=\"1472121295\",oauth_nonce=\"8LTsU2\",oauth_version=\"1.0\",oauth_signature=\"tSUexpY%2B7EhSY7cFXiFN5EMx2zw%3D\""
                    }
                  ],
                  "method": "GET"
                },
                "status": "Unauthorized",
                "code": 401,
                "header": [
                  {
                    "name": "Access-Control-Allow-Credentials",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Credentials",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Headers",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Headers",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Methods",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Methods",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Origin",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Origin",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Expose-Headers",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Expose-Headers",
                    "value": ""
                  },
                  {
                    "name": "Connection",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Connection",
                    "value": "keep-alive"
                  },
                  {
                    "name": "Content-Length",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Length",
                    "value": "536"
                  },
                  {
                    "name": "Content-Type",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Type",
                    "value": "application/json; charset=utf-8"
                  },
                  {
                    "name": "Date",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Date",
                    "value": "Thu, 25 Aug 2016 10:34:55 GMT"
                  },
                  {
                    "name": "ETag",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "ETag",
                    "value": "W/\"218-SGnurnTsu5qV5cCYWxsJlg\""
                  },
                  {
                    "name": "Server",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Server",
                    "value": "nginx/1.8.1"
                  },
                  {
                    "name": "Vary",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Vary",
                    "value": "Accept-Encoding"
                  }
                ],
                "body": "{\"status\":\"fail\",\"message\":\"HMAC-SHA1 verification failed\",\"base_uri\":\"https://echo.getpostman.com/oauth1\",\"normalized_param_string\":\"oauth_consumer_key=RKCGzna7bv9YD57c_wrong&oauth_nonce=8LTsU2&oauth_signature_method=HMAC-SHA1&oauth_timestamp=1472121295&oauth_version=1.0\",\"base_string\":\"GET&https%3A%2F%2Fecho.getpostman.com%2Foauth1&oauth_consumer_key%3DRKCGzna7bv9YD57c_wrong%26oauth_nonce%3D8LTsU2%26oauth_signature_method%3DHMAC-SHA1%26oauth_timestamp%3D1472121295%26oauth_version%3D1.0\",\"signing_key\":\"D%2BEdQ-gs%24-%25%402Nu7&\"}",
                "cookie": []
              },
              {
                "_": {
                  "postman_previewlanguage": "javascript"
                },
                "id": "c7bfbbd7-3b6c-4200-9215-bb6ce3b00341",
                "name": "200",
                "originalRequest": {
                  "url": {
                    "protocol": "https",
                    "path": [
                      "oauth1"
                    ],
                    "host": [
                      "echo",
                      "getpostman",
                      "com"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "name": "Authorization",
                      "key": "Authorization",
                      "value": "OAuth oauth_consumer_key=\"RKCGzna7bv9YD57c\",oauth_signature_method=\"HMAC-SHA1\",oauth_timestamp=\"1472121261\",oauth_nonce=\"ki0RQW\",oauth_version=\"1.0\",oauth_signature=\"s0rK92Myxx7ceUBVzlMaxiiXU00%3D\""
                    }
                  ],
                  "method": "GET"
                },
                "status": "OK",
                "code": 200,
                "header": [
                  {
                    "name": "Access-Control-Allow-Credentials",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Credentials",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Headers",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Headers",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Methods",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Methods",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Origin",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Origin",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Expose-Headers",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Expose-Headers",
                    "value": ""
                  },
                  {
                    "name": "Connection",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Connection",
                    "value": "keep-alive"
                  },
                  {
                    "name": "Content-Encoding",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Encoding",
                    "value": "gzip"
                  },
                  {
                    "name": "Content-Length",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Length",
                    "value": "95"
                  },
                  {
                    "name": "Content-Type",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Type",
                    "value": "application/json; charset=utf-8"
                  },
                  {
                    "name": "Date",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Date",
                    "value": "Thu, 25 Aug 2016 10:34:23 GMT"
                  },
                  {
                    "name": "ETag",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "ETag",
                    "value": "W/\"4e-Cq3UhvpVSyl6R6204lPVIA\""
                  },
                  {
                    "name": "Server",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Server",
                    "value": "nginx/1.8.1"
                  },
                  {
                    "name": "Vary",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Vary",
                    "value": "Accept-Encoding"
                  }
                ],
                "body": "{\"status\":\"pass\",\"message\":\"OAuth-1.0a signature verification was successful\"}",
                "cookie": []
              }
            ],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "17c097fe-980e-419c-8951-0f95f422f1ec",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"response body has json saying passed 'status'\", function () {",
                    "    pm.response.to.have.jsonBody('status', 'pass');",
                    "});"
                  ],
                  "_lastExecutionId": "bf58dedc-13f2-40c5-9f50-4b4a426055e7"
                }
              }
            ]
          }
        ],
        "event": [],
        "protocolProfileBehavior": {}
      },
      {
        "_": {
          "postman_id": "92684288-4cd0-4e3d-8d22-1a771203f421"
        },
        "id": "92684288-4cd0-4e3d-8d22-1a771203f421",
        "name": "Cookie Manipulation",
        "description": {
          "content": "The cookie related endpoints allow one to get, set and delete simple cookies.\n\nCookies are small snippets of information that is stored in the browser and sent back to the server with every subsequent requests in order to store useful information between requests.\nIf you want to know more about cookies, read the [HTTP Cookie](https://en.wikipedia.org/wiki/HTTP_cookie) article on wikipedia.",
          "type": "text/plain"
        },
        "item": [
          {
            "_": {
              "postman_id": "e5131d4e-be81-44cd-ae43-9679603abef5"
            },
            "id": "e5131d4e-be81-44cd-ae43-9679603abef5",
            "name": "Set Cookies",
            "request": {
              "description": {
                "content": "The cookie setter endpoint accepts a list of cookies and their values as part of URL parameters of a `GET` request. These cookies are saved and can be subsequently retrieved or deleted. The response of this request returns a JSON with all cookies listed.\n\nTo set your own set of cookies, simply replace the URL parameters \"foo1=bar1&foo2=bar2\" with your own set of key-value pairs.",
                "type": "text/plain"
              },
              "url": {
                "protocol": "https",
                "path": [
                  "cookies",
                  "set"
                ],
                "host": [
                  "postman-echo",
                  "com"
                ],
                "query": [
                  {
                    "key": "foo1",
                    "value": "bar1"
                  },
                  {
                    "key": "foo2",
                    "value": "bar2"
                  }
                ],
                "variable": []
              },
              "method": "GET"
            },
            "response": [
              {
                "_": {
                  "postman_previewlanguage": "javascript"
                },
                "id": "e794d462-743a-40cf-a352-8d4ae858944f",
                "name": "Cookies",
                "originalRequest": {
                  "url": {
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "status": "OK",
                "code": 200,
                "header": [
                  {
                    "name": "Access-Control-Allow-Credentials",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Credentials",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Headers",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Headers",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Methods",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Methods",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Origin",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Origin",
                    "value": ""
                  },
                  {
                    "name": "Connection",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Connection",
                    "value": "keep-alive"
                  },
                  {
                    "name": "Content-Encoding",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Encoding",
                    "value": "gzip"
                  },
                  {
                    "name": "Content-Length",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Length",
                    "value": "51"
                  },
                  {
                    "name": "Content-Type",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Type",
                    "value": "application/json; charset=utf-8"
                  },
                  {
                    "name": "Date",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Date",
                    "value": "Thu, 29 Oct 2015 06:15:28 GMT"
                  },
                  {
                    "name": "Server",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Server",
                    "value": "nginx/1.6.2"
                  },
                  {
                    "name": "Vary",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Vary",
                    "value": "Accept-Encoding"
                  },
                  {
                    "name": "X-Powered-By",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "X-Powered-By",
                    "value": "Sails <sailsjs.org>"
                  }
                ],
                "body": "{\"cookies\":{\"foo1\":\"bar\",\"foo2\":\"bar\"}}",
                "cookie": []
              }
            ],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "27f4a328-1cb5-4f4e-a97e-534844e01a20",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('response should be 200 or 302', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 302]);",
                    "});",
                    "",
                    "pm.test('the \"foo1\" cookie has correct value', function () {",
                    "    pm.expect(pm.cookies.toObject()).to.have.property('foo1', 'bar1');",
                    "});",
                    "",
                    "pm.test('the \"foo2\" cookie has correct value', function () {",
                    "    pm.expect(pm.cookies.toObject()).to.have.property('foo2', 'bar2');",
                    "});",
                    "",
                    "// response code could be either a 200 or a redirection based on the settings of ",
                    "// the http client. hence we need to handle both cases",
                    "pm.test('response body should be valid', function () {",
                    "    if (pm.response.code === 200) {",
                    "        pm.response.to.have.jsonBody('cookies.foo1', 'bar1')",
                    "            .and.have.jsonBody('cookies.foo2', 'bar2');",
                    "    }",
                    "    else {",
                    "        pm.response.to.have.body('Found. Redirecting to /cookies');",
                    "    }",
                    "});"
                  ],
                  "_lastExecutionId": "62f50b3a-c073-434e-9eb0-a0d3c72c20c7"
                }
              }
            ]
          },
          {
            "_": {
              "postman_id": "fb8bb1b4-8814-405a-bd5b-f1606baa0e5d"
            },
            "id": "fb8bb1b4-8814-405a-bd5b-f1606baa0e5d",
            "name": "Get Cookies",
            "request": {
              "description": {
                "content": "Use this endpoint to get a list of all cookies that are stored with respect to this domain. Whatever key-value pairs that has been previously set by calling the \"Set Cookies\" endpoint, will be returned as response JSON.",
                "type": "text/plain"
              },
              "url": {
                "protocol": "https",
                "path": [
                  "cookies"
                ],
                "host": [
                  "postman-echo",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [
              {
                "_": {
                  "postman_previewlanguage": "javascript"
                },
                "id": "c4339d54-0653-4b0b-93dd-1f9a62852883",
                "name": "Cookies",
                "originalRequest": {
                  "url": {
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "status": "OK",
                "code": 200,
                "header": [
                  {
                    "name": "Access-Control-Allow-Credentials",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Credentials",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Headers",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Headers",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Methods",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Methods",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Origin",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Origin",
                    "value": ""
                  },
                  {
                    "name": "Connection",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Connection",
                    "value": "keep-alive"
                  },
                  {
                    "name": "Content-Encoding",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Encoding",
                    "value": "gzip"
                  },
                  {
                    "name": "Content-Length",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Length",
                    "value": "46"
                  },
                  {
                    "name": "Content-Type",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Type",
                    "value": "application/json; charset=utf-8"
                  },
                  {
                    "name": "Date",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Date",
                    "value": "Thu, 29 Oct 2015 06:16:29 GMT"
                  },
                  {
                    "name": "Server",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Server",
                    "value": "nginx/1.6.2"
                  },
                  {
                    "name": "Vary",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Vary",
                    "value": "Accept-Encoding"
                  },
                  {
                    "name": "X-Powered-By",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "X-Powered-By",
                    "value": "Sails <sailsjs.org>"
                  }
                ],
                "body": "{\"cookies\":{\"foo2\":\"bar\"}}",
                "cookie": []
              }
            ],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "44843f19-d9b4-46f9-b9b1-8ab4c4f5eed5",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('the \"foo1\" cookie has correct value', function () {",
                    "    pm.expect(pm.cookies.toObject()).to.have.property('foo1', 'bar1');",
                    "});",
                    "",
                    "pm.test('the \"foo2\" cookie has correct value', function () {",
                    "    pm.expect(pm.cookies.toObject()).to.have.property('foo2', 'bar2');",
                    "});",
                    "",
                    "pm.test('response body should be valid', function () {",
                    "    pm.response.to.have.jsonBody('cookies.foo1', 'bar1');",
                    "    pm.response.to.have.jsonBody('cookies.foo2', 'bar2');",
                    "});"
                  ],
                  "_lastExecutionId": "484b6b76-d69f-48b7-a840-0ade1993fca0"
                }
              }
            ]
          },
          {
            "_": {
              "postman_id": "3f913e70-6ba8-4252-a3b1-5d4faa5f4d0b"
            },
            "id": "3f913e70-6ba8-4252-a3b1-5d4faa5f4d0b",
            "name": "Delete Cookies",
            "request": {
              "description": {
                "content": "One or more cookies that has been set for this domain can be deleted by providing the cookie names as part of the URL parameter. The response of this request is a JSON containing the list of currently set cookies.",
                "type": "text/plain"
              },
              "url": {
                "protocol": "https",
                "path": [
                  "cookies",
                  "delete"
                ],
                "host": [
                  "postman-echo",
                  "com"
                ],
                "query": [
                  {
                    "key": "foo1",
                    "value": null
                  },
                  {
                    "key": "foo2",
                    "value": null
                  }
                ],
                "variable": []
              },
              "method": "GET"
            },
            "response": [
              {
                "_": {
                  "postman_previewlanguage": "javascript"
                },
                "id": "8b401bd4-e180-433a-a170-a0eeafb43735",
                "name": "Cookies Response",
                "originalRequest": {
                  "url": {
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "status": "OK",
                "code": 200,
                "header": [
                  {
                    "name": "Access-Control-Allow-Credentials",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Credentials",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Headers",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Headers",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Methods",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Methods",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Origin",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Origin",
                    "value": ""
                  },
                  {
                    "name": "Connection",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Connection",
                    "value": "keep-alive"
                  },
                  {
                    "name": "Content-Encoding",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Encoding",
                    "value": "gzip"
                  },
                  {
                    "name": "Content-Length",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Length",
                    "value": "46"
                  },
                  {
                    "name": "Content-Type",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Type",
                    "value": "application/json; charset=utf-8"
                  },
                  {
                    "name": "Date",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Date",
                    "value": "Thu, 29 Oct 2015 06:16:00 GMT"
                  },
                  {
                    "name": "Server",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Server",
                    "value": "nginx/1.6.2"
                  },
                  {
                    "name": "Vary",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Vary",
                    "value": "Accept-Encoding"
                  },
                  {
                    "name": "X-Powered-By",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "X-Powered-By",
                    "value": "Sails <sailsjs.org>"
                  }
                ],
                "body": "{\"cookies\":{\"foo2\":\"bar\"}}",
                "cookie": []
              }
            ],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "56bb7b1b-6288-4525-a38c-2ab302eb569c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('response should be 200 or 302', function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 302]);",
                    "});",
                    "",
                    "pm.test('the \"foo1\" cookie should not be present', function () {",
                    "    pm.expect(pm.cookies.toObject()).to.not.have.property('foo1');",
                    "});",
                    "",
                    "pm.test('the \"foo2\" cookie should not be present', function () {",
                    "    pm.expect(pm.cookies.toObject()).to.not.have.property('foo2');",
                    "});",
                    "",
                    "// response code could be either a 200 or a redirection based on the settings of ",
                    "// the http client. hence we need to handle both cases",
                    "pm.test('response body should be valid', function () {",
                    "    if (pm.response.code === 200) {",
                    "        pm.response.to.not.have.jsonBody('cookies.foo1');",
                    "        pm.response.to.not.have.jsonBody('cookies.foo2');",
                    "    }",
                    "    else {",
                    "        pm.response.to.have.body('Found. Redirecting to /cookies');",
                    "    }",
                    "});"
                  ],
                  "_lastExecutionId": "11913f8d-791c-4661-81e5-ec29dd70b2df"
                }
              }
            ]
          }
        ],
        "event": [],
        "protocolProfileBehavior": {}
      },
      {
        "_": {
          "postman_id": "1d98b63b-354a-4372-b41c-73729a57a0b7"
        },
        "id": "1d98b63b-354a-4372-b41c-73729a57a0b7",
        "name": "Utilities",
        "item": [
          {
            "_": {
              "postman_id": "f2f62e92-0f71-4c99-8e85-1d56b2baeb27"
            },
            "id": "f2f62e92-0f71-4c99-8e85-1d56b2baeb27",
            "name": "Response Status Code",
            "request": {
              "description": {
                "content": "This endpoint allows one to instruct the server which status code to respond with.\n\nEvery response is accompanied by a status code. The status code provides a summary of the nature of response sent by the server. For example, a status code of `200` means everything is okay with the response and a code of `404` implies that the requested URL does not exist on server. \nA list of all valid HTTP status code can be found at the [List of Status Codes](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) wikipedia article. When using Postman, the response status code is described for easy reference.\n\nNote that if an invalid status code is requested to be sent, the server returns a status code of `400 Bad Request`.",
                "type": "text/plain"
              },
              "url": {
                "protocol": "https",
                "path": [
                  "status",
                  "200"
                ],
                "host": [
                  "postman-echo",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [
              {
                "_": {
                  "postman_previewlanguage": "javascript"
                },
                "id": "79471268-5417-450a-ad71-28d08ad8f9f7",
                "name": "200",
                "originalRequest": {
                  "url": {
                    "protocol": "https",
                    "path": [
                      "status",
                      "200"
                    ],
                    "host": [
                      "echo",
                      "getpostman",
                      "com"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "status": "OK",
                "code": 200,
                "header": [
                  {
                    "name": "Access-Control-Allow-Credentials",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Credentials",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Headers",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Headers",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Methods",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Methods",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Origin",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Origin",
                    "value": ""
                  },
                  {
                    "name": "Connection",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Connection",
                    "value": "keep-alive"
                  },
                  {
                    "name": "Content-Length",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Length",
                    "value": "14"
                  },
                  {
                    "name": "Content-Type",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Type",
                    "value": "application/json; charset=utf-8"
                  },
                  {
                    "name": "Date",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Date",
                    "value": "Thu, 31 Mar 2016 11:58:47 GMT"
                  },
                  {
                    "name": "ETag",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "ETag",
                    "value": "W/\"e-1056260003\""
                  },
                  {
                    "name": "Server",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Server",
                    "value": "nginx/1.6.2"
                  },
                  {
                    "name": "Vary",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Vary",
                    "value": "Accept-Encoding"
                  },
                  {
                    "name": "X-Powered-By",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "X-Powered-By",
                    "value": "Sails <sailsjs.org>"
                  }
                ],
                "body": "{\"status\":200}",
                "cookie": [
                  {
                    "name": "getpostmanlogin",
                    "expires": null,
                    "domain": ".getpostman.com",
                    "path": "/",
                    "secure": false,
                    "httpOnly": false,
                    "hostOnly": false,
                    "session": false,
                    "value": "yes"
                  },
                  {
                    "name": "postman.sid",
                    "expires": null,
                    "domain": ".getpostman.com",
                    "path": "/",
                    "secure": false,
                    "httpOnly": false,
                    "hostOnly": false,
                    "session": false,
                    "value": "df0c0256028d7ec4d641f766104a9571a8e249685bbc667d7cee030bbf44d3209495c70c03248e31e678a93812591d5e12187a8e99bf6bc5e80c40903f6ff6226938f24e413c0ffa613a7372064ec44a8594e8d3ede6945e34394f369573feeebc4a73a3e24b8c9ac18a53704addb5fd3f71f1ede488ff551feb059e9c1fb208164814e45e0312c4df8ea6e83c26702f42ae634c6afbe82d57c857bbf5598b5527961c1c28688dc2580070a4389f0cf4ec0a179b5b9c11b2ecbaa5460d374065bf5c7a3add9505df0fa89acb9f227f05ed2d4c6b58c39d6d728bd49f6f323ae67d4a75882aa7682f5d6fc5b981ba411d94aa93970bfaefa1953a73e440d50d012b5f288975c888e2345ee7777e746fb5aed3a7b2dbc087c6456621aa78c24a3c17c5f96cf59844933249a352f631e2008cffac6faf06d0e253dcc01cf0067bf56c1fbc5ed61fec1861b60c5accf35ffc2e56154a113004fa1db9d7171c3af8fc063918554092f5"
                  },
                  {
                    "name": "_ga",
                    "expires": null,
                    "domain": ".echo.getpostman.com",
                    "path": "/",
                    "secure": false,
                    "httpOnly": false,
                    "hostOnly": false,
                    "session": false,
                    "value": "GA1.3.1703443399.1459422978"
                  },
                  {
                    "name": "sails.sid",
                    "expires": null,
                    "domain": "echo.getpostman.com",
                    "path": "/",
                    "secure": false,
                    "httpOnly": true,
                    "hostOnly": true,
                    "session": true,
                    "value": "s%3AvuHU0EKeDbyNjVrEc7U30dMPzVu8CRaD.GOV1H9olcVzXqrwqP%2BC%2B6MVj2UczXivcN00jgPoDYfs"
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "dd731543-1b42-418c-91ee-08a3c28d37a8",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"response has valid json body\", function () {",
                    "    pm.response.to.have.jsonBody('status');",
                    "});",
                    "",
                    "// additional sanity tests",
                    "pm.test(\"status in response body must match the one in request\", function () {",
                    "    pm.response.to.have.jsonBody('status', Number(_.get(pm.request, 'url.path[1]')));",
                    "});"
                  ],
                  "_lastExecutionId": "10acb2bb-9be0-4b26-b70e-adba3cf7bd2a"
                }
              }
            ]
          },
          {
            "_": {
              "postman_id": "45562bc6-8571-48db-adfa-105f1be68a30"
            },
            "id": "45562bc6-8571-48db-adfa-105f1be68a30",
            "name": "Streamed Response",
            "request": {
              "description": {
                "content": "This endpoint allows one to recieve streaming http response using [chunked transfer encoding](https://en.wikipedia.org/wiki/Chunked_transfer_encoding) of a configurable length.\n\nA streaming response does not wait for the entire response to be generated on server before flushing it out. This implies that for a fairly large response, parts of it can be streamed to the requestee as and when it is generated on server. The client can then take actions of processing this partially received data.",
                "type": "text/plain"
              },
              "url": {
                "protocol": "https",
                "path": [
                  "stream",
                  "5"
                ],
                "host": [
                  "postman-echo",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "2e1210f5-c25a-42e3-8091-e8489054af4e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"response has chunked transfer encoding header\", function () {",
                    "    pm.response.to.have.header('transfer-encoding', 'chunked');",
                    "});"
                  ],
                  "_lastExecutionId": "750e9cb5-bbe5-4a35-9589-7833ea666975"
                }
              }
            ]
          },
          {
            "_": {
              "postman_id": "19ec1bde-bd85-4b3e-9c7c-5fb739f1a267"
            },
            "id": "19ec1bde-bd85-4b3e-9c7c-5fb739f1a267",
            "name": "Delay Response",
            "request": {
              "description": {
                "content": "Using this endpoint one can configure how long it takes for the server to come back with a response. Appending a number to the URL defines the time (in seconds) the server will wait before responding.\n\nNote that a maximum delay of 10 seconds is accepted by the server.",
                "type": "text/plain"
              },
              "url": {
                "protocol": "https",
                "path": [
                  "delay",
                  "2"
                ],
                "host": [
                  "postman-echo",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [
              {
                "_": {
                  "postman_previewlanguage": "json"
                },
                "id": "25e4abc5-a7e4-4eac-9ffa-4c6d1a21c45e",
                "name": "success-response",
                "originalRequest": {
                  "url": {
                    "protocol": "https",
                    "path": [
                      "delay",
                      "3"
                    ],
                    "host": [
                      "echo",
                      "getpostman",
                      "com"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "status": "OK",
                "code": 200,
                "header": [
                  {
                    "name": "Access-Control-Allow-Credentials",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Credentials",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Headers",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Headers",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Methods",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Methods",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Origin",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Origin",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Expose-Headers",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Expose-Headers",
                    "value": ""
                  },
                  {
                    "name": "Connection",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Connection",
                    "value": "keep-alive"
                  },
                  {
                    "name": "Content-Length",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Length",
                    "value": "13"
                  },
                  {
                    "name": "Content-Type",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Type",
                    "value": "application/json; charset=utf-8"
                  },
                  {
                    "name": "Date",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Date",
                    "value": "Mon, 02 Jan 2017 09:19:03 GMT"
                  },
                  {
                    "name": "ETag",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "ETag",
                    "value": "W/\"d-t/L/D5c0SDl+MoXtKdSVOg\""
                  },
                  {
                    "name": "Server",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Server",
                    "value": "nginx/1.10.1"
                  },
                  {
                    "name": "Vary",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Vary",
                    "value": "Accept-Encoding"
                  }
                ],
                "body": "{\"delay\":\"3\"}",
                "cookie": [
                  {
                    "name": "sails.sid",
                    "expires": null,
                    "domain": "echo.getpostman.com",
                    "path": "/",
                    "secure": false,
                    "httpOnly": true,
                    "value": "s%3AYjUiFBtGiJVL2a-qzZQZ1DFlAMhgXN9O.WaAjRUV0OteZxwmhbNibuB7VKse068JJIh6PwLQUKmQ"
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "4243d71b-c0cb-4af8-9f32-6859a3397506",
                  "type": "text/javascript",
                  "exec": [
                    "var _ = require('lodash');",
                    "",
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"response has valid json body\", function () {",
                    "    pm.response.to.have.jsonBody('delay');",
                    "});",
                    "",
                    "// additional sanity tests",
                    "pm.test(\"request must have a valid delay\", function () {",
                    "    pm.expect(Number(_.get(pm.request, 'url.path[1]'))).to.be.above(0).and.below(10);",
                    "});",
                    "pm.test(\"response should take more time than the delay specified\", function () {",
                    "    pm.expect(pm.response.responseTime).to.be.above(Number(_.get(pm.request, 'url.path[1]')));",
                    "});"
                  ],
                  "_lastExecutionId": "dedb7e80-5254-4790-b823-c1900b54f147"
                }
              }
            ]
          },
          {
            "_": {
              "postman_id": "b14cae14-5220-4966-88b7-42d7167b0e82"
            },
            "id": "b14cae14-5220-4966-88b7-42d7167b0e82",
            "name": "Get UTF8 Encoded Response",
            "request": {
              "description": {
                "content": "If a response of an endpoint requires to send data beyond the basic English / ASCII character set, the `charset` parameter in the `Content-Type` response header defines the character encoding policy.\n\nThis endpoint returns an `UTF8` character encoded response body with text in various languages such as Greek, Latin, East Asian, etc. Postman can interpret the character encoding and use appropriate methods to display the character set in responses.",
                "type": "text/plain"
              },
              "url": {
                "protocol": "https",
                "path": [
                  "encoding",
                  "utf8"
                ],
                "host": [
                  "postman-echo",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "810dd656-181c-4e5a-9fe7-191d5a1a8e31",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"response has charset in content-type header\", function () {",
                    "    pm.response.to.have.header('content-type', 'text/html; charset=utf-8');",
                    "});",
                    "",
                    "pm.test(\"response has chunked transfer encoding header\", function () {",
                    "    pm.response.to.have.header('transfer-encoding', 'chunked');",
                    "});"
                  ],
                  "_lastExecutionId": "25e34363-0b2b-41d3-a0ae-3512bdfca7c5"
                }
              }
            ]
          },
          {
            "_": {
              "postman_id": "d4c90b85-644a-4637-8ff6-683443b3b37c"
            },
            "id": "d4c90b85-644a-4637-8ff6-683443b3b37c",
            "name": "GZip Compressed Response",
            "request": {
              "description": {
                "content": "This endpoint returns the response using [gzip compression algoritm](https://en.wikipedia.org/wiki/Gzip).\nThe uncompressed response is a JSON string containing the details of the request sent by the client. For this endpoint to work, one should request with `Accept-encoding` header containing `gzip` as part of its value. Postman supports gzip, deflate and SDCH decoding and automatically sends them as part of the request.\n\nHTTP Compression allows the server to send responses in a compressed format, which is uncompressed by the client before processing. This reduces network bandwidth consumption at the cost of increase in CPU usage.\nTo know more about this, refer the [HTTP Compression](https://en.wikipedia.org/wiki/HTTP_compression) wikipedia article.",
                "type": "text/plain"
              },
              "url": {
                "protocol": "https",
                "path": [
                  "gzip"
                ],
                "host": [
                  "postman-echo",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "e1a272b2-6014-4cc4-903d-7051aa2004e3",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"response has valid json body\", function () {",
                    "    pm.response.to.have.jsonBody('gzipped', true);",
                    "});",
                    "",
                    "pm.test('response headers should indicate valid content encoding', function  () {",
                    "    pm.response.to.have.header('content-encoding', 'gzip')",
                    "        .and.have.header('content-type', 'application/json');",
                    "});",
                    "",
                    "pm.test('requesting http client should accept compressed response', function () {",
                    "    pm.expect(pm.response.json()).to.have.nested.property('headers.accept-encoding')",
                    "        .and.to.match(/.*gzip.*/);",
                    "});"
                  ],
                  "_lastExecutionId": "a9256b13-2642-4017-a4d6-26b409a4b491"
                }
              }
            ]
          },
          {
            "_": {
              "postman_id": "1a13c2df-f757-49d5-b37b-6bf6851f0df8"
            },
            "id": "1a13c2df-f757-49d5-b37b-6bf6851f0df8",
            "name": "Deflate Compressed Response",
            "request": {
              "description": {
                "content": "This endpoint returns the response using [deflate compression algoritm](https://en.wikipedia.org/wiki/DEFLATE). \nThe uncompressed response is a JSON string containing the details of the request sent by the client. For this endpoint to work, one should request with `Accept-encoding` header containing `deflate` as part of its value. Postman supports gzip, deflate and SDCH decoding and automatically sends them as part of the request.\n\nHTTP Compression allows the server to send responses in a compressed format, which is uncompressed by the client before processing. This reduces network bandwidth consumption at the cost of increase in CPU usage.\nTo know more about this, refer the [HTTP Compression](https://en.wikipedia.org/wiki/HTTP_compression) wikipedia article.",
                "type": "text/plain"
              },
              "url": {
                "protocol": "https",
                "path": [
                  "deflate"
                ],
                "host": [
                  "postman-echo",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "353b437b-66f2-4ce3-8edf-f457f1581772",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"response has valid json body\", function () {",
                    "    pm.response.to.have.jsonBody('deflated', true);",
                    "});",
                    "",
                    "pm.test('response headers should indicate valid content encoding', function  () {",
                    "    pm.response.to.have.header('content-encoding', 'deflate')",
                    "        .and.have.header('content-type', 'application/json');",
                    "});",
                    "",
                    "pm.test('requesting http client should accept compressed response', function () {",
                    "    pm.expect(pm.response.json()).to.have.nested.property('headers.accept-encoding')",
                    "        .and.to.match(/.*deflate.*/);",
                    "});"
                  ],
                  "_lastExecutionId": "4660971a-3ff5-44f5-a124-9f5fe105c621"
                }
              }
            ]
          },
          {
            "_": {
              "postman_id": "9ada0814-d483-4355-978c-d1ba3436f3c3"
            },
            "id": "9ada0814-d483-4355-978c-d1ba3436f3c3",
            "name": "IP address in JSON format",
            "request": {
              "description": {
                "content": "A simple `GET` request to return the IP address of the source request in the following `JSON` format:\n\n```json\n{\n  ip: \"request-ip-address\"\n}\n```",
                "type": "text/plain"
              },
              "url": {
                "protocol": "https",
                "path": [
                  "ip"
                ],
                "host": [
                  "postman-echo",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "8e24e512-a983-47fd-a07c-b875b18e1774",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"response has valid json body\", function () {",
                    "    pm.response.to.have.jsonBody('ip');",
                    "});",
                    "",
                    "pm.test(\"response must return a valid ip address\", function () {",
                    "    pm.expect(pm.response.json().ip).to",
                    "        // a really gnarly regular expression to ensure that ip address is in correct format",
                    "        .match(/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/);",
                    "});"
                  ],
                  "_lastExecutionId": "5213408a-a005-4cc1-a144-56850d047df0"
                }
              }
            ]
          }
        ],
        "event": [],
        "protocolProfileBehavior": {}
      },
      {
        "_": {
          "postman_id": "94b9a299-0866-43d6-9660-591b1ea78fa3"
        },
        "id": "94b9a299-0866-43d6-9660-591b1ea78fa3",
        "name": "Utilities / Date and Time",
        "description": {
          "content": "A set of `/time/*` mounted requests to perform date-time manipulations, among other operations.\n",
          "type": "text/plain"
        },
        "item": [
          {
            "_": {
              "postman_id": "67927941-3fd3-4f44-9a97-4b8979e1e5f3"
            },
            "id": "67927941-3fd3-4f44-9a97-4b8979e1e5f3",
            "name": "Current UTC time",
            "request": {
              "description": {
                "content": "A simple `GET` request to `/time/now` to return the current timestamp as a UTC string.\n\n```\nFri, 04 Nov 2016 09:00:46 GMT\n```",
                "type": "text/plain"
              },
              "url": {
                "protocol": "https",
                "path": [
                  "time",
                  "now"
                ],
                "host": [
                  "postman-echo",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [
              {
                "_": {
                  "postman_previewlanguage": "html"
                },
                "id": "cfb5bd57-d760-4033-83ed-808715960969",
                "name": "time as text",
                "originalRequest": {
                  "url": {
                    "protocol": "https",
                    "path": [
                      "time",
                      "now"
                    ],
                    "host": [
                      "postman-echo",
                      "com"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "status": "OK",
                "code": 200,
                "header": [
                  {
                    "name": "Access-Control-Allow-Credentials",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Credentials",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Headers",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Headers",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Methods",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Methods",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Origin",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Origin",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Expose-Headers",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Expose-Headers",
                    "value": ""
                  },
                  {
                    "name": "Connection",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Connection",
                    "value": "keep-alive"
                  },
                  {
                    "name": "Content-Encoding",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Encoding",
                    "value": "gzip"
                  },
                  {
                    "name": "Content-Length",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Length",
                    "value": "49"
                  },
                  {
                    "name": "Content-Type",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Type",
                    "value": "text/html; charset=utf-8"
                  },
                  {
                    "name": "Date",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Date",
                    "value": "Wed, 11 Jan 2017 10:27:12 GMT"
                  },
                  {
                    "name": "ETag",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "ETag",
                    "value": "W/\"1d-2jJhkzratfVX9VZ0+raHbw\""
                  },
                  {
                    "name": "Server",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Server",
                    "value": "nginx/1.10.1"
                  },
                  {
                    "name": "Vary",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Vary",
                    "value": "Accept-Encoding"
                  },
                  {
                    "name": "set-cookie",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "set-cookie",
                    "value": "sails.sid=s%3A2lT3TO7qS1tadeSAp4axl-NcXG9CV6Rf.HGqLY%2FlKEKY4fgCLePaAZs3tCHp%2Bglf7ZOJYlonGeig; Path=/; HttpOnly"
                  }
                ],
                "body": "Wed, 11 Jan 2017 10:27:12 GMT",
                "cookie": [
                  {
                    "name": "sails.sid",
                    "expires": null,
                    "domain": "postman-echo.com",
                    "path": "/",
                    "secure": false,
                    "httpOnly": true,
                    "value": "s%3A2lT3TO7qS1tadeSAp4axl-NcXG9CV6Rf.HGqLY%2FlKEKY4fgCLePaAZs3tCHp%2Bglf7ZOJYlonGeig"
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "8868f348-c1e5-421c-90da-11ee71c96122",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"response time matches server response 'date' header\", function () {",
                    "    pm.expect(pm.response.text()).to.eql(pm.response.headers.get('date'))",
                    "});"
                  ],
                  "_lastExecutionId": "0ff0fe6e-f665-49c8-baad-c92bfd104903"
                }
              }
            ]
          },
          {
            "_": {
              "postman_id": "d1c3e2f2-235a-4cb7-a3b9-b6ff46f7daac"
            },
            "id": "d1c3e2f2-235a-4cb7-a3b9-b6ff46f7daac",
            "name": "Timestamp validity",
            "request": {
              "description": {
                "content": "A simple `GET` request to `/time/valid` to determine the validity of the timestamp, (current by default).\nThis endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a valid key to indicate the result. The response code is `200`.\n\n```\n{\n  valid: true/false\n}\n```",
                "type": "text/plain"
              },
              "url": {
                "protocol": "https",
                "path": [
                  "time",
                  "valid"
                ],
                "host": [
                  "postman-echo",
                  "com"
                ],
                "query": [
                  {
                    "key": "timestamp",
                    "value": "2016-10-10"
                  }
                ],
                "variable": []
              },
              "method": "GET"
            },
            "response": [
              {
                "_": {
                  "postman_previewlanguage": "json"
                },
                "id": "22664ff6-c88a-4b91-9436-5abae42ced68",
                "name": "Invalid Timestamp",
                "originalRequest": {
                  "url": {
                    "protocol": "https",
                    "path": [
                      "time",
                      "valid"
                    ],
                    "host": [
                      "postman-echo",
                      "com"
                    ],
                    "query": [
                      {
                        "key": "timestamp",
                        "value": "2016-10-10"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET"
                },
                "status": "OK",
                "code": 200,
                "header": [
                  {
                    "name": "Access-Control-Allow-Credentials",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Credentials",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Headers",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Headers",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Methods",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Methods",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Origin",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Origin",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Expose-Headers",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Expose-Headers",
                    "value": ""
                  },
                  {
                    "name": "Connection",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Connection",
                    "value": "keep-alive"
                  },
                  {
                    "name": "Content-Length",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Length",
                    "value": "15"
                  },
                  {
                    "name": "Content-Type",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Type",
                    "value": "application/json; charset=utf-8"
                  },
                  {
                    "name": "Date",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Date",
                    "value": "Wed, 11 Jan 2017 10:27:53 GMT"
                  },
                  {
                    "name": "ETag",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "ETag",
                    "value": "W/\"f-/i9mO/upK91ZtL0BkKFGtw\""
                  },
                  {
                    "name": "Server",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Server",
                    "value": "nginx/1.10.1"
                  },
                  {
                    "name": "Vary",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Vary",
                    "value": "Accept-Encoding"
                  },
                  {
                    "name": "set-cookie",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "set-cookie",
                    "value": "sails.sid=s%3ATNJaNxi2QCv4RPBb64sIZxQGN1h6IP3g.9sQVAijlsLsh0r7LgffxXa9k2we6UumPEVv%2Bsk4woLI; Path=/; HttpOnly"
                  }
                ],
                "body": "{\"valid\":false}",
                "cookie": [
                  {
                    "name": "sails.sid",
                    "expires": null,
                    "domain": "postman-echo.com",
                    "path": "/",
                    "secure": false,
                    "httpOnly": true,
                    "value": "s%3ATNJaNxi2QCv4RPBb64sIZxQGN1h6IP3g.9sQVAijlsLsh0r7LgffxXa9k2we6UumPEVv%2Bsk4woLI"
                  }
                ]
              },
              {
                "_": {
                  "postman_previewlanguage": "json"
                },
                "id": "3752ae04-4029-4faf-8703-9981f0aedc7d",
                "name": "Valid Timestamp",
                "originalRequest": {
                  "url": {
                    "protocol": "https",
                    "path": [
                      "time",
                      "valid"
                    ],
                    "host": [
                      "postman-echo",
                      "com"
                    ],
                    "query": [
                      {
                        "key": "timestamp",
                        "value": "2016-10-10"
                      }
                    ],
                    "variable": []
                  },
                  "method": "GET"
                },
                "status": "OK",
                "code": 200,
                "header": [
                  {
                    "name": "Access-Control-Allow-Credentials",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Credentials",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Headers",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Headers",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Methods",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Methods",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Origin",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Origin",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Expose-Headers",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Expose-Headers",
                    "value": ""
                  },
                  {
                    "name": "Connection",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Connection",
                    "value": "keep-alive"
                  },
                  {
                    "name": "Content-Length",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Length",
                    "value": "14"
                  },
                  {
                    "name": "Content-Type",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Type",
                    "value": "application/json; charset=utf-8"
                  },
                  {
                    "name": "Date",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Date",
                    "value": "Wed, 11 Jan 2017 10:27:33 GMT"
                  },
                  {
                    "name": "ETag",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "ETag",
                    "value": "W/\"e-OYN7L87J1Ba9oy5mJE2kcA\""
                  },
                  {
                    "name": "Server",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Server",
                    "value": "nginx/1.10.1"
                  },
                  {
                    "name": "Vary",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Vary",
                    "value": "Accept-Encoding"
                  },
                  {
                    "name": "set-cookie",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "set-cookie",
                    "value": "sails.sid=s%3AdDGZPe1CZw4mAxGVCHr6RfCADCAwquXa.F5MEm5LJad30JHrSwGGoyWLn2OAAGdvUM7kDtzNfdFI; Path=/; HttpOnly"
                  }
                ],
                "body": "{\"valid\":true}",
                "cookie": [
                  {
                    "name": "sails.sid",
                    "expires": null,
                    "domain": "postman-echo.com",
                    "path": "/",
                    "secure": false,
                    "httpOnly": true,
                    "value": "s%3AdDGZPe1CZw4mAxGVCHr6RfCADCAwquXa.F5MEm5LJad30JHrSwGGoyWLn2OAAGdvUM7kDtzNfdFI"
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "3259322a-2c32-418a-b649-49525271b5d3",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"response json should say whether request query time is valid\", function () {",
                    "    pm.response.to.have.jsonBody('valid', true);",
                    "});"
                  ],
                  "_lastExecutionId": "947dcd8e-c109-4fcf-a59b-812c355fd10b"
                }
              }
            ]
          },
          {
            "_": {
              "postman_id": "13de6f76-1b52-426a-878b-793b364b2678"
            },
            "id": "13de6f76-1b52-426a-878b-793b364b2678",
            "name": "Format timestamp",
            "request": {
              "description": {
                "content": "A simple `GET` request to `/time/format` to convert the timestamp to any desired valid format.\n\nThis endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `format` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  format: \"formatted-timestamp\"\n}\n```",
                "type": "text/plain"
              },
              "url": {
                "protocol": "https",
                "path": [
                  "time",
                  "format"
                ],
                "host": [
                  "postman-echo",
                  "com"
                ],
                "query": [
                  {
                    "key": "timestamp",
                    "value": "2016-10-10"
                  },
                  {
                    "key": "format",
                    "value": "mm"
                  }
                ],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "b04ba64f-3306-4160-8ff2-caff65afdf24",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"response json should say whether request query time is valid\", function () {",
                    "    pm.response.to.have.jsonBody('format', '20');",
                    "});"
                  ],
                  "_lastExecutionId": "e6e64041-23ac-4343-9ded-67df22c96f6d"
                }
              }
            ]
          },
          {
            "_": {
              "postman_id": "ce994a9f-e3a1-4d80-b80e-9907b60daa14"
            },
            "id": "ce994a9f-e3a1-4d80-b80e-9907b60daa14",
            "name": "Extract timestamp unit",
            "request": {
              "description": {
                "content": "A simple `GET` request to `/time/unit` to extract the specified timestamp unit (as provided in the `unit` query parameter). The default unit returned is the `year`.\n\nThis endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `unit` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  unit: \"extracted-timestamp-unit\"\n}\n```",
                "type": "text/plain"
              },
              "url": {
                "protocol": "https",
                "path": [
                  "time",
                  "unit"
                ],
                "host": [
                  "postman-echo",
                  "com"
                ],
                "query": [
                  {
                    "key": "timestamp",
                    "value": "2016-10-10"
                  },
                  {
                    "key": "unit",
                    "value": "day"
                  }
                ],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "f35d31af-3cc2-45d6-af0f-2fb63a7bf404",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"response json should say whether request query unit is valid\", function () {",
                    "    pm.response.to.have.jsonBody('unit', 1);",
                    "});"
                  ],
                  "_lastExecutionId": "9cf596b3-6dd6-48dd-9f48-084e3702d0a5"
                }
              }
            ]
          },
          {
            "_": {
              "postman_id": "a4684425-c101-4c22-93f9-06a3b14f6db5"
            },
            "id": "a4684425-c101-4c22-93f9-06a3b14f6db5",
            "name": "Time addition",
            "request": {
              "description": {
                "content": "A simple `GET` request to `/time/add` to add units of time to the specified / current timestamp (as provided in the `years`, `months`, `days`, `hours`, `minutes`, `seconds`, and `milliseconds` query parameters).\n\nThis endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `sum` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  sum: \"sum of (provided / current) and provided timestamps\"\n}\n```",
                "type": "text/plain"
              },
              "url": {
                "protocol": "https",
                "path": [
                  "time",
                  "add"
                ],
                "host": [
                  "postman-echo",
                  "com"
                ],
                "query": [
                  {
                    "key": "timestamp",
                    "value": "2016-10-10"
                  },
                  {
                    "key": "years",
                    "value": "100"
                  }
                ],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "690e316b-b111-401a-9b5b-feee8fe477ed",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"response json should return the added years\", function () {",
                    "    pm.response.to.have.jsonBody('sum', 'Sat Oct 10 2116 00:00:00 GMT+0000');",
                    "});"
                  ],
                  "_lastExecutionId": "d014c719-7f98-4f17-a159-bb2d4f38a74e"
                }
              }
            ]
          },
          {
            "_": {
              "postman_id": "cf3eabd6-f74a-476e-ba44-71ce8d5094c8"
            },
            "id": "cf3eabd6-f74a-476e-ba44-71ce8d5094c8",
            "name": "Time subtraction",
            "request": {
              "description": {
                "content": "A simple `GET` request to `/time/subtract` to subtract units of time from the specified / current timestamp (as provided in the `years`, `months`, `days`, `hours`, `minutes`, `seconds`, and `milliseconds` query parameters).\n\nThis endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `difference` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  difference: \"difference between (provided / current) and provided timestamps\"\n}\n```",
                "type": "text/plain"
              },
              "url": {
                "protocol": "https",
                "path": [
                  "time",
                  "subtract"
                ],
                "host": [
                  "postman-echo",
                  "com"
                ],
                "query": [
                  {
                    "key": "timestamp",
                    "value": "2016-10-10"
                  },
                  {
                    "key": "years",
                    "value": "50"
                  }
                ],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "89834a3a-1f96-4a71-a26b-c9d598da4202",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"response json should return the subtracted years\", function () {",
                    "    pm.response.to.have.jsonBody('difference', 'Mon Oct 10 1966 00:00:00 GMT+0000');",
                    "});"
                  ],
                  "_lastExecutionId": "02b46a92-d30a-4939-8684-45e01bd319fb"
                }
              }
            ]
          },
          {
            "_": {
              "postman_id": "e077a9c3-e0c2-408e-985c-ee1af659bbc5"
            },
            "id": "e077a9c3-e0c2-408e-985c-ee1af659bbc5",
            "name": "Start of time",
            "request": {
              "description": {
                "content": "A simple `GET` request to `/time/start` to return a relative timstamp in the past from the specified / current timestamp (as provided in the `unit` query parameter).\n\nFor instance, if the `unit` has been specified as `month`, the returned timestamp would indicate the beginning of the current month. Similar results are returned for other units of time, like: `years`, `months`, `days`, `hours`, `minutes`, `seconds`, and `milliseconds`\n\nThis endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `start` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  start: \"A timestamp from the past, depending on the `unit` specified\"\n}\n```",
                "type": "text/plain"
              },
              "url": {
                "protocol": "https",
                "path": [
                  "time",
                  "start"
                ],
                "host": [
                  "postman-echo",
                  "com"
                ],
                "query": [
                  {
                    "key": "timestamp",
                    "value": "2016-10-10"
                  },
                  {
                    "key": "unit",
                    "value": "month"
                  }
                ],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "ecf607b2-295e-4714-9021-36295aa20beb",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"response json should return the beginning of month\", function () {",
                    "    pm.response.to.have.jsonBody('start', 'Sat Oct 01 2016 00:00:00 GMT+0000');",
                    "});"
                  ],
                  "_lastExecutionId": "bea1c9b3-7151-4cfd-bbc4-99437505dc6e"
                }
              }
            ]
          },
          {
            "_": {
              "postman_id": "dc44b9cc-7814-4131-8261-615775518a95"
            },
            "id": "dc44b9cc-7814-4131-8261-615775518a95",
            "name": "Object representation",
            "request": {
              "description": {
                "content": "A simple `GET` request to `/time/object` to return the current / provided timestamp as a JSON object.\n\nFor instance, if the `unit` has been specified as `month`, the returned timestamp would indicate the beginning of the current month. Similar results are returned for other units of time, like: `years`, `months`, `days`, `hours`, `minutes`, `seconds`, and `milliseconds`\n\nThis endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  years: 2016,\n  months: 10,\n  days: 10,\n  hours: 23,\n  minutes: 34,\n  seconds: 20,\n  milliseconds: 980\n}\n```",
                "type": "text/plain"
              },
              "url": {
                "protocol": "https",
                "path": [
                  "time",
                  "object"
                ],
                "host": [
                  "postman-echo",
                  "com"
                ],
                "query": [
                  {
                    "key": "timestamp",
                    "value": "2016-10-10"
                  }
                ],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "e3b56686-6c9a-4192-abae-b0cefb4e9efb",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"response json should return the date components\", function () {",
                    "    pm.expect(pm.response.json()).to.eql({",
                    "        \"years\": 2016,",
                    "        \"months\": 9,",
                    "        \"date\": 10,",
                    "        ",
                    "        \"hours\": 0,",
                    "        \"minutes\": 0,",
                    "        \"seconds\": 0,",
                    "        \"milliseconds\": 0",
                    "    });",
                    "});"
                  ],
                  "_lastExecutionId": "34ea0171-9971-42ba-9f93-d726cd62958f"
                }
              }
            ]
          },
          {
            "_": {
              "postman_id": "53a63c13-c1b0-4b09-b94b-1f75a045e5ee"
            },
            "id": "53a63c13-c1b0-4b09-b94b-1f75a045e5ee",
            "name": "Before comparisons",
            "request": {
              "description": {
                "content": "A simple `GET` request to `/time/before` to check if the provided timestamps is before a comparison `target` (query parameter).\n\nThis endpoint accepts `timestamp`, `locale`, `format`, `strict`, and `target` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `before` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  before: true/false\n}\n```",
                "type": "text/plain"
              },
              "url": {
                "protocol": "https",
                "path": [
                  "time",
                  "before"
                ],
                "host": [
                  "postman-echo",
                  "com"
                ],
                "query": [
                  {
                    "key": "timestamp",
                    "value": "2016-10-10"
                  },
                  {
                    "key": "target",
                    "value": "2017-10-10"
                  }
                ],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "604d7c67-92f2-4d29-b05b-85937bf848bc",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"response json should say timestamp is before target\", function () {",
                    "    pm.response.to.have.jsonBody('before', true);",
                    "});"
                  ],
                  "_lastExecutionId": "cb93ce58-bc35-48b4-bec3-b9b6282008d3"
                }
              }
            ]
          },
          {
            "_": {
              "postman_id": "6e232133-a755-4cad-880c-3ec4104ed16e"
            },
            "id": "6e232133-a755-4cad-880c-3ec4104ed16e",
            "name": "After comparisons",
            "request": {
              "description": {
                "content": "A simple `GET` request to `/time/after` to check if the provided timestamps is after a comparison `target` (query parameter).\n\nThis endpoint accepts `timestamp`, `locale`, `format`, `strict`, and `target` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `after` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  after: true/false\n}\n```",
                "type": "text/plain"
              },
              "url": {
                "protocol": "https",
                "path": [
                  "time",
                  "after"
                ],
                "host": [
                  "postman-echo",
                  "com"
                ],
                "query": [
                  {
                    "key": "timestamp",
                    "value": "2016-10-10"
                  },
                  {
                    "key": "target",
                    "value": "2017-10-10"
                  }
                ],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "b5b899c8-aa7b-4f44-ac26-f8c432b92043",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"response json should say timestamp is not after target\", function () {",
                    "    pm.response.to.have.jsonBody('after', false);",
                    "});"
                  ],
                  "_lastExecutionId": "cdb21c26-be6b-4fd0-b5fe-5900643d7db7"
                }
              }
            ]
          },
          {
            "_": {
              "postman_id": "13726bf5-6834-4bdf-aaa5-b833a19ea039"
            },
            "id": "13726bf5-6834-4bdf-aaa5-b833a19ea039",
            "name": "Between timestamps",
            "request": {
              "description": {
                "content": "A simple `GET` request to `/time/between` to check if the provided timestamp is between a range specified by the `start` and `end` query parameters. A resolution limit can also be specified by the `unit` query parameter.\n\nFor instance, for a resolution `unit` of `month`,\n`2016-10-05` does lie between `2016-11-02` and `2016-09-01`.\n\nThis endpoint also accepts `timestamp`, `locale`, `format`, `strict`, and `target` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `between` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  between: true/false\n}\n```",
                "type": "text/plain"
              },
              "url": {
                "protocol": "https",
                "path": [
                  "time",
                  "between"
                ],
                "host": [
                  "postman-echo",
                  "com"
                ],
                "query": [
                  {
                    "key": "timestamp",
                    "value": "2016-10-10"
                  },
                  {
                    "key": "start",
                    "value": "2017-10-10"
                  },
                  {
                    "key": "end",
                    "value": "2019-10-10"
                  }
                ],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "946e2a7c-a7d7-4869-92f5-37bd42a10c7b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"response json should say timestamp is not between start and end\", function () {",
                    "    pm.response.to.have.jsonBody('between', false);",
                    "});"
                  ],
                  "_lastExecutionId": "0e742c6c-b5f9-4e54-822f-27ecc1b329f9"
                }
              }
            ]
          },
          {
            "_": {
              "postman_id": "5cd165e3-10d7-4e28-9d5a-c1ff69de80b8"
            },
            "id": "5cd165e3-10d7-4e28-9d5a-c1ff69de80b8",
            "name": "Leap year check",
            "request": {
              "description": {
                "content": "A simple `GET` request to `/time/leap` to check if the provided/current timestamp belongs to a leap year.\n\nThis endpoint also accepts `timestamp`, `locale`, `format`, `strict`, and `target` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `leap` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  leap: true/false\n}\n```",
                "type": "text/plain"
              },
              "url": {
                "protocol": "https",
                "path": [
                  "time",
                  "leap"
                ],
                "host": [
                  "postman-echo",
                  "com"
                ],
                "query": [
                  {
                    "key": "timestamp",
                    "value": "2016-10-10"
                  }
                ],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "d6cf5988-0fe6-4bef-afe6-49958848e144",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"response json should say timestamp is within leap year\", function () {",
                    "    pm.response.to.have.jsonBody('leap', true);",
                    "});"
                  ],
                  "_lastExecutionId": "6a24888e-fe68-420c-9d8c-f18b61b2953c"
                }
              }
            ]
          }
        ],
        "event": [],
        "protocolProfileBehavior": {}
      },
      {
        "_": {
          "postman_id": "6513eb24-d61a-4bd1-9d50-8583ec230f2d"
        },
        "id": "6513eb24-d61a-4bd1-9d50-8583ec230f2d",
        "name": "Utilities / Postman Collection",
        "item": [
          {
            "_": {
              "postman_id": "e299a4a4-5574-4f05-9581-2ef60f545732"
            },
            "id": "e299a4a4-5574-4f05-9581-2ef60f545732",
            "name": "Transform collection from format v1 to v2",
            "request": {
              "url": {
                "protocol": "https",
                "path": [
                  "transform",
                  "collection"
                ],
                "host": [
                  "postman-echo",
                  "com"
                ],
                "query": [
                  {
                    "key": "from",
                    "value": "1"
                  },
                  {
                    "key": "to",
                    "value": "2"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"id\": \"7875be4b-917d-4aff-8cc4-5606c36bf418\",\n  \"name\": \"Sample Postman Collection\",\n  \"description\": \"A sample collection to demonstrate collections as a set of related requests\",\n  \"order\": [\n    \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n    \"141ba274-cc50-4377-a59c-e080066f375e\"\n  ],\n  \"folders\": [],\n  \"requests\": [\n    {\n      \"id\": \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n      \"name\": \"A simple GET request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"GET\",\n      \"headers\": \"\",\n      \"data\": [],\n      \"rawModeData\": \"\",\n      \"tests\": \"tests['response code is 200'] = (responseCode.code === 200);\",\n      \"preRequestScript\": \"\",\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\"\n    },\n    {\n      \"id\": \"141ba274-cc50-4377-a59c-e080066f375e\",\n      \"name\": \"A simple POST request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"POST\",\n      \"headers\": \"Content-Type: text/plain\",\n      \"dataMode\": \"raw\",\n      \"data\": [],\n      \"rawModeData\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\",\n      \"url\": \"https://postman-echo.com/post\"\n    }\n  ]\n}"
              }
            },
            "response": [
              {
                "_": {
                  "postman_previewlanguage": "json"
                },
                "id": "79270673-03ed-4fa2-abc5-80b405f5d662",
                "name": "Sample v2 Response",
                "originalRequest": {
                  "url": {
                    "protocol": "https",
                    "path": [
                      "transform",
                      "collection"
                    ],
                    "host": [
                      "postman-echo",
                      "com"
                    ],
                    "query": [
                      {
                        "key": "from",
                        "value": "1"
                      },
                      {
                        "key": "to",
                        "value": "2"
                      }
                    ],
                    "variable": []
                  },
                  "header": [
                    {
                      "description": {
                        "content": "The mime type of this content",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"id\": \"7875be4b-917d-4aff-8cc4-5606c36bf418\",\n  \"name\": \"Sample Postman Collection\",\n  \"description\": \"A sample collection to demonstrate collections as a set of related requests\",\n  \"order\": [\n    \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n    \"141ba274-cc50-4377-a59c-e080066f375e\",\n    \"4511ca8b-0bc7-430f-b894-a7ec1036f322\"\n  ],\n  \"folders\": [],\n  \"requests\": [\n    {\n      \"id\": \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n      \"name\": \"A simple GET request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"GET\",\n      \"headers\": \"\",\n      \"data\": [],\n      \"rawModeData\": \"\",\n      \"tests\": \"tests['response code is 200'] = (responseCode.code === 200);\",\n      \"preRequestScript\": \"\",\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\"\n    },\n    {\n      \"id\": \"141ba274-cc50-4377-a59c-e080066f375e\",\n      \"name\": \"A simple POST request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"POST\",\n      \"headers\": \"Content-Type: text/plain\",\n      \"dataMode\": \"raw\",\n      \"data\": [],\n      \"rawModeData\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\",\n      \"url\": \"https://postman-echo.com/post\"\n    },\n    {\n      \"id\": \"4511ca8b-0bc7-430f-b894-a7ec1036f322\",\n      \"name\": \"A simple POST request with JSON body\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"POST\",\n      \"headers\": \"Content-Type: application/json\",\n      \"dataMode\": \"raw\",\n      \"data\": [],\n      \"rawModeData\": \"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\",\n      \"url\": \"https://postman-echo.com/post\"\n    }\n  ]\n}"
                  }
                },
                "status": "OK",
                "code": 200,
                "header": [
                  {
                    "name": "Access-Control-Allow-Credentials",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Credentials",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Headers",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Headers",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Methods",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Methods",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Origin",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Origin",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Expose-Headers",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Expose-Headers",
                    "value": ""
                  },
                  {
                    "name": "Connection",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Connection",
                    "value": "keep-alive"
                  },
                  {
                    "name": "Content-Encoding",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Encoding",
                    "value": "gzip"
                  },
                  {
                    "name": "Content-Type",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Type",
                    "value": "application/json; charset=utf-8"
                  },
                  {
                    "name": "Date",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Date",
                    "value": "Wed, 11 Jan 2017 10:41:32 GMT"
                  },
                  {
                    "name": "ETag",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "ETag",
                    "value": "W/\"4cc-7P727Clhlrl9+b1/vneniw\""
                  },
                  {
                    "name": "Server",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Server",
                    "value": "nginx/1.10.1"
                  },
                  {
                    "name": "Vary",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Vary",
                    "value": "X-HTTP-Method-Override, Accept-Encoding"
                  },
                  {
                    "name": "set-cookie",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "set-cookie",
                    "value": "sails.sid=s%3AHtnQ1hlPxoj7wZahoNkcjN-aw9nQL0fc.KSyfLbEKhv1Lt3LvH13Ogjv9ENZgsBBSM6V8Y7TqVOU; Path=/; HttpOnly"
                  },
                  {
                    "name": "transfer-encoding",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "transfer-encoding",
                    "value": "chunked"
                  }
                ],
                "body": "{\"variables\":[],\"info\":{\"name\":\"Sample Postman Collection\",\"_postman_id\":\"7875be4b-917d-4aff-8cc4-5606c36bf418\",\"description\":\"A sample collection to demonstrate collections as a set of related requests\",\"schema\":\"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\"},\"item\":[{\"name\":\"A simple GET request\",\"event\":[{\"listen\":\"test\",\"script\":{\"type\":\"text/javascript\",\"exec\":[\"tests['response code is 200'] = (responseCode.code === 200);\"]}}],\"request\":{\"url\":\"https://postman-echo.com/get?source=newman-sample-github-collection\",\"method\":\"GET\",\"header\":[],\"body\":{\"mode\":\"raw\",\"raw\":\"\"}},\"response\":[]},{\"name\":\"A simple POST request\",\"request\":{\"url\":\"https://postman-echo.com/post\",\"method\":\"POST\",\"header\":[{\"key\":\"Content-Type\",\"value\":\"text/plain\",\"description\":\"\"}],\"body\":{\"mode\":\"raw\",\"raw\":\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\"}},\"response\":[]},{\"name\":\"A simple POST request with JSON body\",\"request\":{\"url\":\"https://postman-echo.com/post\",\"method\":\"POST\",\"header\":[{\"key\":\"Content-Type\",\"value\":\"application/json\",\"description\":\"\"}],\"body\":{\"mode\":\"raw\",\"raw\":\"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\"}},\"response\":[]}]}",
                "cookie": [
                  {
                    "name": "sails.sid",
                    "expires": null,
                    "domain": "postman-echo.com",
                    "path": "/",
                    "secure": false,
                    "httpOnly": true,
                    "value": "s%3AHtnQ1hlPxoj7wZahoNkcjN-aw9nQL0fc.KSyfLbEKhv1Lt3LvH13Ogjv9ENZgsBBSM6V8Y7TqVOU"
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "e74cf076-42a5-48a1-b283-822ab6a76189",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"response has almost valid items\", function () {",
                    "    pm.response.to.have.jsonBody('info.schema', 'https://schema.getpostman.com/json/collection/v2.0.0/collection.json')",
                    "        .and.to.have.jsonBody('item[0].name', 'A simple GET request')",
                    "        .and.to.have.jsonBody('item[1].name', 'A simple POST request');",
                    "});"
                  ],
                  "_lastExecutionId": "133ae8d6-0dce-44be-aa69-7f5bdfde9fc2"
                }
              }
            ]
          },
          {
            "_": {
              "postman_id": "4657083a-08fe-4d58-850e-cd4a2cf7baee"
            },
            "id": "4657083a-08fe-4d58-850e-cd4a2cf7baee",
            "name": "Transform collection from format v2 to v1",
            "request": {
              "url": {
                "protocol": "https",
                "path": [
                  "transform",
                  "collection"
                ],
                "host": [
                  "postman-echo",
                  "com"
                ],
                "query": [
                  {
                    "key": "from",
                    "value": "2"
                  },
                  {
                    "key": "to",
                    "value": "1"
                  }
                ],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"info\": {\n    \"name\": \"Sample Postman Collection\",\n    \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\",\n    \"description\": \"A sample collection to demonstrate collections as a set of related requests\"\n  },\n\n  \"item\": [{\n    \"name\": \"A simple GET request\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\",\n      \"method\": \"GET\"\n    }\n  }, {\n    \"name\": \"A simple POST request\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/post\",\n      \"method\": \"POST\",\n      \"header\": [{\n        \"key\": \"Content-Type\",\n        \"value\": \"text/plain\"\n      }],\n      \"body\": {\n        \"mode\": \"raw\",\n        \"raw\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\"\n      }\n    }\n  }]\n}"
              }
            },
            "response": [
              {
                "_": {
                  "postman_previewlanguage": "json"
                },
                "id": "aea638eb-dcbf-42dd-9f42-bb62f4267a77",
                "name": "Sample v1 Response",
                "originalRequest": {
                  "url": {
                    "protocol": "https",
                    "path": [
                      "transform",
                      "collection"
                    ],
                    "host": [
                      "postman-echo",
                      "com"
                    ],
                    "query": [
                      {
                        "key": "from",
                        "value": "2"
                      },
                      {
                        "key": "to",
                        "value": "1"
                      }
                    ],
                    "variable": []
                  },
                  "header": [
                    {
                      "description": {
                        "content": "The mime type of this content",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n  \"info\": {\n    \"name\": \"Sample Postman Collection\",\n    \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\",\n    \"description\": \"A sample collection to demonstrate collections as a set of related requests\"\n  },\n\n  \"item\": [{\n    \"name\": \"A simple GET request\",\n    \"event\": [{\n      \"listen\": \"test\",\n      \"script\": {\n        \"type\": \"text/javascript\",\n        \"exec\": [\"tests['response code is 200'] = (responseCode.code === 200);\"]\n      }\n    }],\n    \"request\": {\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\",\n      \"method\": \"GET\"\n    }\n  }, {\n    \"name\": \"A simple POST request\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/post\",\n      \"method\": \"POST\",\n      \"header\": [{\n        \"key\": \"Content-Type\",\n        \"value\": \"text/plain\"\n      }],\n      \"body\": {\n        \"mode\": \"raw\",\n        \"raw\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\"\n      }\n    }\n  }, {\n    \"name\": \"A simple POST request with JSON body\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/post\",\n      \"method\": \"POST\",\n      \"header\": [{\n        \"key\": \"Content-Type\",\n        \"value\": \"application/json\"\n      }],\n      \"body\": {\n        \"mode\": \"raw\",\n        \"raw\": \"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\"\n      }\n    }\n  }]\n}"
                  }
                },
                "status": "OK",
                "code": 200,
                "header": [
                  {
                    "name": "Access-Control-Allow-Credentials",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Credentials",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Headers",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Headers",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Methods",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Methods",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Allow-Origin",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Allow-Origin",
                    "value": ""
                  },
                  {
                    "name": "Access-Control-Expose-Headers",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Access-Control-Expose-Headers",
                    "value": ""
                  },
                  {
                    "name": "Connection",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Connection",
                    "value": "keep-alive"
                  },
                  {
                    "name": "Content-Encoding",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Encoding",
                    "value": "gzip"
                  },
                  {
                    "name": "Content-Type",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Content-Type",
                    "value": "application/json; charset=utf-8"
                  },
                  {
                    "name": "Date",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Date",
                    "value": "Wed, 11 Jan 2017 10:38:42 GMT"
                  },
                  {
                    "name": "ETag",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "ETag",
                    "value": "W/\"569-P9uLZEIyoPfMmQ+U0mTO1A\""
                  },
                  {
                    "name": "Server",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Server",
                    "value": "nginx/1.10.1"
                  },
                  {
                    "name": "Vary",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "Vary",
                    "value": "X-HTTP-Method-Override, Accept-Encoding"
                  },
                  {
                    "name": "set-cookie",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "set-cookie",
                    "value": "sails.sid=s%3A55y5Ll7HpTzt_hKuw6N54k4N04ilmMdn.uCPCHttP5DmI%2BdBw2I9NZL55lFFOzz4XxS4qAHv47gI; Path=/; HttpOnly"
                  },
                  {
                    "name": "transfer-encoding",
                    "description": {
                      "content": "",
                      "type": "text/plain"
                    },
                    "key": "transfer-encoding",
                    "value": "chunked"
                  }
                ],
                "body": "{\"id\":\"0c42230c-c8e4-4ca0-a4aa-d393971de8b8\",\"name\":\"Sample Postman Collection\",\"description\":\"A sample collection to demonstrate collections as a set of related requests\",\"order\":[\"3d04ed83-dc1e-40ec-923c-16aa92509e50\",\"e02f8160-fb41-4633-be80-cc7d701e85b4\",\"77bd6d4d-1060-4927-aa5c-dcdba7f750cf\"],\"folders\":[],\"requests\":[{\"id\":\"3d04ed83-dc1e-40ec-923c-16aa92509e50\",\"name\":\"A simple GET request\",\"collectionId\":\"1dd68aff-a3fa-4f52-904f-5b75053bc9d9\",\"method\":\"GET\",\"headers\":\"\",\"data\":[],\"rawModeData\":\"\",\"tests\":\"tests['response code is 200'] = (responseCode.code === 200);\",\"preRequestScript\":\"\",\"url\":\"https://postman-echo.com/get?source=newman-sample-github-collection\"},{\"id\":\"e02f8160-fb41-4633-be80-cc7d701e85b4\",\"name\":\"A simple POST request\",\"collectionId\":\"1dd68aff-a3fa-4f52-904f-5b75053bc9d9\",\"method\":\"POST\",\"headers\":\"Content-Type: text/plain\",\"dataMode\":\"raw\",\"data\":[],\"rawModeData\":\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\",\"url\":\"https://postman-echo.com/post\"},{\"id\":\"77bd6d4d-1060-4927-aa5c-dcdba7f750cf\",\"name\":\"A simple POST request with JSON body\",\"collectionId\":\"1dd68aff-a3fa-4f52-904f-5b75053bc9d9\",\"method\":\"POST\",\"headers\":\"Content-Type: application/json\",\"dataMode\":\"raw\",\"data\":[],\"rawModeData\":\"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\",\"url\":\"https://postman-echo.com/post\"}]}",
                "cookie": [
                  {
                    "name": "sails.sid",
                    "expires": null,
                    "domain": "postman-echo.com",
                    "path": "/",
                    "secure": false,
                    "httpOnly": true,
                    "value": "s%3A55y5Ll7HpTzt_hKuw6N54k4N04ilmMdn.uCPCHttP5DmI%2BdBw2I9NZL55lFFOzz4XxS4qAHv47gI"
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "7189cb58-d2bc-4430-91ed-4bf807ad54d6",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"response is ok\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"response has almost valid items\", function () {",
                    "    pm.response.to.have.jsonBody('folders', [])",
                    "        .and.to.have.jsonBody('order')",
                    "        .and.to.have.jsonBody('requests[0].name', 'A simple GET request')",
                    "        .and.to.have.jsonBody('requests[1].name', 'A simple POST request');",
                    "});"
                  ],
                  "_lastExecutionId": "8aa41d4a-fc9e-4df3-a94a-1c7d64de650c"
                }
              }
            ]
          }
        ],
        "event": [],
        "protocolProfileBehavior": {}
      },
      {
        "_": {
          "postman_id": "fde203bd-0310-49e9-a8a4-1515891df3a7"
        },
        "id": "fde203bd-0310-49e9-a8a4-1515891df3a7",
        "name": "Auth: Digest",
        "description": {
          "content": "Digest authentication protects an endpoint with a username and password without actually transmitting the password over network.\nOne has to apply a hash function (like MD5, etc) to the username and password before sending them over the network.\n\n> Username: `postman`\n>\n> Password: `password`\n\nUnlike Basic-Auth, authentication happens using two consecutive requests where the first request returns `401 Unauthorised` along with `WWW-Authenticate` header containing information that needs to be used to authenticate subsequent calls.\n\nTo know more about digest authentication, refer to the [Digest Access Authentication](https://en.wikipedia.org/wiki/Digest_access_authentication) wikipedia article.\nThe article on [authentication helpers](https://www.getpostman.com/docs/helpers#digest-auth) elaborates how to use the same within the Postman app.",
          "type": "text/plain"
        },
        "item": [
          {
            "_": {
              "postman_id": "dd5e65ed-b444-48ed-952d-2c584324d01c"
            },
            "id": "dd5e65ed-b444-48ed-952d-2c584324d01c",
            "name": "DigestAuth Request",
            "request": {
              "description": {
                "content": "Performing a simple `GET` request to this endpoint returns status code `401 Unauthorized` with `WWW-Authenticate` header containing information to successfully authenticate subsequent requests.\nThe `WWW-Authenticate` header must be processed to extract `realm` and `nonce` values to hash subsequent requests.\n\nWhen this request is executed within Postman, the script attached with this request does the hard work of extracting realm and nonce from the header and set it as [global variables](https://www.getpostman.com/docs/environments#global-variables?source=echo-collection-app-onboarding) named `echo_digest_nonce` and `echo_digest_realm`.\nThese variables are re-used in subsequent request for seamless integration of the two requests.",
                "type": "text/plain"
              },
              "url": {
                "protocol": "https",
                "path": [
                  "digest-auth"
                ],
                "host": [
                  "postman-echo",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "b33bf1dc-b4e6-4047-87a7-d09d3a5ec078",
                  "type": "text/javascript",
                  "exec": [
                    "tests[\"response code is 401\"] = responseCode.code === 401;",
                    "tests[\"response has WWW-Authenticate header\"] = (postman.getResponseHeader('WWW-Authenticate'));",
                    "",
                    "var authenticateHeader = postman.getResponseHeader('WWW-Authenticate'),",
                    "    realmStart = authenticateHeader.indexOf('\"',authenticateHeader.indexOf(\"realm\")) + 1 ,",
                    "    realmEnd = authenticateHeader.indexOf('\"',realmStart),",
                    "    realm = authenticateHeader.slice(realmStart,realmEnd),",
                    "    nonceStart = authenticateHeader.indexOf('\"',authenticateHeader.indexOf(\"nonce\")) + 1,",
                    "    nonceEnd = authenticateHeader.indexOf('\"',nonceStart),",
                    "    nonce = authenticateHeader.slice(nonceStart,nonceEnd);",
                    "    ",
                    "postman.setGlobalVariable('echo_digest_realm', realm);",
                    "postman.setGlobalVariable('echo_digest_nonce', nonce);"
                  ],
                  "_lastExecutionId": "78a55cd9-31d2-4d25-888d-3b11e413cee6"
                }
              }
            ]
          }
        ],
        "event": [],
        "protocolProfileBehavior": {}
      }
    ],
    "event": [],
    "protocolProfileBehavior": {},
    "variable": [],
    "info": {
      "_postman_id": "66e51adf-3e73-49a9-a278-1ec85b5cead0",
      "name": "Postman Echo",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "description": {
        "content": "Postman Echo is service you can use to test your REST clients and make sample API calls. It provides endpoints for `GET`, `POST`, `PUT`, various auth mechanisms and other utility endpoints.\n\nThe documentation for the endpoints as well as example responses can be found at [https://postman-echo.com](https://postman-echo.com/?source=echo-collection-app-onboarding)",
        "type": "text/plain"
      }
    }
  },
  "environment": {
    "id": "37804f29-ef7d-494a-9f37-b7bd6b4130b5",
    "values": []
  },
  "globals": {
    "id": "14c91883-263f-405c-a763-c9eeea6334f1",
    "values": [
      {
        "type": "any",
        "value": "Users",
        "key": "echo_digest_realm"
      },
      {
        "type": "any",
        "value": "41JrDmUKoiXDEJWLX7G3WwhmceVZRNuk",
        "key": "echo_digest_nonce"
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 37,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 37,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 37,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 37,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 37,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 90,
        "pending": 0,
        "failed": 7
      },
      "testScripts": {
        "total": 37,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 0,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 211.2972972972973,
      "responseMin": 118,
      "responseMax": 2125,
      "responseSd": 336.7931328234287,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1591967742319,
      "completed": 1591967750956
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 37,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "1e9de19a-7c48-41a3-82f9-5bd8e39b3019",
          "httpRequestId": "30095a39-73ec-49e7-8af1-bbf4332eb940"
        },
        "item": {
          "_": {
            "postman_id": "6f04fb0f-dc39-4ea1-a6fc-3e26aed60bf2"
          },
          "id": "6f04fb0f-dc39-4ea1-a6fc-3e26aed60bf2",
          "name": "GET Request",
          "request": {
            "description": {
              "content": "The HTTP `GET` request method is meant to retrieve data from a server. The data\nis identified by a unique URI (Uniform Resource Identifier). \n\nA `GET` request can pass parameters to the server using \"Query String \nParameters\". For example, in the following request,\n\n> http://example.com/hi/there?hand=wave\n\nThe parameter \"hand\" has the value \"wave\".\n\nThis endpoint echoes the HTTP headers, request parameters and the complete\nURI requested.",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "get"
              ],
              "host": [
                "postman-echo",
                "com"
              ],
              "query": [
                {
                  "key": "foo1",
                  "value": "bar1"
                },
                {
                  "key": "foo2",
                  "value": "bar2"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "3cc6d75f-bfc7-499f-99a5-1308803c198b",
              "name": "GET Request Woops",
              "originalRequest": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "get"
                  ],
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "query": [
                    {
                      "key": "foo1",
                      "value": "bar1"
                    },
                    {
                      "key": "foo2",
                      "value": "bar2"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Encoding",
                  "value": "gzip"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "key": "Date",
                  "value": "Tue, 11 Jun 2019 10:43:13 GMT"
                },
                {
                  "key": "ETag",
                  "value": "W/\"161-aLhNcsGArlgLSKbxPqfBW3viHPI\""
                },
                {
                  "key": "Server",
                  "value": "nginx"
                },
                {
                  "key": "set-cookie",
                  "value": "sails.sid=s%3AGz-wblZgXE8FCDq7aJpx_tUgZUcG3Nsw.LdNEN8L0C7nGWkvGLwvdw6R2s6Syjr%2FzkvyevA8qR0c; Path=/; HttpOnly"
                },
                {
                  "key": "Vary",
                  "value": "Accept-Encoding"
                },
                {
                  "key": "Content-Length",
                  "value": "249"
                },
                {
                  "key": "Connection",
                  "value": "keep-alive"
                }
              ],
              "body": "{\n    \"args\": {\n        \"foo1\": \"bar1\",\n        \"foo2\": \"bar2\"\n    },\n    \"headers\": {\n        \"x-forwarded-proto\": \"https\",\n        \"host\": \"postman-echo.com\",\n        \"accept\": \"*/*\",\n        \"accept-encoding\": \"gzip, deflate\",\n        \"cache-control\": \"no-cache\",\n        \"postman-token\": \"5c27cd7d-6b16-4e5a-a0ef-191c9a3a275f\",\n        \"user-agent\": \"PostmanRuntime/7.6.1\",\n        \"x-forwarded-port\": \"443\"\n    },\n    \"url\": \"https://postman-echo.com/get?foo1=bar1&foo2=bar2\"\n}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7e9863ce-6ce4-45d5-88f2-6227f01e9661",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response body has json with request queries\", function () {",
                  "    pm.response.to.have.jsonBody('args.foo1', 'bar1')",
                  "        .and.have.jsonBody('args.foo2', 'bar2');",
                  "});"
                ],
                "_lastExecutionId": "976a61c4-baf8-451f-92ba-774e49c38d62"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "The HTTP `GET` request method is meant to retrieve data from a server. The data\nis identified by a unique URI (Uniform Resource Identifier). \n\nA `GET` request can pass parameters to the server using \"Query String \nParameters\". For example, in the following request,\n\n> http://example.com/hi/there?hand=wave\n\nThe parameter \"hand\" has the value \"wave\".\n\nThis endpoint echoes the HTTP headers, request parameters and the complete\nURI requested.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "get"
            ],
            "host": [
              "postman-echo",
              "com"
            ],
            "query": [
              {
                "key": "foo1",
                "value": "bar1"
              },
              {
                "key": "foo2",
                "value": "bar2"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.26.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "66af9fc5-ffd9-4eaf-82a2-303543d5370c",
              "system": true
            },
            {
              "key": "Host",
              "value": "postman-echo.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "86544ef6-17d6-4af6-83c3-cd2763b0ceb0",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Fri, 12 Jun 2020 13:15:42 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "419"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "ETag",
              "value": "W/\"1a3-z62uLKFfRRyLCmCncS2ckvnuMLo\""
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3AO9tfK9s6SxDZ4mmS0d6RQR53CliNiJNQ.E%2FPZRWfpHeCB8t833myJgbeWahlfxP%2B5ampmJxgQ1nI; Path=/; HttpOnly"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              97,
              114,
              103,
              115,
              34,
              58,
              123,
              34,
              102,
              111,
              111,
              49,
              34,
              58,
              34,
              98,
              97,
              114,
              49,
              34,
              44,
              34,
              102,
              111,
              111,
              50,
              34,
              58,
              34,
              98,
              97,
              114,
              50,
              34,
              125,
              44,
              34,
              104,
              101,
              97,
              100,
              101,
              114,
              115,
              34,
              58,
              123,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              114,
              111,
              116,
              111,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              34,
              44,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              111,
              114,
              116,
              34,
              58,
              34,
              52,
              52,
              51,
              34,
              44,
              34,
              104,
              111,
              115,
              116,
              34,
              58,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              120,
              45,
              97,
              109,
              122,
              110,
              45,
              116,
              114,
              97,
              99,
              101,
              45,
              105,
              100,
              34,
              58,
              34,
              82,
              111,
              111,
              116,
              61,
              49,
              45,
              53,
              101,
              101,
              51,
              55,
              102,
              102,
              101,
              45,
              53,
              55,
              97,
              54,
              99,
              97,
              48,
              51,
              99,
              101,
              55,
              50,
              100,
              57,
              101,
              52,
              98,
              48,
              50,
              54,
              102,
              56,
              53,
              99,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              45,
              97,
              103,
              101,
              110,
              116,
              34,
              58,
              34,
              80,
              111,
              115,
              116,
              109,
              97,
              110,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              47,
              55,
              46,
              50,
              54,
              46,
              48,
              34,
              44,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              34,
              58,
              34,
              42,
              47,
              42,
              34,
              44,
              34,
              99,
              97,
              99,
              104,
              101,
              45,
              99,
              111,
              110,
              116,
              114,
              111,
              108,
              34,
              58,
              34,
              110,
              111,
              45,
              99,
              97,
              99,
              104,
              101,
              34,
              44,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              54,
              54,
              97,
              102,
              57,
              102,
              99,
              53,
              45,
              102,
              102,
              100,
              57,
              45,
              52,
              101,
              97,
              102,
              45,
              56,
              50,
              97,
              50,
              45,
              51,
              48,
              51,
              53,
              52,
              51,
              100,
              53,
              51,
              55,
              48,
              99,
              34,
              44,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              45,
              101,
              110,
              99,
              111,
              100,
              105,
              110,
              103,
              34,
              58,
              34,
              103,
              122,
              105,
              112,
              44,
              32,
              100,
              101,
              102,
              108,
              97,
              116,
              101,
              44,
              32,
              98,
              114,
              34,
              125,
              44,
              34,
              117,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              47,
              103,
              101,
              116,
              63,
              102,
              111,
              111,
              49,
              61,
              98,
              97,
              114,
              49,
              38,
              102,
              111,
              111,
              50,
              61,
              98,
              97,
              114,
              50,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 572,
          "responseSize": 419
        },
        "id": "6f04fb0f-dc39-4ea1-a6fc-3e26aed60bf2",
        "assertions": [
          {
            "assertion": "response is ok",
            "skipped": false
          },
          {
            "assertion": "response body has json with request queries",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "5251020f-98a1-4c9f-8dc7-f0dc9ad58dfa",
          "length": 37,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "b8bb08fe-5780-4014-8a0a-69275f8ee5ff"
        },
        "item": {
          "_": {
            "postman_id": "4235270b-9a17-4885-94e3-effe76708375"
          },
          "id": "4235270b-9a17-4885-94e3-effe76708375",
          "name": "POST Raw Text",
          "request": {
            "description": {
              "content": "The HTTP `POST` request method is meant to transfer data to a server \n(and elicit a response). What data is returned depends on the implementation\nof the server.\n\nA `POST` request can pass parameters to the server using \"Query String \nParameters\", as well as the Request Body. For example, in the following request,\n\n> POST /hi/there?hand=wave\n>\n> <request-body>\n\nThe parameter \"hand\" has the value \"wave\". The request body can be in multiple\nformats. These formats are defined by the MIME type of the request. The MIME \nType can be set using the ``Content-Type`` HTTP header. The most commonly used \nMIME types are:\n\n* `multipart/form-data`\n* `application/x-www-form-urlencoded`\n* `application/json`\n\nThis endpoint echoes the HTTP headers, request parameters, the contents of\nthe request body and the complete URI requested.",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "post"
              ],
              "host": [
                "postman-echo",
                "com"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "This is expected to be sent back as part of response body."
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7350c107-2e09-4b12-83ce-9a7590febd7f",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response body has json with request body\", function () {",
                  "    pm.response.to.have.jsonBody('data', ",
                  "        'This is expected to be sent back as part of response body.');",
                  "});"
                ],
                "_lastExecutionId": "b96be690-9b7b-4d09-b23c-f024660452b3"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "The HTTP `POST` request method is meant to transfer data to a server \n(and elicit a response). What data is returned depends on the implementation\nof the server.\n\nA `POST` request can pass parameters to the server using \"Query String \nParameters\", as well as the Request Body. For example, in the following request,\n\n> POST /hi/there?hand=wave\n>\n> <request-body>\n\nThe parameter \"hand\" has the value \"wave\". The request body can be in multiple\nformats. These formats are defined by the MIME type of the request. The MIME \nType can be set using the ``Content-Type`` HTTP header. The most commonly used \nMIME types are:\n\n* `multipart/form-data`\n* `application/x-www-form-urlencoded`\n* `application/json`\n\nThis endpoint echoes the HTTP headers, request parameters, the contents of\nthe request body and the complete URI requested.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "post"
            ],
            "host": [
              "postman-echo",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.26.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "05117cdb-c29b-4703-9c76-0ebdb790d5d4",
              "system": true
            },
            {
              "key": "Host",
              "value": "postman-echo.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": 58,
              "system": true
            },
            {
              "key": "Cookie",
              "value": "sails.sid=s%3AO9tfK9s6SxDZ4mmS0d6RQR53CliNiJNQ.E%2FPZRWfpHeCB8t833myJgbeWahlfxP%2B5ampmJxgQ1nI",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "This is expected to be sent back as part of response body."
          }
        },
        "response": {
          "id": "a030c060-8235-473f-902d-88c9c9df0c46",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Fri, 12 Jun 2020 13:15:42 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "630"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "ETag",
              "value": "W/\"276-PUK9ffRMJGBiWJyfCmoBo3vkNwc\""
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3AIdocKHd-Y7iMIPEdRJ4AyU8UfskFCHnb.upVabDnapKvzmj6mHCfhnIC2JZJUpfoQUo3CavVzXUo; Path=/; HttpOnly"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              97,
              114,
              103,
              115,
              34,
              58,
              123,
              125,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              101,
              120,
              112,
              101,
              99,
              116,
              101,
              100,
              32,
              116,
              111,
              32,
              98,
              101,
              32,
              115,
              101,
              110,
              116,
              32,
              98,
              97,
              99,
              107,
              32,
              97,
              115,
              32,
              112,
              97,
              114,
              116,
              32,
              111,
              102,
              32,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              32,
              98,
              111,
              100,
              121,
              46,
              34,
              44,
              34,
              102,
              105,
              108,
              101,
              115,
              34,
              58,
              123,
              125,
              44,
              34,
              102,
              111,
              114,
              109,
              34,
              58,
              123,
              125,
              44,
              34,
              104,
              101,
              97,
              100,
              101,
              114,
              115,
              34,
              58,
              123,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              114,
              111,
              116,
              111,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              34,
              44,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              111,
              114,
              116,
              34,
              58,
              34,
              52,
              52,
              51,
              34,
              44,
              34,
              104,
              111,
              115,
              116,
              34,
              58,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              120,
              45,
              97,
              109,
              122,
              110,
              45,
              116,
              114,
              97,
              99,
              101,
              45,
              105,
              100,
              34,
              58,
              34,
              82,
              111,
              111,
              116,
              61,
              49,
              45,
              53,
              101,
              101,
              51,
              55,
              102,
              102,
              101,
              45,
              56,
              102,
              54,
              52,
              48,
              48,
              55,
              49,
              98,
              102,
              98,
              50,
              55,
              52,
              97,
              55,
              100,
              52,
              102,
              101,
              52,
              48,
              53,
              49,
              34,
              44,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              58,
              34,
              53,
              56,
              34,
              44,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              45,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              116,
              101,
              120,
              116,
              47,
              112,
              108,
              97,
              105,
              110,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              45,
              97,
              103,
              101,
              110,
              116,
              34,
              58,
              34,
              80,
              111,
              115,
              116,
              109,
              97,
              110,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              47,
              55,
              46,
              50,
              54,
              46,
              48,
              34,
              44,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              34,
              58,
              34,
              42,
              47,
              42,
              34,
              44,
              34,
              99,
              97,
              99,
              104,
              101,
              45,
              99,
              111,
              110,
              116,
              114,
              111,
              108,
              34,
              58,
              34,
              110,
              111,
              45,
              99,
              97,
              99,
              104,
              101,
              34,
              44,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              48,
              53,
              49,
              49,
              55,
              99,
              100,
              98,
              45,
              99,
              50,
              57,
              98,
              45,
              52,
              55,
              48,
              51,
              45,
              57,
              99,
              55,
              54,
              45,
              48,
              101,
              98,
              100,
              98,
              55,
              57,
              48,
              100,
              53,
              100,
              52,
              34,
              44,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              45,
              101,
              110,
              99,
              111,
              100,
              105,
              110,
              103,
              34,
              58,
              34,
              103,
              122,
              105,
              112,
              44,
              32,
              100,
              101,
              102,
              108,
              97,
              116,
              101,
              44,
              32,
              98,
              114,
              34,
              44,
              34,
              99,
              111,
              111,
              107,
              105,
              101,
              34,
              58,
              34,
              115,
              97,
              105,
              108,
              115,
              46,
              115,
              105,
              100,
              61,
              115,
              37,
              51,
              65,
              79,
              57,
              116,
              102,
              75,
              57,
              115,
              54,
              83,
              120,
              68,
              90,
              52,
              109,
              109,
              83,
              48,
              100,
              54,
              82,
              81,
              82,
              53,
              51,
              67,
              108,
              105,
              78,
              105,
              74,
              78,
              81,
              46,
              69,
              37,
              50,
              70,
              80,
              90,
              82,
              87,
              102,
              112,
              72,
              101,
              67,
              66,
              56,
              116,
              56,
              51,
              51,
              109,
              121,
              74,
              103,
              98,
              101,
              87,
              97,
              104,
              108,
              102,
              120,
              80,
              37,
              50,
              66,
              53,
              97,
              109,
              112,
              109,
              74,
              120,
              103,
              81,
              49,
              110,
              73,
              34,
              125,
              44,
              34,
              106,
              115,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              117,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              47,
              112,
              111,
              115,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 123,
          "responseSize": 630
        },
        "id": "4235270b-9a17-4885-94e3-effe76708375",
        "assertions": [
          {
            "assertion": "response is ok",
            "skipped": false
          },
          {
            "assertion": "response body has json with request body",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "931b25dc-d69a-4a0c-bd8f-9f439dd755ad",
          "length": 37,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "6b093f0d-718b-4da7-894e-a968824fb0df"
        },
        "item": {
          "_": {
            "postman_id": "c3940b37-6cc0-446b-91d5-c09c2a1be9b8"
          },
          "id": "c3940b37-6cc0-446b-91d5-c09c2a1be9b8",
          "name": "POST Form Data",
          "request": {
            "description": {
              "content": "The HTTP `POST` request method is meant to transfer data to a server \n(and elicit a response). What data is returned depends on the implementation\nof the server.\n\nA `POST` request can pass parameters to the server using \"Query String \nParameters\", as well as the Request Body. For example, in the following request,\n\n> POST /hi/there?hand=wave\n>\n> <request-body>\n\nThe parameter \"hand\" has the value \"wave\". The request body can be in multiple\nformats. These formats are defined by the MIME type of the request. The MIME \nType can be set using the ``Content-Type`` HTTP header. The most commonly used \nMIME types are:\n\n* `multipart/form-data`\n* `application/x-www-form-urlencoded`\n* `application/json`\n\nThis endpoint echoes the HTTP headers, request parameters, the contents of\nthe request body and the complete URI requested when data is sent as a form parameter.",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "post"
              ],
              "host": [
                "postman-echo",
                "com"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "foo1",
                  "value": "bar1"
                },
                {
                  "key": "foo2",
                  "value": "bar2"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "132f0d04-006c-4869-82b4-19b63ebd9dc4",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response body has json with form data\", function () {",
                  "    pm.response.to.have.jsonBody('form.foo1', 'bar1')",
                  "        .and.have.jsonBody('form.foo2', 'bar2');",
                  "});"
                ],
                "_lastExecutionId": "e65135f4-d5cf-4e0d-a2b6-01c9438af5fe"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "The HTTP `POST` request method is meant to transfer data to a server \n(and elicit a response). What data is returned depends on the implementation\nof the server.\n\nA `POST` request can pass parameters to the server using \"Query String \nParameters\", as well as the Request Body. For example, in the following request,\n\n> POST /hi/there?hand=wave\n>\n> <request-body>\n\nThe parameter \"hand\" has the value \"wave\". The request body can be in multiple\nformats. These formats are defined by the MIME type of the request. The MIME \nType can be set using the ``Content-Type`` HTTP header. The most commonly used \nMIME types are:\n\n* `multipart/form-data`\n* `application/x-www-form-urlencoded`\n* `application/json`\n\nThis endpoint echoes the HTTP headers, request parameters, the contents of\nthe request body and the complete URI requested when data is sent as a form parameter.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "post"
            ],
            "host": [
              "postman-echo",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.26.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9294e5bd-9392-4d01-8946-b893a5dc0e1e",
              "system": true
            },
            {
              "key": "Host",
              "value": "postman-echo.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Type",
              "value": "application/x-www-form-urlencoded",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": 19,
              "system": true
            },
            {
              "key": "Cookie",
              "value": "sails.sid=s%3AIdocKHd-Y7iMIPEdRJ4AyU8UfskFCHnb.upVabDnapKvzmj6mHCfhnIC2JZJUpfoQUo3CavVzXUo",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "urlencoded",
            "urlencoded": [
              {
                "key": "foo1",
                "value": "bar1"
              },
              {
                "key": "foo2",
                "value": "bar2"
              }
            ]
          }
        },
        "response": {
          "id": "a0205f57-88c7-4dc8-b170-b760c090ffea",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Fri, 12 Jun 2020 13:15:43 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "643"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "ETag",
              "value": "W/\"283-cA1K7oMb97nQK+QamU1aHdxoz4A\""
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3A0MdPrwuTH3A4ISyiy4_akX05_NrEZbWb.6i86nt2VkzZj0fVMW8j%2F7dy50mTlF2GnQN1g74rrptw; Path=/; HttpOnly"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              97,
              114,
              103,
              115,
              34,
              58,
              123,
              125,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              34,
              34,
              44,
              34,
              102,
              105,
              108,
              101,
              115,
              34,
              58,
              123,
              125,
              44,
              34,
              102,
              111,
              114,
              109,
              34,
              58,
              123,
              34,
              102,
              111,
              111,
              49,
              34,
              58,
              34,
              98,
              97,
              114,
              49,
              34,
              44,
              34,
              102,
              111,
              111,
              50,
              34,
              58,
              34,
              98,
              97,
              114,
              50,
              34,
              125,
              44,
              34,
              104,
              101,
              97,
              100,
              101,
              114,
              115,
              34,
              58,
              123,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              114,
              111,
              116,
              111,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              34,
              44,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              111,
              114,
              116,
              34,
              58,
              34,
              52,
              52,
              51,
              34,
              44,
              34,
              104,
              111,
              115,
              116,
              34,
              58,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              120,
              45,
              97,
              109,
              122,
              110,
              45,
              116,
              114,
              97,
              99,
              101,
              45,
              105,
              100,
              34,
              58,
              34,
              82,
              111,
              111,
              116,
              61,
              49,
              45,
              53,
              101,
              101,
              51,
              55,
              102,
              102,
              102,
              45,
              49,
              99,
              50,
              100,
              102,
              100,
              54,
              52,
              51,
              99,
              99,
              56,
              57,
              48,
              97,
              52,
              102,
              55,
              101,
              52,
              55,
              49,
              53,
              57,
              34,
              44,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              58,
              34,
              49,
              57,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              45,
              97,
              103,
              101,
              110,
              116,
              34,
              58,
              34,
              80,
              111,
              115,
              116,
              109,
              97,
              110,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              47,
              55,
              46,
              50,
              54,
              46,
              48,
              34,
              44,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              34,
              58,
              34,
              42,
              47,
              42,
              34,
              44,
              34,
              99,
              97,
              99,
              104,
              101,
              45,
              99,
              111,
              110,
              116,
              114,
              111,
              108,
              34,
              58,
              34,
              110,
              111,
              45,
              99,
              97,
              99,
              104,
              101,
              34,
              44,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              57,
              50,
              57,
              52,
              101,
              53,
              98,
              100,
              45,
              57,
              51,
              57,
              50,
              45,
              52,
              100,
              48,
              49,
              45,
              56,
              57,
              52,
              54,
              45,
              98,
              56,
              57,
              51,
              97,
              53,
              100,
              99,
              48,
              101,
              49,
              101,
              34,
              44,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              45,
              101,
              110,
              99,
              111,
              100,
              105,
              110,
              103,
              34,
              58,
              34,
              103,
              122,
              105,
              112,
              44,
              32,
              100,
              101,
              102,
              108,
              97,
              116,
              101,
              44,
              32,
              98,
              114,
              34,
              44,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              45,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              97,
              112,
              112,
              108,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              47,
              120,
              45,
              119,
              119,
              119,
              45,
              102,
              111,
              114,
              109,
              45,
              117,
              114,
              108,
              101,
              110,
              99,
              111,
              100,
              101,
              100,
              34,
              44,
              34,
              99,
              111,
              111,
              107,
              105,
              101,
              34,
              58,
              34,
              115,
              97,
              105,
              108,
              115,
              46,
              115,
              105,
              100,
              61,
              115,
              37,
              51,
              65,
              73,
              100,
              111,
              99,
              75,
              72,
              100,
              45,
              89,
              55,
              105,
              77,
              73,
              80,
              69,
              100,
              82,
              74,
              52,
              65,
              121,
              85,
              56,
              85,
              102,
              115,
              107,
              70,
              67,
              72,
              110,
              98,
              46,
              117,
              112,
              86,
              97,
              98,
              68,
              110,
              97,
              112,
              75,
              118,
              122,
              109,
              106,
              54,
              109,
              72,
              67,
              102,
              104,
              110,
              73,
              67,
              50,
              74,
              90,
              74,
              85,
              112,
              102,
              111,
              81,
              85,
              111,
              51,
              67,
              97,
              118,
              86,
              122,
              88,
              85,
              111,
              34,
              125,
              44,
              34,
              106,
              115,
              111,
              110,
              34,
              58,
              123,
              34,
              102,
              111,
              111,
              49,
              34,
              58,
              34,
              98,
              97,
              114,
              49,
              34,
              44,
              34,
              102,
              111,
              111,
              50,
              34,
              58,
              34,
              98,
              97,
              114,
              50,
              34,
              125,
              44,
              34,
              117,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              47,
              112,
              111,
              115,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 198,
          "responseSize": 643
        },
        "id": "c3940b37-6cc0-446b-91d5-c09c2a1be9b8",
        "assertions": [
          {
            "assertion": "response is ok",
            "skipped": false
          },
          {
            "assertion": "response body has json with form data",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "50240376-8872-482b-8254-fa75f1439025",
          "length": 37,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "b116fce5-0bd1-4a1b-8e14-bb838abb6958"
        },
        "item": {
          "_": {
            "postman_id": "82883b3d-51ee-452b-bf98-ab7b37c551a1"
          },
          "id": "82883b3d-51ee-452b-bf98-ab7b37c551a1",
          "name": "PUT Request",
          "request": {
            "description": {
              "content": "The HTTP `PUT` request method is similar to HTTP `POST`. It too is meant to \ntransfer data to a server (and elicit a response). What data is returned depends on the implementation\nof the server.\n\nA `PUT` request can pass parameters to the server using \"Query String \nParameters\", as well as the Request Body. For example, in the following \nraw HTTP request,\n\n> PUT /hi/there?hand=wave\n>\n> <request-body>\n\n\n",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "put"
              ],
              "host": [
                "postman-echo",
                "com"
              ],
              "query": [],
              "variable": []
            },
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "This is expected to be sent back as part of response body."
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fcab39af-9803-43b9-b773-0d044bffc34c",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response body has json with form data\", function () {",
                  "    pm.response.to.have.jsonBody('data', ",
                  "        'This is expected to be sent back as part of response body.');",
                  "});"
                ],
                "_lastExecutionId": "3fa26eab-2d52-43ab-a2a8-53f0544746c1"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "The HTTP `PUT` request method is similar to HTTP `POST`. It too is meant to \ntransfer data to a server (and elicit a response). What data is returned depends on the implementation\nof the server.\n\nA `PUT` request can pass parameters to the server using \"Query String \nParameters\", as well as the Request Body. For example, in the following \nraw HTTP request,\n\n> PUT /hi/there?hand=wave\n>\n> <request-body>\n\n\n",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "put"
            ],
            "host": [
              "postman-echo",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.26.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1feedaf0-f7a1-4cb4-a4ee-e2e6f8010cea",
              "system": true
            },
            {
              "key": "Host",
              "value": "postman-echo.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": 58,
              "system": true
            },
            {
              "key": "Cookie",
              "value": "sails.sid=s%3A0MdPrwuTH3A4ISyiy4_akX05_NrEZbWb.6i86nt2VkzZj0fVMW8j%2F7dy50mTlF2GnQN1g74rrptw",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "This is expected to be sent back as part of response body."
          }
        },
        "response": {
          "id": "56198cdd-d582-4866-b505-a2c28d3c5ab2",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Fri, 12 Jun 2020 13:15:43 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "627"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "ETag",
              "value": "W/\"273-U5rHxXDLAh2nvLyT6D2HH+ABM78\""
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3AW1wJR4-Zl7FIVtKb-kBD6PEklxco6Jiu.OpeBmsXHwYCSqLfgkvCbIALlQ%2Fblih%2F7VUhk8TPR4zo; Path=/; HttpOnly"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              97,
              114,
              103,
              115,
              34,
              58,
              123,
              125,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              101,
              120,
              112,
              101,
              99,
              116,
              101,
              100,
              32,
              116,
              111,
              32,
              98,
              101,
              32,
              115,
              101,
              110,
              116,
              32,
              98,
              97,
              99,
              107,
              32,
              97,
              115,
              32,
              112,
              97,
              114,
              116,
              32,
              111,
              102,
              32,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              32,
              98,
              111,
              100,
              121,
              46,
              34,
              44,
              34,
              102,
              105,
              108,
              101,
              115,
              34,
              58,
              123,
              125,
              44,
              34,
              102,
              111,
              114,
              109,
              34,
              58,
              123,
              125,
              44,
              34,
              104,
              101,
              97,
              100,
              101,
              114,
              115,
              34,
              58,
              123,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              114,
              111,
              116,
              111,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              34,
              44,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              111,
              114,
              116,
              34,
              58,
              34,
              52,
              52,
              51,
              34,
              44,
              34,
              104,
              111,
              115,
              116,
              34,
              58,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              120,
              45,
              97,
              109,
              122,
              110,
              45,
              116,
              114,
              97,
              99,
              101,
              45,
              105,
              100,
              34,
              58,
              34,
              82,
              111,
              111,
              116,
              61,
              49,
              45,
              53,
              101,
              101,
              51,
              55,
              102,
              102,
              102,
              45,
              54,
              100,
              49,
              102,
              51,
              99,
              55,
              100,
              53,
              56,
              55,
              57,
              98,
              55,
              57,
              51,
              98,
              57,
              57,
              57,
              97,
              56,
              50,
              55,
              34,
              44,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              58,
              34,
              53,
              56,
              34,
              44,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              45,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              116,
              101,
              120,
              116,
              47,
              112,
              108,
              97,
              105,
              110,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              45,
              97,
              103,
              101,
              110,
              116,
              34,
              58,
              34,
              80,
              111,
              115,
              116,
              109,
              97,
              110,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              47,
              55,
              46,
              50,
              54,
              46,
              48,
              34,
              44,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              34,
              58,
              34,
              42,
              47,
              42,
              34,
              44,
              34,
              99,
              97,
              99,
              104,
              101,
              45,
              99,
              111,
              110,
              116,
              114,
              111,
              108,
              34,
              58,
              34,
              110,
              111,
              45,
              99,
              97,
              99,
              104,
              101,
              34,
              44,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              49,
              102,
              101,
              101,
              100,
              97,
              102,
              48,
              45,
              102,
              55,
              97,
              49,
              45,
              52,
              99,
              98,
              52,
              45,
              97,
              52,
              101,
              101,
              45,
              101,
              50,
              101,
              54,
              102,
              56,
              48,
              49,
              48,
              99,
              101,
              97,
              34,
              44,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              45,
              101,
              110,
              99,
              111,
              100,
              105,
              110,
              103,
              34,
              58,
              34,
              103,
              122,
              105,
              112,
              44,
              32,
              100,
              101,
              102,
              108,
              97,
              116,
              101,
              44,
              32,
              98,
              114,
              34,
              44,
              34,
              99,
              111,
              111,
              107,
              105,
              101,
              34,
              58,
              34,
              115,
              97,
              105,
              108,
              115,
              46,
              115,
              105,
              100,
              61,
              115,
              37,
              51,
              65,
              48,
              77,
              100,
              80,
              114,
              119,
              117,
              84,
              72,
              51,
              65,
              52,
              73,
              83,
              121,
              105,
              121,
              52,
              95,
              97,
              107,
              88,
              48,
              53,
              95,
              78,
              114,
              69,
              90,
              98,
              87,
              98,
              46,
              54,
              105,
              56,
              54,
              110,
              116,
              50,
              86,
              107,
              122,
              90,
              106,
              48,
              102,
              86,
              77,
              87,
              56,
              106,
              37,
              50,
              70,
              55,
              100,
              121,
              53,
              48,
              109,
              84,
              108,
              70,
              50,
              71,
              110,
              81,
              78,
              49,
              103,
              55,
              52,
              114,
              114,
              112,
              116,
              119,
              34,
              125,
              44,
              34,
              106,
              115,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              117,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              47,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 122,
          "responseSize": 627
        },
        "id": "82883b3d-51ee-452b-bf98-ab7b37c551a1",
        "assertions": [
          {
            "assertion": "response is ok",
            "skipped": false
          },
          {
            "assertion": "response body has json with form data",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "66f58ada-3231-4921-b4ee-5e29e7626c85",
          "length": 37,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "c466c4ac-8ad2-4858-a48d-3de0e53ce503"
        },
        "item": {
          "_": {
            "postman_id": "ccfd6d60-b02b-426e-99b5-a520dd54b080"
          },
          "id": "ccfd6d60-b02b-426e-99b5-a520dd54b080",
          "name": "PATCH Request",
          "request": {
            "description": {
              "content": "The HTTP `PATCH` method is used to update resources on a server. The exact\nuse of `PATCH` requests depends on the server in question. There are a number\nof server implementations which handle `PATCH` differently. Technically, \n`PATCH` supports both Query String parameters and a Request Body.\n\nThis endpoint accepts an HTTP `PATCH` request and provides debug information\nsuch as the HTTP headers, Query String arguments, and the Request Body.",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "patch"
              ],
              "host": [
                "postman-echo",
                "com"
              ],
              "query": [],
              "variable": []
            },
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "This is expected to be sent back as part of response body."
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5b18cd54-8382-42a0-893c-209794d7a805",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response body has json with form data\", function () {",
                  "    pm.response.to.have.jsonBody('data', ",
                  "        'This is expected to be sent back as part of response body.');",
                  "});"
                ],
                "_lastExecutionId": "bc00b5cb-3607-4e4a-994f-b0961aea0a93"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "The HTTP `PATCH` method is used to update resources on a server. The exact\nuse of `PATCH` requests depends on the server in question. There are a number\nof server implementations which handle `PATCH` differently. Technically, \n`PATCH` supports both Query String parameters and a Request Body.\n\nThis endpoint accepts an HTTP `PATCH` request and provides debug information\nsuch as the HTTP headers, Query String arguments, and the Request Body.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "patch"
            ],
            "host": [
              "postman-echo",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.26.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "0023f035-3876-46e1-95aa-16346b366bc1",
              "system": true
            },
            {
              "key": "Host",
              "value": "postman-echo.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": 58,
              "system": true
            },
            {
              "key": "Cookie",
              "value": "sails.sid=s%3AW1wJR4-Zl7FIVtKb-kBD6PEklxco6Jiu.OpeBmsXHwYCSqLfgkvCbIALlQ%2Fblih%2F7VUhk8TPR4zo",
              "system": true
            }
          ],
          "method": "PATCH",
          "body": {
            "mode": "raw",
            "raw": "This is expected to be sent back as part of response body."
          }
        },
        "response": {
          "id": "ede99f85-2eae-4b24-842c-a0e69eb5b3fc",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Fri, 12 Jun 2020 13:15:43 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "631"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "ETag",
              "value": "W/\"277-ieMa2kVaa9Fjwx0hgDh7alzb3FY\""
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              97,
              114,
              103,
              115,
              34,
              58,
              123,
              125,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              101,
              120,
              112,
              101,
              99,
              116,
              101,
              100,
              32,
              116,
              111,
              32,
              98,
              101,
              32,
              115,
              101,
              110,
              116,
              32,
              98,
              97,
              99,
              107,
              32,
              97,
              115,
              32,
              112,
              97,
              114,
              116,
              32,
              111,
              102,
              32,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              32,
              98,
              111,
              100,
              121,
              46,
              34,
              44,
              34,
              102,
              105,
              108,
              101,
              115,
              34,
              58,
              123,
              125,
              44,
              34,
              102,
              111,
              114,
              109,
              34,
              58,
              123,
              125,
              44,
              34,
              104,
              101,
              97,
              100,
              101,
              114,
              115,
              34,
              58,
              123,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              114,
              111,
              116,
              111,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              34,
              44,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              111,
              114,
              116,
              34,
              58,
              34,
              52,
              52,
              51,
              34,
              44,
              34,
              104,
              111,
              115,
              116,
              34,
              58,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              120,
              45,
              97,
              109,
              122,
              110,
              45,
              116,
              114,
              97,
              99,
              101,
              45,
              105,
              100,
              34,
              58,
              34,
              82,
              111,
              111,
              116,
              61,
              49,
              45,
              53,
              101,
              101,
              51,
              55,
              102,
              102,
              102,
              45,
              51,
              52,
              57,
              48,
              97,
              48,
              57,
              97,
              99,
              57,
              53,
              52,
              99,
              98,
              51,
              49,
              54,
              98,
              98,
              48,
              52,
              98,
              53,
              55,
              34,
              44,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              58,
              34,
              53,
              56,
              34,
              44,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              45,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              116,
              101,
              120,
              116,
              47,
              112,
              108,
              97,
              105,
              110,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              45,
              97,
              103,
              101,
              110,
              116,
              34,
              58,
              34,
              80,
              111,
              115,
              116,
              109,
              97,
              110,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              47,
              55,
              46,
              50,
              54,
              46,
              48,
              34,
              44,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              34,
              58,
              34,
              42,
              47,
              42,
              34,
              44,
              34,
              99,
              97,
              99,
              104,
              101,
              45,
              99,
              111,
              110,
              116,
              114,
              111,
              108,
              34,
              58,
              34,
              110,
              111,
              45,
              99,
              97,
              99,
              104,
              101,
              34,
              44,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              48,
              48,
              50,
              51,
              102,
              48,
              51,
              53,
              45,
              51,
              56,
              55,
              54,
              45,
              52,
              54,
              101,
              49,
              45,
              57,
              53,
              97,
              97,
              45,
              49,
              54,
              51,
              52,
              54,
              98,
              51,
              54,
              54,
              98,
              99,
              49,
              34,
              44,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              45,
              101,
              110,
              99,
              111,
              100,
              105,
              110,
              103,
              34,
              58,
              34,
              103,
              122,
              105,
              112,
              44,
              32,
              100,
              101,
              102,
              108,
              97,
              116,
              101,
              44,
              32,
              98,
              114,
              34,
              44,
              34,
              99,
              111,
              111,
              107,
              105,
              101,
              34,
              58,
              34,
              115,
              97,
              105,
              108,
              115,
              46,
              115,
              105,
              100,
              61,
              115,
              37,
              51,
              65,
              87,
              49,
              119,
              74,
              82,
              52,
              45,
              90,
              108,
              55,
              70,
              73,
              86,
              116,
              75,
              98,
              45,
              107,
              66,
              68,
              54,
              80,
              69,
              107,
              108,
              120,
              99,
              111,
              54,
              74,
              105,
              117,
              46,
              79,
              112,
              101,
              66,
              109,
              115,
              88,
              72,
              119,
              89,
              67,
              83,
              113,
              76,
              102,
              103,
              107,
              118,
              67,
              98,
              73,
              65,
              76,
              108,
              81,
              37,
              50,
              70,
              98,
              108,
              105,
              104,
              37,
              50,
              70,
              55,
              86,
              85,
              104,
              107,
              56,
              84,
              80,
              82,
              52,
              122,
              111,
              34,
              125,
              44,
              34,
              106,
              115,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              117,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              47,
              112,
              97,
              116,
              99,
              104,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 130,
          "responseSize": 631
        },
        "id": "ccfd6d60-b02b-426e-99b5-a520dd54b080",
        "assertions": [
          {
            "assertion": "response is ok",
            "skipped": false
          },
          {
            "assertion": "response body has json with form data",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "2c633174-3351-4d61-8c49-bb70ea2a7492",
          "length": 37,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "5ebbd1ca-4407-48e8-94e7-60372ce8f040"
        },
        "item": {
          "_": {
            "postman_id": "795639eb-d575-4f49-9d91-11b9eed72a6e"
          },
          "id": "795639eb-d575-4f49-9d91-11b9eed72a6e",
          "name": "DELETE Request",
          "request": {
            "description": {
              "content": "The HTTP `DELETE` method is used to delete resources on a server. The exact\nuse of `DELETE` requests depends on the server implementation. In general, \n`DELETE` requests support both, Query String parameters as well as a Request \nBody.\n\nThis endpoint accepts an HTTP `DELETE` request and provides debug information\nsuch as the HTTP headers, Query String arguments, and the Request Body.",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "delete"
              ],
              "host": [
                "postman-echo",
                "com"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE",
            "body": {
              "mode": "raw",
              "raw": "This is expected to be sent back as part of response body."
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ad581c8e-c465-4aa0-83ab-59906f64dc5e",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response body has json with form data\", function () {",
                  "    pm.response.to.have.jsonBody('data', ",
                  "        'This is expected to be sent back as part of response body.');",
                  "});"
                ],
                "_lastExecutionId": "96924df0-4f97-4be1-9778-cca02e86fa93"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "The HTTP `DELETE` method is used to delete resources on a server. The exact\nuse of `DELETE` requests depends on the server implementation. In general, \n`DELETE` requests support both, Query String parameters as well as a Request \nBody.\n\nThis endpoint accepts an HTTP `DELETE` request and provides debug information\nsuch as the HTTP headers, Query String arguments, and the Request Body.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "delete"
            ],
            "host": [
              "postman-echo",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "text/plain",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.26.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "0ba677ea-0d23-46ab-a1bf-19732cef5b7f",
              "system": true
            },
            {
              "key": "Host",
              "value": "postman-echo.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": 58,
              "system": true
            },
            {
              "key": "Cookie",
              "value": "sails.sid=s%3AW1wJR4-Zl7FIVtKb-kBD6PEklxco6Jiu.OpeBmsXHwYCSqLfgkvCbIALlQ%2Fblih%2F7VUhk8TPR4zo",
              "system": true
            }
          ],
          "method": "DELETE",
          "body": {
            "mode": "raw",
            "raw": "This is expected to be sent back as part of response body."
          }
        },
        "response": {
          "id": "0d91be80-5797-4b4a-8e22-fd2643bb01f0",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Fri, 12 Jun 2020 13:15:43 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "632"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "ETag",
              "value": "W/\"278-oEY5eko7PuGgsjrkTdoKKd2ZiY8\""
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3AXyPvSlS-hf_AamPzS_jiJ13qp_16Ss1f.4zcfPP4sA2yyOJG%2BhU1oNbElJRRsmVzHiQQ7rqUZ6QA; Path=/; HttpOnly"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              97,
              114,
              103,
              115,
              34,
              58,
              123,
              125,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              34,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              101,
              120,
              112,
              101,
              99,
              116,
              101,
              100,
              32,
              116,
              111,
              32,
              98,
              101,
              32,
              115,
              101,
              110,
              116,
              32,
              98,
              97,
              99,
              107,
              32,
              97,
              115,
              32,
              112,
              97,
              114,
              116,
              32,
              111,
              102,
              32,
              114,
              101,
              115,
              112,
              111,
              110,
              115,
              101,
              32,
              98,
              111,
              100,
              121,
              46,
              34,
              44,
              34,
              102,
              105,
              108,
              101,
              115,
              34,
              58,
              123,
              125,
              44,
              34,
              102,
              111,
              114,
              109,
              34,
              58,
              123,
              125,
              44,
              34,
              104,
              101,
              97,
              100,
              101,
              114,
              115,
              34,
              58,
              123,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              114,
              111,
              116,
              111,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              34,
              44,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              111,
              114,
              116,
              34,
              58,
              34,
              52,
              52,
              51,
              34,
              44,
              34,
              104,
              111,
              115,
              116,
              34,
              58,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              120,
              45,
              97,
              109,
              122,
              110,
              45,
              116,
              114,
              97,
              99,
              101,
              45,
              105,
              100,
              34,
              58,
              34,
              82,
              111,
              111,
              116,
              61,
              49,
              45,
              53,
              101,
              101,
              51,
              55,
              102,
              102,
              102,
              45,
              52,
              55,
              55,
              49,
              52,
              57,
              101,
              99,
              49,
              97,
              98,
              57,
              48,
              51,
              56,
              100,
              98,
              50,
              52,
              53,
              99,
              100,
              51,
              52,
              34,
              44,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              58,
              34,
              53,
              56,
              34,
              44,
              34,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              45,
              116,
              121,
              112,
              101,
              34,
              58,
              34,
              116,
              101,
              120,
              116,
              47,
              112,
              108,
              97,
              105,
              110,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              45,
              97,
              103,
              101,
              110,
              116,
              34,
              58,
              34,
              80,
              111,
              115,
              116,
              109,
              97,
              110,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              47,
              55,
              46,
              50,
              54,
              46,
              48,
              34,
              44,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              34,
              58,
              34,
              42,
              47,
              42,
              34,
              44,
              34,
              99,
              97,
              99,
              104,
              101,
              45,
              99,
              111,
              110,
              116,
              114,
              111,
              108,
              34,
              58,
              34,
              110,
              111,
              45,
              99,
              97,
              99,
              104,
              101,
              34,
              44,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              48,
              98,
              97,
              54,
              55,
              55,
              101,
              97,
              45,
              48,
              100,
              50,
              51,
              45,
              52,
              54,
              97,
              98,
              45,
              97,
              49,
              98,
              102,
              45,
              49,
              57,
              55,
              51,
              50,
              99,
              101,
              102,
              53,
              98,
              55,
              102,
              34,
              44,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              45,
              101,
              110,
              99,
              111,
              100,
              105,
              110,
              103,
              34,
              58,
              34,
              103,
              122,
              105,
              112,
              44,
              32,
              100,
              101,
              102,
              108,
              97,
              116,
              101,
              44,
              32,
              98,
              114,
              34,
              44,
              34,
              99,
              111,
              111,
              107,
              105,
              101,
              34,
              58,
              34,
              115,
              97,
              105,
              108,
              115,
              46,
              115,
              105,
              100,
              61,
              115,
              37,
              51,
              65,
              87,
              49,
              119,
              74,
              82,
              52,
              45,
              90,
              108,
              55,
              70,
              73,
              86,
              116,
              75,
              98,
              45,
              107,
              66,
              68,
              54,
              80,
              69,
              107,
              108,
              120,
              99,
              111,
              54,
              74,
              105,
              117,
              46,
              79,
              112,
              101,
              66,
              109,
              115,
              88,
              72,
              119,
              89,
              67,
              83,
              113,
              76,
              102,
              103,
              107,
              118,
              67,
              98,
              73,
              65,
              76,
              108,
              81,
              37,
              50,
              70,
              98,
              108,
              105,
              104,
              37,
              50,
              70,
              55,
              86,
              85,
              104,
              107,
              56,
              84,
              80,
              82,
              52,
              122,
              111,
              34,
              125,
              44,
              34,
              106,
              115,
              111,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              117,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              47,
              100,
              101,
              108,
              101,
              116,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 121,
          "responseSize": 632
        },
        "id": "795639eb-d575-4f49-9d91-11b9eed72a6e",
        "assertions": [
          {
            "assertion": "response is ok",
            "skipped": false
          },
          {
            "assertion": "response body has json with form data",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "1f9705a1-f392-462e-a559-cb2f7f034293",
          "length": 37,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "6da4aba5-2f3f-42a7-933e-22ca2b65edf0"
        },
        "item": {
          "_": {
            "postman_id": "0490baef-b3bf-43a1-acac-8579620031a7"
          },
          "id": "0490baef-b3bf-43a1-acac-8579620031a7",
          "name": "Request Headers",
          "request": {
            "description": {
              "content": "A `GET` request to this endpoint returns the list of all request headers as part of the response JSON.\nIn Postman, sending your own set of headers through the [Headers tab](https://www.getpostman.com/docs/requests#headers?source=echo-collection-app-onboarding) will reveal the headers as part of the response.",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "headers"
              ],
              "host": [
                "postman-echo",
                "com"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "my-sample-header",
                "value": "Lorem ipsum dolor sit amet"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "javascript"
              },
              "id": "9cfc3a18-695b-4d3e-8451-4ddcdc1c5f29",
              "name": "my-sample-header",
              "originalRequest": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "headers"
                  ],
                  "host": [
                    "echo",
                    "getpostman",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "my-sample-header",
                    "value": "Lorem ipsum dolor sit amet"
                  }
                ],
                "method": "GET"
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "name": "Access-Control-Allow-Credentials",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Credentials",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Headers",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Methods",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Methods",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Origin",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Origin",
                  "value": ""
                },
                {
                  "name": "Connection",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "name": "Content-Encoding",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Encoding",
                  "value": "gzip"
                },
                {
                  "name": "Content-Length",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Length",
                  "value": "342"
                },
                {
                  "name": "Content-Type",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "name": "Date",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Date",
                  "value": "Thu, 31 Mar 2016 11:14:00 GMT"
                },
                {
                  "name": "Server",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Server",
                  "value": "nginx/1.6.2"
                },
                {
                  "name": "Vary",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Vary",
                  "value": "Accept-Encoding"
                },
                {
                  "name": "X-Powered-By",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "X-Powered-By",
                  "value": "Sails <sailsjs.org>"
                }
              ],
              "body": "{\"headers\":{\"host\":\"echo.getpostman.com\",\"accept\":\"*/*\",\"accept-encoding\":\"gzip, deflate, sdch\",\"accept-language\":\"en-US,en;q=0.8\",\"cache-control\":\"no-cache\",\"my-sample-header\":\"Lorem ipsum dolor sit amet\",\"postman-token\":\"3c8ea80b-f599-fba6-e0b4-a0910440e7b6\",\"user-agent\":\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.110 Safari/537.36\",\"x-forwarded-port\":\"443\",\"x-forwarded-proto\":\"https\"}}",
              "cookie": [
                {
                  "name": "sails.sid",
                  "expires": null,
                  "domain": "echo.getpostman.com",
                  "path": "/",
                  "secure": false,
                  "httpOnly": true,
                  "hostOnly": true,
                  "session": true,
                  "value": "s%3A9stja5zKmIILxq9Jvtha7Lp9LIz1VIdK.Vp8MHC%2BEUJe4ICZPXn2JAoXaV2bTgtoQd%2B3XJLNr51Y"
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4321cf8c-f1c7-461e-88b8-280c52216cd5",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "// we check to ensire that the headers we sent as request is returned as part of",
                  "// the response body. if you change the request headers, make sure to add them",
                  "// to the tests here",
                  "pm.test(\"sample request header should be returned in response body\", function () {",
                  "    pm.response.to.have.jsonBody('headers.my-sample-header', 'Lorem ipsum dolor sit amet');",
                  "});"
                ],
                "_lastExecutionId": "ad0df54a-b251-4285-ab39-8d6ee8ff8d42"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "A `GET` request to this endpoint returns the list of all request headers as part of the response JSON.\nIn Postman, sending your own set of headers through the [Headers tab](https://www.getpostman.com/docs/requests#headers?source=echo-collection-app-onboarding) will reveal the headers as part of the response.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "headers"
            ],
            "host": [
              "postman-echo",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "my-sample-header",
              "value": "Lorem ipsum dolor sit amet"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.26.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "a3bf93b7-ee8b-4b23-ac22-834a97602489",
              "system": true
            },
            {
              "key": "Host",
              "value": "postman-echo.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "sails.sid=s%3AXyPvSlS-hf_AamPzS_jiJ13qp_16Ss1f.4zcfPP4sA2yyOJG%2BhU1oNbElJRRsmVzHiQQ7rqUZ6QA",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "af8c7efa-4ebb-4931-bc94-5b42fc9051d2",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Fri, 12 Jun 2020 13:15:43 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "477"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "ETag",
              "value": "W/\"1dd-wAnNgMLYHO3j5WPvdyPdbXkrhTg\""
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3A-SfOTs791a_VtFUY9tdNoOR9fxtQKc9f.3XMuyTrtZoxVe0tn1XVHQblfXa%2FEKEAeM4W08hThwa4; Path=/; HttpOnly"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              101,
              97,
              100,
              101,
              114,
              115,
              34,
              58,
              123,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              114,
              111,
              116,
              111,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              34,
              44,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              111,
              114,
              116,
              34,
              58,
              34,
              52,
              52,
              51,
              34,
              44,
              34,
              104,
              111,
              115,
              116,
              34,
              58,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              120,
              45,
              97,
              109,
              122,
              110,
              45,
              116,
              114,
              97,
              99,
              101,
              45,
              105,
              100,
              34,
              58,
              34,
              82,
              111,
              111,
              116,
              61,
              49,
              45,
              53,
              101,
              101,
              51,
              55,
              102,
              102,
              102,
              45,
              98,
              100,
              49,
              48,
              52,
              100,
              99,
              98,
              57,
              50,
              50,
              97,
              53,
              54,
              50,
              53,
              100,
              100,
              100,
              55,
              100,
              52,
              102,
              56,
              34,
              44,
              34,
              109,
              121,
              45,
              115,
              97,
              109,
              112,
              108,
              101,
              45,
              104,
              101,
              97,
              100,
              101,
              114,
              34,
              58,
              34,
              76,
              111,
              114,
              101,
              109,
              32,
              105,
              112,
              115,
              117,
              109,
              32,
              100,
              111,
              108,
              111,
              114,
              32,
              115,
              105,
              116,
              32,
              97,
              109,
              101,
              116,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              45,
              97,
              103,
              101,
              110,
              116,
              34,
              58,
              34,
              80,
              111,
              115,
              116,
              109,
              97,
              110,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              47,
              55,
              46,
              50,
              54,
              46,
              48,
              34,
              44,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              34,
              58,
              34,
              42,
              47,
              42,
              34,
              44,
              34,
              99,
              97,
              99,
              104,
              101,
              45,
              99,
              111,
              110,
              116,
              114,
              111,
              108,
              34,
              58,
              34,
              110,
              111,
              45,
              99,
              97,
              99,
              104,
              101,
              34,
              44,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              97,
              51,
              98,
              102,
              57,
              51,
              98,
              55,
              45,
              101,
              101,
              56,
              98,
              45,
              52,
              98,
              50,
              51,
              45,
              97,
              99,
              50,
              50,
              45,
              56,
              51,
              52,
              97,
              57,
              55,
              54,
              48,
              50,
              52,
              56,
              57,
              34,
              44,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              45,
              101,
              110,
              99,
              111,
              100,
              105,
              110,
              103,
              34,
              58,
              34,
              103,
              122,
              105,
              112,
              44,
              32,
              100,
              101,
              102,
              108,
              97,
              116,
              101,
              44,
              32,
              98,
              114,
              34,
              44,
              34,
              99,
              111,
              111,
              107,
              105,
              101,
              34,
              58,
              34,
              115,
              97,
              105,
              108,
              115,
              46,
              115,
              105,
              100,
              61,
              115,
              37,
              51,
              65,
              88,
              121,
              80,
              118,
              83,
              108,
              83,
              45,
              104,
              102,
              95,
              65,
              97,
              109,
              80,
              122,
              83,
              95,
              106,
              105,
              74,
              49,
              51,
              113,
              112,
              95,
              49,
              54,
              83,
              115,
              49,
              102,
              46,
              52,
              122,
              99,
              102,
              80,
              80,
              52,
              115,
              65,
              50,
              121,
              121,
              79,
              74,
              71,
              37,
              50,
              66,
              104,
              85,
              49,
              111,
              78,
              98,
              69,
              108,
              74,
              82,
              82,
              115,
              109,
              86,
              122,
              72,
              105,
              81,
              81,
              55,
              114,
              113,
              85,
              90,
              54,
              81,
              65,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 153,
          "responseSize": 477
        },
        "id": "0490baef-b3bf-43a1-acac-8579620031a7",
        "assertions": [
          {
            "assertion": "response is ok",
            "skipped": false
          },
          {
            "assertion": "sample request header should be returned in response body",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "bf1e1234-965d-4d63-854d-e43a140473d8",
          "length": 37,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "e41c535f-8b03-4d2a-b4d3-8ea9754065e2"
        },
        "item": {
          "_": {
            "postman_id": "6bd5610f-17fc-464f-bb5d-9e0ae89a3942"
          },
          "id": "6bd5610f-17fc-464f-bb5d-9e0ae89a3942",
          "name": "Response Headers",
          "request": {
            "description": {
              "content": "This endpoint causes the server to send custom set of response headers. Providing header values as part of the URL parameters of a `GET` request to this endpoint returns the same as part of response header.\n\nTo send your own set of headers, simply add or replace the the URL parameters with your own set.",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "response-headers"
              ],
              "host": [
                "postman-echo",
                "com"
              ],
              "query": [
                {
                  "key": "foo1",
                  "value": "bar1"
                },
                {
                  "key": "foo2",
                  "value": "bar2"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "html"
              },
              "id": "e53684e0-465e-4c96-bf65-873b88ca3924",
              "name": "Response headers",
              "originalRequest": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "response-headers"
                  ],
                  "host": [
                    "echo",
                    "getpostman",
                    "com"
                  ],
                  "query": [
                    {
                      "key": "Content-Type",
                      "value": "text/html"
                    },
                    {
                      "key": "test",
                      "value": "response_headers"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "name": "Access-Control-Allow-Credentials",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Credentials",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Headers",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Methods",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Methods",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Origin",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Origin",
                  "value": ""
                },
                {
                  "name": "Connection",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "name": "Content-Encoding",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Encoding",
                  "value": "gzip"
                },
                {
                  "name": "Content-Length",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Length",
                  "value": "71"
                },
                {
                  "name": "Content-Type",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Type",
                  "value": "text/html; charset=utf-8"
                },
                {
                  "name": "Date",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Date",
                  "value": "Thu, 31 Mar 2016 11:14:18 GMT"
                },
                {
                  "name": "Server",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Server",
                  "value": "nginx/1.6.2"
                },
                {
                  "name": "Vary",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Vary",
                  "value": "Accept-Encoding"
                },
                {
                  "name": "X-Powered-By",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "X-Powered-By",
                  "value": "Sails <sailsjs.org>"
                },
                {
                  "name": "test",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "test",
                  "value": "response_headers"
                }
              ],
              "body": "{\"Content-Type\":\"text/html\",\"test\":\"response_headers\"}",
              "cookie": [
                {
                  "name": "sails.sid",
                  "expires": null,
                  "domain": "echo.getpostman.com",
                  "path": "/",
                  "secure": false,
                  "httpOnly": true,
                  "hostOnly": true,
                  "session": true,
                  "value": "s%3A9stja5zKmIILxq9Jvtha7Lp9LIz1VIdK.Vp8MHC%2BEUJe4ICZPXn2JAoXaV2bTgtoQd%2B3XJLNr51Y"
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f0f459fa-1811-4431-9ebd-0aa31dee49fe",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response has the headers sent as part of request query\", function () {",
                  "    pm.response.to.have.header('foo1', 'bar1')",
                  "        .and.have.header('foo2', 'bar2');",
                  "});",
                  "",
                  "pm.test(\"sample request param should be returned in response body\", function () {",
                  "    pm.response.to.have.jsonBody('foo1', 'bar1')",
                  "        .and.have.jsonBody('foo2', 'bar2');",
                  "});"
                ],
                "_lastExecutionId": "decd2783-20cf-4acb-885f-71ed7917b3b8"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This endpoint causes the server to send custom set of response headers. Providing header values as part of the URL parameters of a `GET` request to this endpoint returns the same as part of response header.\n\nTo send your own set of headers, simply add or replace the the URL parameters with your own set.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "response-headers"
            ],
            "host": [
              "postman-echo",
              "com"
            ],
            "query": [
              {
                "key": "foo1",
                "value": "bar1"
              },
              {
                "key": "foo2",
                "value": "bar2"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.26.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "510b2bd4-fdab-4ab6-8905-8660e7b0089c",
              "system": true
            },
            {
              "key": "Host",
              "value": "postman-echo.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "sails.sid=s%3A-SfOTs791a_VtFUY9tdNoOR9fxtQKc9f.3XMuyTrtZoxVe0tn1XVHQblfXa%2FEKEAeM4W08hThwa4",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "b810f43f-8dd3-4cb2-99b7-b3e3de87c85a",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Fri, 12 Jun 2020 13:15:43 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "29"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "foo1",
              "value": "bar1"
            },
            {
              "key": "foo2",
              "value": "bar2"
            },
            {
              "key": "ETag",
              "value": "W/\"1d-PgOLWVqd2mMvcpNzTF0Cfy4hftg\""
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3AOc9EjEpENq5FxmD_wIJxepjxRjEtjCQb.MbENAIH6kl9Hrnr%2FQJvLP5yUZ5bqLFiDr9uf33wjN08; Path=/; HttpOnly"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              102,
              111,
              111,
              49,
              34,
              58,
              34,
              98,
              97,
              114,
              49,
              34,
              44,
              34,
              102,
              111,
              111,
              50,
              34,
              58,
              34,
              98,
              97,
              114,
              50,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 118,
          "responseSize": 29
        },
        "id": "6bd5610f-17fc-464f-bb5d-9e0ae89a3942",
        "assertions": [
          {
            "assertion": "response is ok",
            "skipped": false
          },
          {
            "assertion": "response has the headers sent as part of request query",
            "skipped": false
          },
          {
            "assertion": "sample request param should be returned in response body",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "d89037c6-8330-4b88-a675-49e805795855",
          "length": 37,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "ca9e132a-e279-46d9-a316-157ab2c10416"
        },
        "item": {
          "_": {
            "postman_id": "64b7a2c6-7f3e-4ddd-b5ce-e9ee1c4b3dfe"
          },
          "id": "64b7a2c6-7f3e-4ddd-b5ce-e9ee1c4b3dfe",
          "name": "Basic Auth",
          "request": {
            "description": {
              "content": "This endpoint simulates a **basic-auth** protected endpoint. \nThe endpoint accepts a default username and password and returns a status code of `200 ok` only if the same is provided. \nOtherwise it will return a status code `401 unauthorized`.\n\n> Username: `postman`\n> \n> Password: `password`\n\nTo use this endpoint, send a request with the header `Authorization: Basic cG9zdG1hbjpwYXNzd29yZA==`. \nThe cryptic latter half of the header value is a base64 encoded concatenation of the default username and password. \nUsing Postman, to send this request, you can simply fill in the username and password in the \"Authorization\" tab and Postman will do the rest for you.\n\nTo know more about basic authentication, refer to the [Basic Access Authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) wikipedia article.\nThe article on [authentication helpers](https://www.getpostman.com/docs/helpers#basic-auth?source=echo-collection-app-onboarding) elaborates how to use the same within the Postman app.",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "basic-auth"
              ],
              "host": [
                "postman-echo",
                "com"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "basic",
              "basic": [
                {
                  "type": "any",
                  "value": "postman",
                  "key": "username"
                },
                {
                  "type": "any",
                  "value": "password",
                  "key": "password"
                },
                {
                  "type": "any",
                  "value": false,
                  "key": "showPassword"
                }
              ]
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "javascript"
              },
              "id": "e8ed109c-f7f7-44d8-8c54-ceb0c2ed67af",
              "name": "200",
              "originalRequest": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "name": "Access-Control-Allow-Credentials",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Credentials",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Headers",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Methods",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Methods",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Origin",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Origin",
                  "value": ""
                },
                {
                  "name": "Connection",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "name": "Content-Encoding",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Encoding",
                  "value": "gzip"
                },
                {
                  "name": "Content-Length",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Length",
                  "value": "42"
                },
                {
                  "name": "Content-Type",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "name": "Date",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Date",
                  "value": "Sat, 31 Oct 2015 06:38:25 GMT"
                },
                {
                  "name": "Server",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Server",
                  "value": "nginx/1.6.2"
                },
                {
                  "name": "Vary",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Vary",
                  "value": "Accept-Encoding"
                },
                {
                  "name": "X-Powered-By",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "X-Powered-By",
                  "value": "Sails <sailsjs.org>"
                }
              ],
              "body": "{\"authenticated\":true}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c8e84bc1-7205-4883-bafc-7754ee41efec",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response body has json saying 'authenticated'\", function () {",
                  "    pm.response.to.have.jsonBody('authenticated', true);",
                  "});"
                ],
                "_lastExecutionId": "38cf21c7-f996-400f-8a8d-4bbdca4c38a0"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This endpoint simulates a **basic-auth** protected endpoint. \nThe endpoint accepts a default username and password and returns a status code of `200 ok` only if the same is provided. \nOtherwise it will return a status code `401 unauthorized`.\n\n> Username: `postman`\n> \n> Password: `password`\n\nTo use this endpoint, send a request with the header `Authorization: Basic cG9zdG1hbjpwYXNzd29yZA==`. \nThe cryptic latter half of the header value is a base64 encoded concatenation of the default username and password. \nUsing Postman, to send this request, you can simply fill in the username and password in the \"Authorization\" tab and Postman will do the rest for you.\n\nTo know more about basic authentication, refer to the [Basic Access Authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) wikipedia article.\nThe article on [authentication helpers](https://www.getpostman.com/docs/helpers#basic-auth?source=echo-collection-app-onboarding) elaborates how to use the same within the Postman app.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "basic-auth"
            ],
            "host": [
              "postman-echo",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Basic cG9zdG1hbjpwYXNzd29yZA==",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.26.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "87dedc15-1796-4a42-9150-19ed55cc4d0f",
              "system": true
            },
            {
              "key": "Host",
              "value": "postman-echo.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "sails.sid=s%3AOc9EjEpENq5FxmD_wIJxepjxRjEtjCQb.MbENAIH6kl9Hrnr%2FQJvLP5yUZ5bqLFiDr9uf33wjN08",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "basic",
            "basic": [
              {
                "type": "any",
                "value": "postman",
                "key": "username"
              },
              {
                "type": "any",
                "value": "password",
                "key": "password"
              },
              {
                "type": "any",
                "value": false,
                "key": "showPassword"
              }
            ]
          }
        },
        "response": {
          "id": "8a3f83b5-1ca0-47d0-ab62-e159429e2c1d",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Fri, 12 Jun 2020 13:15:44 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "22"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "ETag",
              "value": "W/\"16-sJz8uwjdDv0wvm7//BYdNw8vMbU\""
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3AJ-I67oKMkbT_BnBerxApI2tABqWQbh8O.BPZ56PkyZ7Pr29A8spHdy4UrWuIm4NgdSpsoAyXX2x0; Path=/; HttpOnly"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              101,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              125
            ]
          },
          "cookie": [],
          "responseTime": 132,
          "responseSize": 22
        },
        "id": "64b7a2c6-7f3e-4ddd-b5ce-e9ee1c4b3dfe",
        "assertions": [
          {
            "assertion": "response is ok",
            "skipped": false
          },
          {
            "assertion": "response body has json saying 'authenticated'",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "a83ab3f3-e0bf-49d0-98d9-43e830bd753e",
          "length": 37,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "3d81646f-8e90-4300-8293-a9ebaa5236f0"
        },
        "item": {
          "_": {
            "postman_id": "3702b6e0-4a65-44be-91d9-0bed03dea66a"
          },
          "id": "3702b6e0-4a65-44be-91d9-0bed03dea66a",
          "name": "DigestAuth Success",
          "request": {
            "description": {
              "content": "This endpoint sends a hashed Digest Authorization header to gain access to a valid `200 Ok` response code. In Postman, it uses the stored [global variables](https://www.getpostman.com/docs/environments#gloval-variables?source=echo-collection-app-onboarding), `echo_digest_realm` and `echo_digest_nonce`, to generate the hashed authorisation header.\n\nWithin Postman, for this request to successfully authenticate, running the previous request \"DigestAuth Request\" stores the relevant information within the global variables.",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "digest-auth"
              ],
              "host": [
                "postman-echo",
                "com"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Digest username=\"postman\", realm=\"Users\", nonce=\"ni1LiL0O37PRRhofWdCLmwFsnEtH1lew\", uri=\"/digest-auth\", response=\"254679099562cf07df9b6f5d8d15db44\", opaque=\"\""
              }
            ],
            "method": "GET",
            "auth": {
              "type": "digest",
              "digest": [
                {
                  "type": "any",
                  "value": "MD5",
                  "key": "algorithm"
                },
                {
                  "type": "any",
                  "value": "postman",
                  "key": "username"
                },
                {
                  "type": "any",
                  "value": "{{echo_digest_realm}}",
                  "key": "realm"
                },
                {
                  "type": "any",
                  "value": "password",
                  "key": "password"
                },
                {
                  "type": "any",
                  "value": "{{echo_digest_nonce}}",
                  "key": "nonce"
                },
                {
                  "type": "any",
                  "value": "",
                  "key": "nonceCount"
                },
                {
                  "type": "any",
                  "value": "",
                  "key": "clientNonce"
                },
                {
                  "type": "any",
                  "value": "",
                  "key": "opaque"
                },
                {
                  "type": "any",
                  "value": "",
                  "key": "qop"
                }
              ]
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "javascript"
              },
              "id": "97ac9fca-c0aa-4ed1-a87f-f442d4011c3c",
              "name": "200",
              "originalRequest": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "name": "Access-Control-Allow-Credentials",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Credentials",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Headers",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Methods",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Methods",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Origin",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Origin",
                  "value": ""
                },
                {
                  "name": "Connection",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "name": "Content-Encoding",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Encoding",
                  "value": "gzip"
                },
                {
                  "name": "Content-Length",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Length",
                  "value": "42"
                },
                {
                  "name": "Content-Type",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "name": "Date",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Date",
                  "value": "Thu, 29 Oct 2015 06:17:51 GMT"
                },
                {
                  "name": "Server",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Server",
                  "value": "nginx/1.6.2"
                },
                {
                  "name": "Vary",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Vary",
                  "value": "Accept-Encoding"
                },
                {
                  "name": "X-Powered-By",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "X-Powered-By",
                  "value": "Sails <sailsjs.org>"
                }
              ],
              "body": "{\"authenticated\":true}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "39dce069-b1a0-4440-8687-214debd8cf75",
                "type": "text/javascript",
                "exec": [
                  "tests[\"response code is 200\"] = responseCode.code === 200;",
                  "tests[\"body contains authenticated\"] = responseBody.has(\"authenticated\");"
                ],
                "_lastExecutionId": "01580e05-c182-4553-980f-fc770230a351"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This endpoint sends a hashed Digest Authorization header to gain access to a valid `200 Ok` response code. In Postman, it uses the stored [global variables](https://www.getpostman.com/docs/environments#gloval-variables?source=echo-collection-app-onboarding), `echo_digest_realm` and `echo_digest_nonce`, to generate the hashed authorisation header.\n\nWithin Postman, for this request to successfully authenticate, running the previous request \"DigestAuth Request\" stores the relevant information within the global variables.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "digest-auth"
            ],
            "host": [
              "postman-echo",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Digest username=\"postman\", realm=\"{{echo_digest_realm}}\", nonce=\"{{echo_digest_nonce}}\", uri=\"/digest-auth\", algorithm=\"MD5\", response=\"c70c5ea59136d041c00e30ebc2e37133\"",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.26.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "33688cc7-c299-411d-ac17-fd1c2eaf14a4",
              "system": true
            },
            {
              "key": "Host",
              "value": "postman-echo.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "sails.sid=s%3AJ-I67oKMkbT_BnBerxApI2tABqWQbh8O.BPZ56PkyZ7Pr29A8spHdy4UrWuIm4NgdSpsoAyXX2x0",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "digest",
            "digest": [
              {
                "type": "any",
                "value": "MD5",
                "key": "algorithm"
              },
              {
                "type": "any",
                "value": "postman",
                "key": "username"
              },
              {
                "type": "any",
                "value": "{{echo_digest_realm}}",
                "key": "realm"
              },
              {
                "type": "any",
                "value": "password",
                "key": "password"
              },
              {
                "type": "any",
                "value": "{{echo_digest_nonce}}",
                "key": "nonce"
              },
              {
                "type": "any",
                "value": "",
                "key": "nonceCount"
              },
              {
                "type": "any",
                "value": "",
                "key": "clientNonce"
              },
              {
                "type": "any",
                "value": "",
                "key": "opaque"
              },
              {
                "type": "any",
                "value": "",
                "key": "qop"
              }
            ]
          }
        },
        "response": {
          "id": "54492422-54e8-4f1f-827b-6ee6f8d685ef",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Fri, 12 Jun 2020 13:15:44 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "22"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "ETag",
              "value": "W/\"16-sJz8uwjdDv0wvm7//BYdNw8vMbU\""
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3AKkpRHrp_0ewm3dMGxs-TnI8PQloMRmNO.jB%2BuO%2BDwp8UFrjl34xccFGfG1hH2bbXTrmwxdxb45U8; Path=/; HttpOnly"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              97,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              101,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              125
            ]
          },
          "cookie": [],
          "responseTime": 121,
          "responseSize": 22
        },
        "id": "3702b6e0-4a65-44be-91d9-0bed03dea66a",
        "assertions": [
          {
            "assertion": "response code is 200",
            "skipped": false
          },
          {
            "assertion": "body contains authenticated",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "ccc30e3b-c17d-4088-a797-a041240e6e1b",
          "length": 37,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "9108dafb-c89a-4f9f-9602-8cdbe3d5da13"
        },
        "item": {
          "_": {
            "postman_id": "baae227c-4680-4b7c-ac96-2d3accaf2b26"
          },
          "id": "baae227c-4680-4b7c-ac96-2d3accaf2b26",
          "name": "Hawk Auth",
          "request": {
            "description": {
              "content": "This endpoint is a Hawk Authentication protected endpoint. [Hawk authentication](https://github.com/hueniverse/hawk) is a widely used protocol for protecting API endpoints. One of Hawk's main goals is to enable HTTP authentication for services that do not use TLS (although it can be used in conjunction with TLS as well).\n\nIn order to use this endpoint, select the \"Hawk Auth\" helper inside Postman, and set the following values:\n\nHawk Auth ID: `dh37fgj492je`\n\nHawk Auth Key: `werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn`\n\nAlgorithm: `sha256`\n\nThe rest of the values are optional, and can be left blank. Hitting send should give you a response with a status code of 200 OK.",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "auth",
                "hawk"
              ],
              "host": [
                "postman-echo",
                "com"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "hawk",
              "hawk": [
                {
                  "type": "any",
                  "value": "dh37fgj492je",
                  "key": "authId"
                },
                {
                  "type": "any",
                  "value": "werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn",
                  "key": "authKey"
                },
                {
                  "type": "any",
                  "value": "sha256",
                  "key": "algorithm"
                },
                {
                  "type": "any",
                  "value": "",
                  "key": "user"
                },
                {
                  "type": "any",
                  "value": "RZKGNz",
                  "key": "nonce"
                },
                {
                  "type": "any",
                  "value": "",
                  "key": "timestamp"
                }
              ]
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "javascript"
              },
              "id": "43c98c7a-dfc9-42df-a3da-9c34f997219d",
              "name": "Success",
              "originalRequest": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "auth",
                    "hawk"
                  ],
                  "host": [
                    "echo",
                    "getpostman",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Authorization",
                    "key": "Authorization",
                    "value": "Hawk id=\"dh37fgj492je\", ts=\"1459422734\", nonce=\"XiwiCU\", mac=\"KzMHk67BYCC9zZqRy5hRdWFEFLHX5bNlRWGdmOAWKp0=\""
                  }
                ],
                "method": "GET"
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "name": "Access-Control-Allow-Credentials",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Credentials",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Headers",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Methods",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Methods",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Origin",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Origin",
                  "value": ""
                },
                {
                  "name": "Connection",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "name": "Content-Encoding",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Encoding",
                  "value": "gzip"
                },
                {
                  "name": "Content-Type",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "name": "Date",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Date",
                  "value": "Thu, 31 Mar 2016 11:12:16 GMT"
                },
                {
                  "name": "Server",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Server",
                  "value": "nginx/1.6.2"
                },
                {
                  "name": "Server-Authorization",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Server-Authorization",
                  "value": "Hawk mac=\"vRrUzDdcHu2NaNts/r4zg2xmXMdX8wPiTGTM398BDRg=\", hash=\"qmtflETMybaZiOQ2dLT17yiRunFT5OCIxZRZ0boQaiE=\""
                },
                {
                  "name": "Vary",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Vary",
                  "value": "Accept-Encoding"
                },
                {
                  "name": "X-Powered-By",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "X-Powered-By",
                  "value": "Sails <sailsjs.org>"
                },
                {
                  "name": "transfer-encoding",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "transfer-encoding",
                  "value": "chunked"
                }
              ],
              "body": "{\"status\":\"pass\",\"message\":\"Hawk Authentication successful\"}",
              "cookie": [
                {
                  "name": "getpostmanlogin",
                  "expires": null,
                  "domain": ".getpostman.com",
                  "path": "/",
                  "secure": false,
                  "httpOnly": false,
                  "hostOnly": false,
                  "session": false,
                  "value": "yes"
                },
                {
                  "name": "postman.sid",
                  "expires": null,
                  "domain": ".getpostman.com",
                  "path": "/",
                  "secure": false,
                  "httpOnly": false,
                  "hostOnly": false,
                  "session": false,
                  "value": "9f887f3b7f14b8c29ac4dc4109381b0b89a76e785c7b34251d6c8025b41b24013d2aa49f40e2deac19cbf0594dd984169455534d91ff98d4d1868d67ac857017629f137926e3a04a616bb83a2fb5ab9e6cbea9579ed5d5c1155d47545d72aad5be99f4abd0a7130805b3807d70cd507171dbe9d950d8e35a853f9ec075f5a767c95df4d57f7d521b66605b3bda3801700e26e651d1129c798b729ee3b91702d43ae64ab226c3f426893753def772c15442a7552dc84a3c773d6099a50b0a6af940b64c8176fedfcecd5fc31ccfc3bbc0124bfdaa0d62e4252d4aafb46a3c10963d12391e1fa97a1c0f19a636f57a3ac8cc35567d1cb6cb53b77f8adde3f6754a765596d7d00bdeb9acb5cc8d115e7c3f50ec3228e34d3e6c7464e9039b01868e03d10e9f87772397602453e9e91205de7b86021fad06eb26e69298e99ff1597a670faeb310f8c092041d544851de84f2bee89a92123da6eea286210524035c85361e2af42166a6"
                },
                {
                  "name": "sails.sid",
                  "expires": null,
                  "domain": "echo.getpostman.com",
                  "path": "/",
                  "secure": false,
                  "httpOnly": true,
                  "hostOnly": true,
                  "session": true,
                  "value": "s%3AryJV7v-PE4PuTjBK6nH5XOynQ4atuATV.n17KcaLhVmV8TBHNLwdwXgGR7lmqs3i478WPlTbRgZ4"
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2aefec67-b23b-47b5-95c7-2afca45c32b7",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response body has json saying passed 'status'\", function () {",
                  "    pm.response.to.have.jsonBody('status', 'pass');",
                  "});"
                ],
                "_lastExecutionId": "471ccfaa-73bf-4b3c-90f3-078114fa46e3"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This endpoint is a Hawk Authentication protected endpoint. [Hawk authentication](https://github.com/hueniverse/hawk) is a widely used protocol for protecting API endpoints. One of Hawk's main goals is to enable HTTP authentication for services that do not use TLS (although it can be used in conjunction with TLS as well).\n\nIn order to use this endpoint, select the \"Hawk Auth\" helper inside Postman, and set the following values:\n\nHawk Auth ID: `dh37fgj492je`\n\nHawk Auth Key: `werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn`\n\nAlgorithm: `sha256`\n\nThe rest of the values are optional, and can be left blank. Hitting send should give you a response with a status code of 200 OK.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "auth",
              "hawk"
            ],
            "host": [
              "postman-echo",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Hawk id=\"dh37fgj492je\", ts=\"1591967744\", nonce=\"RZKGNz\", mac=\"bVD3CpNdFUB4aICgvZ5xqxkuxRYceC3ZrdEe9doDkXs=\"",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.26.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3ec2522c-b48e-43b2-ab56-ba2c71332490",
              "system": true
            },
            {
              "key": "Host",
              "value": "postman-echo.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "sails.sid=s%3AKkpRHrp_0ewm3dMGxs-TnI8PQloMRmNO.jB%2BuO%2BDwp8UFrjl34xccFGfG1hH2bbXTrmwxdxb45U8",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "hawk",
            "hawk": [
              {
                "type": "any",
                "value": "dh37fgj492je",
                "key": "authId"
              },
              {
                "type": "any",
                "value": "werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn",
                "key": "authKey"
              },
              {
                "type": "any",
                "value": "sha256",
                "key": "algorithm"
              },
              {
                "type": "any",
                "value": "",
                "key": "user"
              },
              {
                "type": "any",
                "value": "RZKGNz",
                "key": "nonce"
              },
              {
                "type": "any",
                "value": 1591967744,
                "key": "timestamp",
                "system": true
              }
            ]
          }
        },
        "response": {
          "id": "838c97a8-ec0b-458f-9db2-3f5a6e7d029f",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Fri, 12 Jun 2020 13:15:44 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "44"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "ETag",
              "value": "W/\"2c-UZ5QLCWp1r9bxkKdVTupq1/XxUI\""
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3AscISPLu1Zi9rXExvDqjadtOiglzyE28U.dmzmiYpShcv%2BmwPUAqMzL%2BPcKvpuazsFd5i1Rv2yXE0; Path=/; HttpOnly"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              72,
              97,
              119,
              107,
              32,
              65,
              117,
              116,
              104,
              101,
              110,
              116,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              83,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 120,
          "responseSize": 44
        },
        "id": "baae227c-4680-4b7c-ac96-2d3accaf2b26",
        "assertions": [
          {
            "assertion": "response is ok",
            "skipped": false
          },
          {
            "assertion": "response body has json saying passed 'status'",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response body has json saying passed 'status'",
              "message": "expected { Object (message) } in response to contain property 'status'",
              "stack": "AssertionError: expected { Object (message) } in response to contain property 'status'\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "1ddf0fe3-8574-4dfa-8f49-83914b12d1bd",
          "length": 37,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "4c87df0a-f230-4c75-809b-6833df71a38e"
        },
        "item": {
          "_": {
            "postman_id": "c24dde0c-a7e6-417e-837b-f9b5d930dd8b"
          },
          "id": "c24dde0c-a7e6-417e-837b-f9b5d930dd8b",
          "name": "OAuth1.0 (verify signature)",
          "request": {
            "description": {
              "content": "OAuth1.0a is a specification that defines a protocol that can be used by one\nservice to access \"protected\" resources (endpoints) on another service. A\nmajor part of OAuth1.0 is HTTP Request Signing. This endpoint allows you to \ncheck whether the request calculation works properly in the client. \n\nThe endpoint supports the HTTP ``Authorization`` header. In case the signature\nverification fails, the endpoint provides the four debug values,\n\n* ``base_uri``\n* ``normalized_param_string``\n* ``base_string``\n* ``signing_key``\n\nFor more details about these parameters, check the [OAuth1.0a Specification](http://oauth.net/core/1.0a/)\n\nIn order to use this endpoint, you can set the following values:\n\n> Consumer Key: ``RKCGzna7bv9YD57c``\n>\n> Consumer Secret: ``D+EdQ-gs$-%@2Nu7``\n\nIf you are using Postman, also check the \"Add params to header\" and \n\"Auto add parameters\" boxes.",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "oauth1"
              ],
              "host": [
                "postman-echo",
                "com"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "oauth1",
              "oauth1": [
                {
                  "type": "any",
                  "value": "RKCGzna7bv9YD57c",
                  "key": "consumerKey"
                },
                {
                  "type": "any",
                  "value": "D+EdQ-gs$-%@2Nu7",
                  "key": "consumerSecret"
                },
                {
                  "type": "any",
                  "value": "",
                  "key": "token"
                },
                {
                  "type": "any",
                  "value": "",
                  "key": "tokenSecret"
                },
                {
                  "type": "any",
                  "value": "HMAC-SHA1",
                  "key": "signatureMethod"
                },
                {
                  "type": "any",
                  "value": "",
                  "key": "timestamp"
                },
                {
                  "type": "any",
                  "value": "",
                  "key": "nonce"
                },
                {
                  "type": "any",
                  "value": "",
                  "key": "version"
                },
                {
                  "type": "any",
                  "value": "",
                  "key": "realm"
                },
                {
                  "type": "any",
                  "value": true,
                  "key": "addParamsToHeader"
                },
                {
                  "type": "any",
                  "value": false,
                  "key": "addEmptyParamsToSign"
                }
              ]
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "javascript"
              },
              "id": "29828e02-1c2f-4bd9-9b1c-b87bef13daec",
              "name": "401",
              "originalRequest": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "oauth1"
                  ],
                  "host": [
                    "echo",
                    "getpostman",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Authorization",
                    "key": "Authorization",
                    "value": "OAuth oauth_consumer_key=\"RKCGzna7bv9YD57c_wrong\",oauth_signature_method=\"HMAC-SHA1\",oauth_timestamp=\"1472121295\",oauth_nonce=\"8LTsU2\",oauth_version=\"1.0\",oauth_signature=\"tSUexpY%2B7EhSY7cFXiFN5EMx2zw%3D\""
                  }
                ],
                "method": "GET"
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "name": "Access-Control-Allow-Credentials",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Credentials",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Headers",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Methods",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Methods",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Origin",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Origin",
                  "value": ""
                },
                {
                  "name": "Access-Control-Expose-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Expose-Headers",
                  "value": ""
                },
                {
                  "name": "Connection",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "name": "Content-Length",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Length",
                  "value": "536"
                },
                {
                  "name": "Content-Type",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "name": "Date",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Date",
                  "value": "Thu, 25 Aug 2016 10:34:55 GMT"
                },
                {
                  "name": "ETag",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "ETag",
                  "value": "W/\"218-SGnurnTsu5qV5cCYWxsJlg\""
                },
                {
                  "name": "Server",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Server",
                  "value": "nginx/1.8.1"
                },
                {
                  "name": "Vary",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Vary",
                  "value": "Accept-Encoding"
                }
              ],
              "body": "{\"status\":\"fail\",\"message\":\"HMAC-SHA1 verification failed\",\"base_uri\":\"https://echo.getpostman.com/oauth1\",\"normalized_param_string\":\"oauth_consumer_key=RKCGzna7bv9YD57c_wrong&oauth_nonce=8LTsU2&oauth_signature_method=HMAC-SHA1&oauth_timestamp=1472121295&oauth_version=1.0\",\"base_string\":\"GET&https%3A%2F%2Fecho.getpostman.com%2Foauth1&oauth_consumer_key%3DRKCGzna7bv9YD57c_wrong%26oauth_nonce%3D8LTsU2%26oauth_signature_method%3DHMAC-SHA1%26oauth_timestamp%3D1472121295%26oauth_version%3D1.0\",\"signing_key\":\"D%2BEdQ-gs%24-%25%402Nu7&\"}",
              "cookie": []
            },
            {
              "_": {
                "postman_previewlanguage": "javascript"
              },
              "id": "c7bfbbd7-3b6c-4200-9215-bb6ce3b00341",
              "name": "200",
              "originalRequest": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "oauth1"
                  ],
                  "host": [
                    "echo",
                    "getpostman",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Authorization",
                    "key": "Authorization",
                    "value": "OAuth oauth_consumer_key=\"RKCGzna7bv9YD57c\",oauth_signature_method=\"HMAC-SHA1\",oauth_timestamp=\"1472121261\",oauth_nonce=\"ki0RQW\",oauth_version=\"1.0\",oauth_signature=\"s0rK92Myxx7ceUBVzlMaxiiXU00%3D\""
                  }
                ],
                "method": "GET"
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "name": "Access-Control-Allow-Credentials",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Credentials",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Headers",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Methods",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Methods",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Origin",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Origin",
                  "value": ""
                },
                {
                  "name": "Access-Control-Expose-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Expose-Headers",
                  "value": ""
                },
                {
                  "name": "Connection",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "name": "Content-Encoding",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Encoding",
                  "value": "gzip"
                },
                {
                  "name": "Content-Length",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Length",
                  "value": "95"
                },
                {
                  "name": "Content-Type",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "name": "Date",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Date",
                  "value": "Thu, 25 Aug 2016 10:34:23 GMT"
                },
                {
                  "name": "ETag",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "ETag",
                  "value": "W/\"4e-Cq3UhvpVSyl6R6204lPVIA\""
                },
                {
                  "name": "Server",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Server",
                  "value": "nginx/1.8.1"
                },
                {
                  "name": "Vary",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Vary",
                  "value": "Accept-Encoding"
                }
              ],
              "body": "{\"status\":\"pass\",\"message\":\"OAuth-1.0a signature verification was successful\"}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "17c097fe-980e-419c-8951-0f95f422f1ec",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response body has json saying passed 'status'\", function () {",
                  "    pm.response.to.have.jsonBody('status', 'pass');",
                  "});"
                ],
                "_lastExecutionId": "bf58dedc-13f2-40c5-9f50-4b4a426055e7"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "OAuth1.0a is a specification that defines a protocol that can be used by one\nservice to access \"protected\" resources (endpoints) on another service. A\nmajor part of OAuth1.0 is HTTP Request Signing. This endpoint allows you to \ncheck whether the request calculation works properly in the client. \n\nThe endpoint supports the HTTP ``Authorization`` header. In case the signature\nverification fails, the endpoint provides the four debug values,\n\n* ``base_uri``\n* ``normalized_param_string``\n* ``base_string``\n* ``signing_key``\n\nFor more details about these parameters, check the [OAuth1.0a Specification](http://oauth.net/core/1.0a/)\n\nIn order to use this endpoint, you can set the following values:\n\n> Consumer Key: ``RKCGzna7bv9YD57c``\n>\n> Consumer Secret: ``D+EdQ-gs$-%@2Nu7``\n\nIf you are using Postman, also check the \"Add params to header\" and \n\"Auto add parameters\" boxes.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "oauth1"
            ],
            "host": [
              "postman-echo",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "OAuth oauth_consumer_key=\"RKCGzna7bv9YD57c\",oauth_signature_method=\"HMAC-SHA1\",oauth_timestamp=\"1591967744\",oauth_nonce=\"ES5Bc8HRJhD\",oauth_signature=\"vzQDn86y6CfYNffGIVNygMp4uTY%3D\"",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.26.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1236f2ea-96d5-45e3-ac80-cae3b71bf309",
              "system": true
            },
            {
              "key": "Host",
              "value": "postman-echo.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "sails.sid=s%3AscISPLu1Zi9rXExvDqjadtOiglzyE28U.dmzmiYpShcv%2BmwPUAqMzL%2BPcKvpuazsFd5i1Rv2yXE0",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "oauth1",
            "oauth1": [
              {
                "type": "any",
                "value": "RKCGzna7bv9YD57c",
                "key": "consumerKey"
              },
              {
                "type": "any",
                "value": "D+EdQ-gs$-%@2Nu7",
                "key": "consumerSecret"
              },
              {
                "type": "any",
                "value": "",
                "key": "token"
              },
              {
                "type": "any",
                "value": "",
                "key": "tokenSecret"
              },
              {
                "type": "any",
                "value": "HMAC-SHA1",
                "key": "signatureMethod"
              },
              {
                "type": "any",
                "value": "",
                "key": "timestamp"
              },
              {
                "type": "any",
                "value": "",
                "key": "nonce"
              },
              {
                "type": "any",
                "value": "",
                "key": "version"
              },
              {
                "type": "any",
                "value": "",
                "key": "realm"
              },
              {
                "type": "any",
                "value": true,
                "key": "addParamsToHeader"
              },
              {
                "type": "any",
                "value": false,
                "key": "addEmptyParamsToSign"
              }
            ]
          }
        },
        "response": {
          "id": "e6f593c8-5845-425f-9e06-736c6a5bd7af",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Fri, 12 Jun 2020 13:15:44 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "78"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "ETag",
              "value": "W/\"4e-dXPS7nEYaa6r6PVjN9RjHjrHaLU\""
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3AC2_Ev_tLKu-QZ5FVqwKlFtyuKEbzlRx1.q%2FrHCvrmdqtePTxUBPl8hiYfs6kMSyMAsaCDyr%2FUHaM; Path=/; HttpOnly"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              112,
              97,
              115,
              115,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              79,
              65,
              117,
              116,
              104,
              45,
              49,
              46,
              48,
              97,
              32,
              115,
              105,
              103,
              110,
              97,
              116,
              117,
              114,
              101,
              32,
              118,
              101,
              114,
              105,
              102,
              105,
              99,
              97,
              116,
              105,
              111,
              110,
              32,
              119,
              97,
              115,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 174,
          "responseSize": 78
        },
        "id": "c24dde0c-a7e6-417e-837b-f9b5d930dd8b",
        "assertions": [
          {
            "assertion": "response is ok",
            "skipped": false
          },
          {
            "assertion": "response body has json saying passed 'status'",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "b1cf602f-2ff7-4a9f-bec7-942c2ef3f677",
          "length": 37,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "76194710-eff8-441a-a974-f6f47d33529e"
        },
        "item": {
          "_": {
            "postman_id": "e5131d4e-be81-44cd-ae43-9679603abef5"
          },
          "id": "e5131d4e-be81-44cd-ae43-9679603abef5",
          "name": "Set Cookies",
          "request": {
            "description": {
              "content": "The cookie setter endpoint accepts a list of cookies and their values as part of URL parameters of a `GET` request. These cookies are saved and can be subsequently retrieved or deleted. The response of this request returns a JSON with all cookies listed.\n\nTo set your own set of cookies, simply replace the URL parameters \"foo1=bar1&foo2=bar2\" with your own set of key-value pairs.",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "cookies",
                "set"
              ],
              "host": [
                "postman-echo",
                "com"
              ],
              "query": [
                {
                  "key": "foo1",
                  "value": "bar1"
                },
                {
                  "key": "foo2",
                  "value": "bar2"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "javascript"
              },
              "id": "e794d462-743a-40cf-a352-8d4ae858944f",
              "name": "Cookies",
              "originalRequest": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "name": "Access-Control-Allow-Credentials",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Credentials",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Headers",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Methods",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Methods",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Origin",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Origin",
                  "value": ""
                },
                {
                  "name": "Connection",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "name": "Content-Encoding",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Encoding",
                  "value": "gzip"
                },
                {
                  "name": "Content-Length",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Length",
                  "value": "51"
                },
                {
                  "name": "Content-Type",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "name": "Date",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Date",
                  "value": "Thu, 29 Oct 2015 06:15:28 GMT"
                },
                {
                  "name": "Server",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Server",
                  "value": "nginx/1.6.2"
                },
                {
                  "name": "Vary",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Vary",
                  "value": "Accept-Encoding"
                },
                {
                  "name": "X-Powered-By",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "X-Powered-By",
                  "value": "Sails <sailsjs.org>"
                }
              ],
              "body": "{\"cookies\":{\"foo1\":\"bar\",\"foo2\":\"bar\"}}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "27f4a328-1cb5-4f4e-a97e-534844e01a20",
                "type": "text/javascript",
                "exec": [
                  "pm.test('response should be 200 or 302', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 302]);",
                  "});",
                  "",
                  "pm.test('the \"foo1\" cookie has correct value', function () {",
                  "    pm.expect(pm.cookies.toObject()).to.have.property('foo1', 'bar1');",
                  "});",
                  "",
                  "pm.test('the \"foo2\" cookie has correct value', function () {",
                  "    pm.expect(pm.cookies.toObject()).to.have.property('foo2', 'bar2');",
                  "});",
                  "",
                  "// response code could be either a 200 or a redirection based on the settings of ",
                  "// the http client. hence we need to handle both cases",
                  "pm.test('response body should be valid', function () {",
                  "    if (pm.response.code === 200) {",
                  "        pm.response.to.have.jsonBody('cookies.foo1', 'bar1')",
                  "            .and.have.jsonBody('cookies.foo2', 'bar2');",
                  "    }",
                  "    else {",
                  "        pm.response.to.have.body('Found. Redirecting to /cookies');",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "62f50b3a-c073-434e-9eb0-a0d3c72c20c7"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "The cookie setter endpoint accepts a list of cookies and their values as part of URL parameters of a `GET` request. These cookies are saved and can be subsequently retrieved or deleted. The response of this request returns a JSON with all cookies listed.\n\nTo set your own set of cookies, simply replace the URL parameters \"foo1=bar1&foo2=bar2\" with your own set of key-value pairs.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "cookies",
              "set"
            ],
            "host": [
              "postman-echo",
              "com"
            ],
            "query": [
              {
                "key": "foo1",
                "value": "bar1"
              },
              {
                "key": "foo2",
                "value": "bar2"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.26.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "5cb5c30c-a712-4819-893a-1992a8bad1ba",
              "system": true
            },
            {
              "key": "Host",
              "value": "postman-echo.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "sails.sid=s%3Al9au7SBBZt8MWXjSz8paaHJfCmXjZnbm.fLFc3%2BaXCmdVG%2F1BXN9DyprDL6tdz7gRx2cQ%2BO9YriU; foo1=bar1; foo2=bar2",
              "system": true
            },
            {
              "key": "Referer",
              "value": "https://postman-echo.com/cookies/set?foo1=bar1&foo2=bar2",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "66ba048e-b84c-4d90-8af2-ef8108d43f86",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Fri, 12 Jun 2020 13:15:45 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "41"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "ETag",
              "value": "W/\"29-JRHqGq7F5tGozH71XMqVk/pLueo\""
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3AqjRvxl5IaJTIN20JlGmtTMB3bBbmU2SZ.lv5U9ZO8TxqcZo2Z%2F1%2BilgYJ0Fu6HVXGlS8KonqdOLE; Path=/; HttpOnly"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              99,
              111,
              111,
              107,
              105,
              101,
              115,
              34,
              58,
              123,
              34,
              102,
              111,
              111,
              49,
              34,
              58,
              34,
              98,
              97,
              114,
              49,
              34,
              44,
              34,
              102,
              111,
              111,
              50,
              34,
              58,
              34,
              98,
              97,
              114,
              50,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 606,
          "responseSize": 41
        },
        "id": "e5131d4e-be81-44cd-ae43-9679603abef5",
        "assertions": [
          {
            "assertion": "response should be 200 or 302",
            "skipped": false
          },
          {
            "assertion": "the \"foo1\" cookie has correct value",
            "skipped": false
          },
          {
            "assertion": "the \"foo2\" cookie has correct value",
            "skipped": false
          },
          {
            "assertion": "response body should be valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "398956dd-be81-4592-9cef-19d69671aa2c",
          "length": 37,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "efd63ea9-ef2f-4b66-a889-1d044f247b2e"
        },
        "item": {
          "_": {
            "postman_id": "fb8bb1b4-8814-405a-bd5b-f1606baa0e5d"
          },
          "id": "fb8bb1b4-8814-405a-bd5b-f1606baa0e5d",
          "name": "Get Cookies",
          "request": {
            "description": {
              "content": "Use this endpoint to get a list of all cookies that are stored with respect to this domain. Whatever key-value pairs that has been previously set by calling the \"Set Cookies\" endpoint, will be returned as response JSON.",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "cookies"
              ],
              "host": [
                "postman-echo",
                "com"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "javascript"
              },
              "id": "c4339d54-0653-4b0b-93dd-1f9a62852883",
              "name": "Cookies",
              "originalRequest": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "name": "Access-Control-Allow-Credentials",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Credentials",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Headers",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Methods",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Methods",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Origin",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Origin",
                  "value": ""
                },
                {
                  "name": "Connection",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "name": "Content-Encoding",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Encoding",
                  "value": "gzip"
                },
                {
                  "name": "Content-Length",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Length",
                  "value": "46"
                },
                {
                  "name": "Content-Type",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "name": "Date",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Date",
                  "value": "Thu, 29 Oct 2015 06:16:29 GMT"
                },
                {
                  "name": "Server",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Server",
                  "value": "nginx/1.6.2"
                },
                {
                  "name": "Vary",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Vary",
                  "value": "Accept-Encoding"
                },
                {
                  "name": "X-Powered-By",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "X-Powered-By",
                  "value": "Sails <sailsjs.org>"
                }
              ],
              "body": "{\"cookies\":{\"foo2\":\"bar\"}}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "44843f19-d9b4-46f9-b9b1-8ab4c4f5eed5",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('the \"foo1\" cookie has correct value', function () {",
                  "    pm.expect(pm.cookies.toObject()).to.have.property('foo1', 'bar1');",
                  "});",
                  "",
                  "pm.test('the \"foo2\" cookie has correct value', function () {",
                  "    pm.expect(pm.cookies.toObject()).to.have.property('foo2', 'bar2');",
                  "});",
                  "",
                  "pm.test('response body should be valid', function () {",
                  "    pm.response.to.have.jsonBody('cookies.foo1', 'bar1');",
                  "    pm.response.to.have.jsonBody('cookies.foo2', 'bar2');",
                  "});"
                ],
                "_lastExecutionId": "484b6b76-d69f-48b7-a840-0ade1993fca0"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Use this endpoint to get a list of all cookies that are stored with respect to this domain. Whatever key-value pairs that has been previously set by calling the \"Set Cookies\" endpoint, will be returned as response JSON.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "cookies"
            ],
            "host": [
              "postman-echo",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.26.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6136b642-4a33-401c-b1d0-36ed3aab723b",
              "system": true
            },
            {
              "key": "Host",
              "value": "postman-echo.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "sails.sid=s%3AqjRvxl5IaJTIN20JlGmtTMB3bBbmU2SZ.lv5U9ZO8TxqcZo2Z%2F1%2BilgYJ0Fu6HVXGlS8KonqdOLE; foo1=bar1; foo2=bar2",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "08a9dd7c-bd51-4afe-b49d-b4ec25f0d318",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Fri, 12 Jun 2020 13:15:45 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "41"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "ETag",
              "value": "W/\"29-JRHqGq7F5tGozH71XMqVk/pLueo\""
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3AesMgaQiGZsdiAMGKrYu04wsyZ4KArIZ5.s9V3URNSLcES1VzHDynjI4nYwI6mj6Ddh1NzEp1TUJk; Path=/; HttpOnly"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              99,
              111,
              111,
              107,
              105,
              101,
              115,
              34,
              58,
              123,
              34,
              102,
              111,
              111,
              49,
              34,
              58,
              34,
              98,
              97,
              114,
              49,
              34,
              44,
              34,
              102,
              111,
              111,
              50,
              34,
              58,
              34,
              98,
              97,
              114,
              50,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 120,
          "responseSize": 41
        },
        "id": "fb8bb1b4-8814-405a-bd5b-f1606baa0e5d",
        "assertions": [
          {
            "assertion": "response is ok",
            "skipped": false
          },
          {
            "assertion": "the \"foo1\" cookie has correct value",
            "skipped": false
          },
          {
            "assertion": "the \"foo2\" cookie has correct value",
            "skipped": false
          },
          {
            "assertion": "response body should be valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "8efd0a85-e656-4a0c-b34b-d36440dab7b3",
          "length": 37,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "857cf632-7ef4-43e7-91c1-6f1aba19dd05"
        },
        "item": {
          "_": {
            "postman_id": "3f913e70-6ba8-4252-a3b1-5d4faa5f4d0b"
          },
          "id": "3f913e70-6ba8-4252-a3b1-5d4faa5f4d0b",
          "name": "Delete Cookies",
          "request": {
            "description": {
              "content": "One or more cookies that has been set for this domain can be deleted by providing the cookie names as part of the URL parameter. The response of this request is a JSON containing the list of currently set cookies.",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "cookies",
                "delete"
              ],
              "host": [
                "postman-echo",
                "com"
              ],
              "query": [
                {
                  "key": "foo1",
                  "value": null
                },
                {
                  "key": "foo2",
                  "value": null
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "javascript"
              },
              "id": "8b401bd4-e180-433a-a170-a0eeafb43735",
              "name": "Cookies Response",
              "originalRequest": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "name": "Access-Control-Allow-Credentials",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Credentials",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Headers",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Methods",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Methods",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Origin",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Origin",
                  "value": ""
                },
                {
                  "name": "Connection",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "name": "Content-Encoding",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Encoding",
                  "value": "gzip"
                },
                {
                  "name": "Content-Length",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Length",
                  "value": "46"
                },
                {
                  "name": "Content-Type",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "name": "Date",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Date",
                  "value": "Thu, 29 Oct 2015 06:16:00 GMT"
                },
                {
                  "name": "Server",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Server",
                  "value": "nginx/1.6.2"
                },
                {
                  "name": "Vary",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Vary",
                  "value": "Accept-Encoding"
                },
                {
                  "name": "X-Powered-By",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "X-Powered-By",
                  "value": "Sails <sailsjs.org>"
                }
              ],
              "body": "{\"cookies\":{\"foo2\":\"bar\"}}",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "56bb7b1b-6288-4525-a38c-2ab302eb569c",
                "type": "text/javascript",
                "exec": [
                  "pm.test('response should be 200 or 302', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 302]);",
                  "});",
                  "",
                  "pm.test('the \"foo1\" cookie should not be present', function () {",
                  "    pm.expect(pm.cookies.toObject()).to.not.have.property('foo1');",
                  "});",
                  "",
                  "pm.test('the \"foo2\" cookie should not be present', function () {",
                  "    pm.expect(pm.cookies.toObject()).to.not.have.property('foo2');",
                  "});",
                  "",
                  "// response code could be either a 200 or a redirection based on the settings of ",
                  "// the http client. hence we need to handle both cases",
                  "pm.test('response body should be valid', function () {",
                  "    if (pm.response.code === 200) {",
                  "        pm.response.to.not.have.jsonBody('cookies.foo1');",
                  "        pm.response.to.not.have.jsonBody('cookies.foo2');",
                  "    }",
                  "    else {",
                  "        pm.response.to.have.body('Found. Redirecting to /cookies');",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "11913f8d-791c-4661-81e5-ec29dd70b2df"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "One or more cookies that has been set for this domain can be deleted by providing the cookie names as part of the URL parameter. The response of this request is a JSON containing the list of currently set cookies.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "cookies",
              "delete"
            ],
            "host": [
              "postman-echo",
              "com"
            ],
            "query": [
              {
                "key": "foo1",
                "value": null
              },
              {
                "key": "foo2",
                "value": null
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.26.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7d4a1c30-5296-488e-848d-672504fc3da6",
              "system": true
            },
            {
              "key": "Host",
              "value": "postman-echo.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "sails.sid=s%3AVwnnlB8_L4nQb_uweHJwijUbYrcUFfd0.r3aDjQSzT5IEJ95oOwgAK07gnC%2FWbWb18A6O4VMXAbY",
              "system": true
            },
            {
              "key": "Referer",
              "value": "https://postman-echo.com/cookies/delete?foo1&foo2",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "2284fcb9-da93-4114-b283-465146258156",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Fri, 12 Jun 2020 13:15:45 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "14"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "ETag",
              "value": "W/\"e-HwHgMXOuquwNiBd0Mx9LHc/Rmfk\""
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3ApLuTWwz77lV-FHGJYFFQ7rtQFNSo6xxO.UhDO8WU1skiSJD1kfxCL0RHbIRMhPapwPD4Y8hymUP0; Path=/; HttpOnly"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              99,
              111,
              111,
              107,
              105,
              101,
              115,
              34,
              58,
              123,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 303,
          "responseSize": 14
        },
        "id": "3f913e70-6ba8-4252-a3b1-5d4faa5f4d0b",
        "assertions": [
          {
            "assertion": "response should be 200 or 302",
            "skipped": false
          },
          {
            "assertion": "the \"foo1\" cookie should not be present",
            "skipped": false
          },
          {
            "assertion": "the \"foo2\" cookie should not be present",
            "skipped": false
          },
          {
            "assertion": "response body should be valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "a6c37571-9839-4eab-87a5-c4ac44ce62a8",
          "length": 37,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "7b59d2b4-67d4-4ba1-9807-23638c7766c8"
        },
        "item": {
          "_": {
            "postman_id": "f2f62e92-0f71-4c99-8e85-1d56b2baeb27"
          },
          "id": "f2f62e92-0f71-4c99-8e85-1d56b2baeb27",
          "name": "Response Status Code",
          "request": {
            "description": {
              "content": "This endpoint allows one to instruct the server which status code to respond with.\n\nEvery response is accompanied by a status code. The status code provides a summary of the nature of response sent by the server. For example, a status code of `200` means everything is okay with the response and a code of `404` implies that the requested URL does not exist on server. \nA list of all valid HTTP status code can be found at the [List of Status Codes](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) wikipedia article. When using Postman, the response status code is described for easy reference.\n\nNote that if an invalid status code is requested to be sent, the server returns a status code of `400 Bad Request`.",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "status",
                "200"
              ],
              "host": [
                "postman-echo",
                "com"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "javascript"
              },
              "id": "79471268-5417-450a-ad71-28d08ad8f9f7",
              "name": "200",
              "originalRequest": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "status",
                    "200"
                  ],
                  "host": [
                    "echo",
                    "getpostman",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "name": "Access-Control-Allow-Credentials",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Credentials",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Headers",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Methods",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Methods",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Origin",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Origin",
                  "value": ""
                },
                {
                  "name": "Connection",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "name": "Content-Length",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Length",
                  "value": "14"
                },
                {
                  "name": "Content-Type",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "name": "Date",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Date",
                  "value": "Thu, 31 Mar 2016 11:58:47 GMT"
                },
                {
                  "name": "ETag",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "ETag",
                  "value": "W/\"e-1056260003\""
                },
                {
                  "name": "Server",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Server",
                  "value": "nginx/1.6.2"
                },
                {
                  "name": "Vary",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Vary",
                  "value": "Accept-Encoding"
                },
                {
                  "name": "X-Powered-By",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "X-Powered-By",
                  "value": "Sails <sailsjs.org>"
                }
              ],
              "body": "{\"status\":200}",
              "cookie": [
                {
                  "name": "getpostmanlogin",
                  "expires": null,
                  "domain": ".getpostman.com",
                  "path": "/",
                  "secure": false,
                  "httpOnly": false,
                  "hostOnly": false,
                  "session": false,
                  "value": "yes"
                },
                {
                  "name": "postman.sid",
                  "expires": null,
                  "domain": ".getpostman.com",
                  "path": "/",
                  "secure": false,
                  "httpOnly": false,
                  "hostOnly": false,
                  "session": false,
                  "value": "df0c0256028d7ec4d641f766104a9571a8e249685bbc667d7cee030bbf44d3209495c70c03248e31e678a93812591d5e12187a8e99bf6bc5e80c40903f6ff6226938f24e413c0ffa613a7372064ec44a8594e8d3ede6945e34394f369573feeebc4a73a3e24b8c9ac18a53704addb5fd3f71f1ede488ff551feb059e9c1fb208164814e45e0312c4df8ea6e83c26702f42ae634c6afbe82d57c857bbf5598b5527961c1c28688dc2580070a4389f0cf4ec0a179b5b9c11b2ecbaa5460d374065bf5c7a3add9505df0fa89acb9f227f05ed2d4c6b58c39d6d728bd49f6f323ae67d4a75882aa7682f5d6fc5b981ba411d94aa93970bfaefa1953a73e440d50d012b5f288975c888e2345ee7777e746fb5aed3a7b2dbc087c6456621aa78c24a3c17c5f96cf59844933249a352f631e2008cffac6faf06d0e253dcc01cf0067bf56c1fbc5ed61fec1861b60c5accf35ffc2e56154a113004fa1db9d7171c3af8fc063918554092f5"
                },
                {
                  "name": "_ga",
                  "expires": null,
                  "domain": ".echo.getpostman.com",
                  "path": "/",
                  "secure": false,
                  "httpOnly": false,
                  "hostOnly": false,
                  "session": false,
                  "value": "GA1.3.1703443399.1459422978"
                },
                {
                  "name": "sails.sid",
                  "expires": null,
                  "domain": "echo.getpostman.com",
                  "path": "/",
                  "secure": false,
                  "httpOnly": true,
                  "hostOnly": true,
                  "session": true,
                  "value": "s%3AvuHU0EKeDbyNjVrEc7U30dMPzVu8CRaD.GOV1H9olcVzXqrwqP%2BC%2B6MVj2UczXivcN00jgPoDYfs"
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "dd731543-1b42-418c-91ee-08a3c28d37a8",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response has valid json body\", function () {",
                  "    pm.response.to.have.jsonBody('status');",
                  "});",
                  "",
                  "// additional sanity tests",
                  "pm.test(\"status in response body must match the one in request\", function () {",
                  "    pm.response.to.have.jsonBody('status', Number(_.get(pm.request, 'url.path[1]')));",
                  "});"
                ],
                "_lastExecutionId": "10acb2bb-9be0-4b26-b70e-adba3cf7bd2a"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This endpoint allows one to instruct the server which status code to respond with.\n\nEvery response is accompanied by a status code. The status code provides a summary of the nature of response sent by the server. For example, a status code of `200` means everything is okay with the response and a code of `404` implies that the requested URL does not exist on server. \nA list of all valid HTTP status code can be found at the [List of Status Codes](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) wikipedia article. When using Postman, the response status code is described for easy reference.\n\nNote that if an invalid status code is requested to be sent, the server returns a status code of `400 Bad Request`.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "status",
              "200"
            ],
            "host": [
              "postman-echo",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.26.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "0537c370-9c77-4c8a-82fe-4cde761bba5b",
              "system": true
            },
            {
              "key": "Host",
              "value": "postman-echo.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "sails.sid=s%3ApLuTWwz77lV-FHGJYFFQ7rtQFNSo6xxO.UhDO8WU1skiSJD1kfxCL0RHbIRMhPapwPD4Y8hymUP0",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "85ff458e-3d91-4ba0-a62e-74aaabb49a05",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Fri, 12 Jun 2020 13:15:45 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "14"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "ETag",
              "value": "W/\"e-QlsUp1vTYvBgYHrHCBYe2n/q268\""
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3AbgkNAgFGAwt5oIpmeSD3HrlMIjXRvLzP.n1%2F65%2B76FFlozMjynBtLmW0wjRh2E50c3CVm1T7fXzU; Path=/; HttpOnly"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              50,
              48,
              48,
              125
            ]
          },
          "cookie": [],
          "responseTime": 120,
          "responseSize": 14
        },
        "id": "f2f62e92-0f71-4c99-8e85-1d56b2baeb27",
        "assertions": [
          {
            "assertion": "response is ok",
            "skipped": false
          },
          {
            "assertion": "response has valid json body",
            "skipped": false
          },
          {
            "assertion": "status in response body must match the one in request",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "9c7e18c0-ddee-4c86-b007-a0f369c48ce0",
          "length": 37,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "a17923ee-26bf-41b8-a7c9-871d090e436f"
        },
        "item": {
          "_": {
            "postman_id": "45562bc6-8571-48db-adfa-105f1be68a30"
          },
          "id": "45562bc6-8571-48db-adfa-105f1be68a30",
          "name": "Streamed Response",
          "request": {
            "description": {
              "content": "This endpoint allows one to recieve streaming http response using [chunked transfer encoding](https://en.wikipedia.org/wiki/Chunked_transfer_encoding) of a configurable length.\n\nA streaming response does not wait for the entire response to be generated on server before flushing it out. This implies that for a fairly large response, parts of it can be streamed to the requestee as and when it is generated on server. The client can then take actions of processing this partially received data.",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "stream",
                "5"
              ],
              "host": [
                "postman-echo",
                "com"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2e1210f5-c25a-42e3-8091-e8489054af4e",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response has chunked transfer encoding header\", function () {",
                  "    pm.response.to.have.header('transfer-encoding', 'chunked');",
                  "});"
                ],
                "_lastExecutionId": "750e9cb5-bbe5-4a35-9589-7833ea666975"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This endpoint allows one to recieve streaming http response using [chunked transfer encoding](https://en.wikipedia.org/wiki/Chunked_transfer_encoding) of a configurable length.\n\nA streaming response does not wait for the entire response to be generated on server before flushing it out. This implies that for a fairly large response, parts of it can be streamed to the requestee as and when it is generated on server. The client can then take actions of processing this partially received data.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "stream",
              "5"
            ],
            "host": [
              "postman-echo",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.26.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6bac54ad-3c13-432b-8a7e-d751e55b078d",
              "system": true
            },
            {
              "key": "Host",
              "value": "postman-echo.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "sails.sid=s%3AbgkNAgFGAwt5oIpmeSD3HrlMIjXRvLzP.n1%2F65%2B76FFlozMjynBtLmW0wjRh2E50c3CVm1T7fXzU",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "2f798f09-ef71-46f4-8c7e-333b628c7866",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Fri, 12 Jun 2020 13:15:45 GMT"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3AAPM5wmZaFxbHCPKS5lNJova_NOCurxTf.SLIVUSqjRBBGYNhSRqZ0NBEVFgMmI3BZTiiTN%2BmUaeo; Path=/; HttpOnly"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              10,
              32,
              32,
              34,
              97,
              114,
              103,
              115,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              34,
              58,
              32,
              34,
              53,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              34,
              104,
              101,
              97,
              100,
              101,
              114,
              115,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              114,
              111,
              116,
              111,
              34,
              58,
              32,
              34,
              104,
              116,
              116,
              112,
              115,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              111,
              114,
              116,
              34,
              58,
              32,
              34,
              52,
              52,
              51,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              104,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              120,
              45,
              97,
              109,
              122,
              110,
              45,
              116,
              114,
              97,
              99,
              101,
              45,
              105,
              100,
              34,
              58,
              32,
              34,
              82,
              111,
              111,
              116,
              61,
              49,
              45,
              53,
              101,
              101,
              51,
              56,
              48,
              48,
              49,
              45,
              101,
              102,
              97,
              50,
              100,
              102,
              53,
              100,
              50,
              53,
              99,
              48,
              56,
              56,
              57,
              54,
              56,
              54,
              101,
              100,
              97,
              101,
              51,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              117,
              115,
              101,
              114,
              45,
              97,
              103,
              101,
              110,
              116,
              34,
              58,
              32,
              34,
              80,
              111,
              115,
              116,
              109,
              97,
              110,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              47,
              55,
              46,
              50,
              54,
              46,
              48,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              34,
              58,
              32,
              34,
              42,
              47,
              42,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              97,
              99,
              104,
              101,
              45,
              99,
              111,
              110,
              116,
              114,
              111,
              108,
              34,
              58,
              32,
              34,
              110,
              111,
              45,
              99,
              97,
              99,
              104,
              101,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              58,
              32,
              34,
              54,
              98,
              97,
              99,
              53,
              52,
              97,
              100,
              45,
              51,
              99,
              49,
              51,
              45,
              52,
              51,
              50,
              98,
              45,
              56,
              97,
              55,
              101,
              45,
              100,
              55,
              53,
              49,
              101,
              53,
              53,
              98,
              48,
              55,
              56,
              100,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              45,
              101,
              110,
              99,
              111,
              100,
              105,
              110,
              103,
              34,
              58,
              32,
              34,
              103,
              122,
              105,
              112,
              44,
              32,
              100,
              101,
              102,
              108,
              97,
              116,
              101,
              44,
              32,
              98,
              114,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              111,
              107,
              105,
              101,
              34,
              58,
              32,
              34,
              115,
              97,
              105,
              108,
              115,
              46,
              115,
              105,
              100,
              61,
              115,
              37,
              51,
              65,
              98,
              103,
              107,
              78,
              65,
              103,
              70,
              71,
              65,
              119,
              116,
              53,
              111,
              73,
              112,
              109,
              101,
              83,
              68,
              51,
              72,
              114,
              108,
              77,
              73,
              106,
              88,
              82,
              118,
              76,
              122,
              80,
              46,
              110,
              49,
              37,
              50,
              70,
              54,
              53,
              37,
              50,
              66,
              55,
              54,
              70,
              70,
              108,
              111,
              122,
              77,
              106,
              121,
              110,
              66,
              116,
              76,
              109,
              87,
              48,
              119,
              106,
              82,
              104,
              50,
              69,
              53,
              48,
              99,
              51,
              67,
              86,
              109,
              49,
              84,
              55,
              102,
              88,
              122,
              85,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              34,
              117,
              114,
              108,
              34,
              58,
              32,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              47,
              115,
              116,
              114,
              101,
              97,
              109,
              47,
              53,
              34,
              10,
              125,
              123,
              10,
              32,
              32,
              34,
              97,
              114,
              103,
              115,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              34,
              58,
              32,
              34,
              53,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              34,
              104,
              101,
              97,
              100,
              101,
              114,
              115,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              114,
              111,
              116,
              111,
              34,
              58,
              32,
              34,
              104,
              116,
              116,
              112,
              115,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              111,
              114,
              116,
              34,
              58,
              32,
              34,
              52,
              52,
              51,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              104,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              120,
              45,
              97,
              109,
              122,
              110,
              45,
              116,
              114,
              97,
              99,
              101,
              45,
              105,
              100,
              34,
              58,
              32,
              34,
              82,
              111,
              111,
              116,
              61,
              49,
              45,
              53,
              101,
              101,
              51,
              56,
              48,
              48,
              49,
              45,
              101,
              102,
              97,
              50,
              100,
              102,
              53,
              100,
              50,
              53,
              99,
              48,
              56,
              56,
              57,
              54,
              56,
              54,
              101,
              100,
              97,
              101,
              51,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              117,
              115,
              101,
              114,
              45,
              97,
              103,
              101,
              110,
              116,
              34,
              58,
              32,
              34,
              80,
              111,
              115,
              116,
              109,
              97,
              110,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              47,
              55,
              46,
              50,
              54,
              46,
              48,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              34,
              58,
              32,
              34,
              42,
              47,
              42,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              97,
              99,
              104,
              101,
              45,
              99,
              111,
              110,
              116,
              114,
              111,
              108,
              34,
              58,
              32,
              34,
              110,
              111,
              45,
              99,
              97,
              99,
              104,
              101,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              58,
              32,
              34,
              54,
              98,
              97,
              99,
              53,
              52,
              97,
              100,
              45,
              51,
              99,
              49,
              51,
              45,
              52,
              51,
              50,
              98,
              45,
              56,
              97,
              55,
              101,
              45,
              100,
              55,
              53,
              49,
              101,
              53,
              53,
              98,
              48,
              55,
              56,
              100,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              45,
              101,
              110,
              99,
              111,
              100,
              105,
              110,
              103,
              34,
              58,
              32,
              34,
              103,
              122,
              105,
              112,
              44,
              32,
              100,
              101,
              102,
              108,
              97,
              116,
              101,
              44,
              32,
              98,
              114,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              111,
              107,
              105,
              101,
              34,
              58,
              32,
              34,
              115,
              97,
              105,
              108,
              115,
              46,
              115,
              105,
              100,
              61,
              115,
              37,
              51,
              65,
              98,
              103,
              107,
              78,
              65,
              103,
              70,
              71,
              65,
              119,
              116,
              53,
              111,
              73,
              112,
              109,
              101,
              83,
              68,
              51,
              72,
              114,
              108,
              77,
              73,
              106,
              88,
              82,
              118,
              76,
              122,
              80,
              46,
              110,
              49,
              37,
              50,
              70,
              54,
              53,
              37,
              50,
              66,
              55,
              54,
              70,
              70,
              108,
              111,
              122,
              77,
              106,
              121,
              110,
              66,
              116,
              76,
              109,
              87,
              48,
              119,
              106,
              82,
              104,
              50,
              69,
              53,
              48,
              99,
              51,
              67,
              86,
              109,
              49,
              84,
              55,
              102,
              88,
              122,
              85,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              34,
              117,
              114,
              108,
              34,
              58,
              32,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              47,
              115,
              116,
              114,
              101,
              97,
              109,
              47,
              53,
              34,
              10,
              125,
              123,
              10,
              32,
              32,
              34,
              97,
              114,
              103,
              115,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              34,
              58,
              32,
              34,
              53,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              34,
              104,
              101,
              97,
              100,
              101,
              114,
              115,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              114,
              111,
              116,
              111,
              34,
              58,
              32,
              34,
              104,
              116,
              116,
              112,
              115,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              111,
              114,
              116,
              34,
              58,
              32,
              34,
              52,
              52,
              51,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              104,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              120,
              45,
              97,
              109,
              122,
              110,
              45,
              116,
              114,
              97,
              99,
              101,
              45,
              105,
              100,
              34,
              58,
              32,
              34,
              82,
              111,
              111,
              116,
              61,
              49,
              45,
              53,
              101,
              101,
              51,
              56,
              48,
              48,
              49,
              45,
              101,
              102,
              97,
              50,
              100,
              102,
              53,
              100,
              50,
              53,
              99,
              48,
              56,
              56,
              57,
              54,
              56,
              54,
              101,
              100,
              97,
              101,
              51,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              117,
              115,
              101,
              114,
              45,
              97,
              103,
              101,
              110,
              116,
              34,
              58,
              32,
              34,
              80,
              111,
              115,
              116,
              109,
              97,
              110,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              47,
              55,
              46,
              50,
              54,
              46,
              48,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              34,
              58,
              32,
              34,
              42,
              47,
              42,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              97,
              99,
              104,
              101,
              45,
              99,
              111,
              110,
              116,
              114,
              111,
              108,
              34,
              58,
              32,
              34,
              110,
              111,
              45,
              99,
              97,
              99,
              104,
              101,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              58,
              32,
              34,
              54,
              98,
              97,
              99,
              53,
              52,
              97,
              100,
              45,
              51,
              99,
              49,
              51,
              45,
              52,
              51,
              50,
              98,
              45,
              56,
              97,
              55,
              101,
              45,
              100,
              55,
              53,
              49,
              101,
              53,
              53,
              98,
              48,
              55,
              56,
              100,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              45,
              101,
              110,
              99,
              111,
              100,
              105,
              110,
              103,
              34,
              58,
              32,
              34,
              103,
              122,
              105,
              112,
              44,
              32,
              100,
              101,
              102,
              108,
              97,
              116,
              101,
              44,
              32,
              98,
              114,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              111,
              107,
              105,
              101,
              34,
              58,
              32,
              34,
              115,
              97,
              105,
              108,
              115,
              46,
              115,
              105,
              100,
              61,
              115,
              37,
              51,
              65,
              98,
              103,
              107,
              78,
              65,
              103,
              70,
              71,
              65,
              119,
              116,
              53,
              111,
              73,
              112,
              109,
              101,
              83,
              68,
              51,
              72,
              114,
              108,
              77,
              73,
              106,
              88,
              82,
              118,
              76,
              122,
              80,
              46,
              110,
              49,
              37,
              50,
              70,
              54,
              53,
              37,
              50,
              66,
              55,
              54,
              70,
              70,
              108,
              111,
              122,
              77,
              106,
              121,
              110,
              66,
              116,
              76,
              109,
              87,
              48,
              119,
              106,
              82,
              104,
              50,
              69,
              53,
              48,
              99,
              51,
              67,
              86,
              109,
              49,
              84,
              55,
              102,
              88,
              122,
              85,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              34,
              117,
              114,
              108,
              34,
              58,
              32,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              47,
              115,
              116,
              114,
              101,
              97,
              109,
              47,
              53,
              34,
              10,
              125,
              123,
              10,
              32,
              32,
              34,
              97,
              114,
              103,
              115,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              34,
              58,
              32,
              34,
              53,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              34,
              104,
              101,
              97,
              100,
              101,
              114,
              115,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              114,
              111,
              116,
              111,
              34,
              58,
              32,
              34,
              104,
              116,
              116,
              112,
              115,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              111,
              114,
              116,
              34,
              58,
              32,
              34,
              52,
              52,
              51,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              104,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              120,
              45,
              97,
              109,
              122,
              110,
              45,
              116,
              114,
              97,
              99,
              101,
              45,
              105,
              100,
              34,
              58,
              32,
              34,
              82,
              111,
              111,
              116,
              61,
              49,
              45,
              53,
              101,
              101,
              51,
              56,
              48,
              48,
              49,
              45,
              101,
              102,
              97,
              50,
              100,
              102,
              53,
              100,
              50,
              53,
              99,
              48,
              56,
              56,
              57,
              54,
              56,
              54,
              101,
              100,
              97,
              101,
              51,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              117,
              115,
              101,
              114,
              45,
              97,
              103,
              101,
              110,
              116,
              34,
              58,
              32,
              34,
              80,
              111,
              115,
              116,
              109,
              97,
              110,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              47,
              55,
              46,
              50,
              54,
              46,
              48,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              34,
              58,
              32,
              34,
              42,
              47,
              42,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              97,
              99,
              104,
              101,
              45,
              99,
              111,
              110,
              116,
              114,
              111,
              108,
              34,
              58,
              32,
              34,
              110,
              111,
              45,
              99,
              97,
              99,
              104,
              101,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              58,
              32,
              34,
              54,
              98,
              97,
              99,
              53,
              52,
              97,
              100,
              45,
              51,
              99,
              49,
              51,
              45,
              52,
              51,
              50,
              98,
              45,
              56,
              97,
              55,
              101,
              45,
              100,
              55,
              53,
              49,
              101,
              53,
              53,
              98,
              48,
              55,
              56,
              100,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              45,
              101,
              110,
              99,
              111,
              100,
              105,
              110,
              103,
              34,
              58,
              32,
              34,
              103,
              122,
              105,
              112,
              44,
              32,
              100,
              101,
              102,
              108,
              97,
              116,
              101,
              44,
              32,
              98,
              114,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              111,
              107,
              105,
              101,
              34,
              58,
              32,
              34,
              115,
              97,
              105,
              108,
              115,
              46,
              115,
              105,
              100,
              61,
              115,
              37,
              51,
              65,
              98,
              103,
              107,
              78,
              65,
              103,
              70,
              71,
              65,
              119,
              116,
              53,
              111,
              73,
              112,
              109,
              101,
              83,
              68,
              51,
              72,
              114,
              108,
              77,
              73,
              106,
              88,
              82,
              118,
              76,
              122,
              80,
              46,
              110,
              49,
              37,
              50,
              70,
              54,
              53,
              37,
              50,
              66,
              55,
              54,
              70,
              70,
              108,
              111,
              122,
              77,
              106,
              121,
              110,
              66,
              116,
              76,
              109,
              87,
              48,
              119,
              106,
              82,
              104,
              50,
              69,
              53,
              48,
              99,
              51,
              67,
              86,
              109,
              49,
              84,
              55,
              102,
              88,
              122,
              85,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              34,
              117,
              114,
              108,
              34,
              58,
              32,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              47,
              115,
              116,
              114,
              101,
              97,
              109,
              47,
              53,
              34,
              10,
              125,
              123,
              10,
              32,
              32,
              34,
              97,
              114,
              103,
              115,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              110,
              34,
              58,
              32,
              34,
              53,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              34,
              104,
              101,
              97,
              100,
              101,
              114,
              115,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              114,
              111,
              116,
              111,
              34,
              58,
              32,
              34,
              104,
              116,
              116,
              112,
              115,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              111,
              114,
              116,
              34,
              58,
              32,
              34,
              52,
              52,
              51,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              104,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              120,
              45,
              97,
              109,
              122,
              110,
              45,
              116,
              114,
              97,
              99,
              101,
              45,
              105,
              100,
              34,
              58,
              32,
              34,
              82,
              111,
              111,
              116,
              61,
              49,
              45,
              53,
              101,
              101,
              51,
              56,
              48,
              48,
              49,
              45,
              101,
              102,
              97,
              50,
              100,
              102,
              53,
              100,
              50,
              53,
              99,
              48,
              56,
              56,
              57,
              54,
              56,
              54,
              101,
              100,
              97,
              101,
              51,
              49,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              117,
              115,
              101,
              114,
              45,
              97,
              103,
              101,
              110,
              116,
              34,
              58,
              32,
              34,
              80,
              111,
              115,
              116,
              109,
              97,
              110,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              47,
              55,
              46,
              50,
              54,
              46,
              48,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              34,
              58,
              32,
              34,
              42,
              47,
              42,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              97,
              99,
              104,
              101,
              45,
              99,
              111,
              110,
              116,
              114,
              111,
              108,
              34,
              58,
              32,
              34,
              110,
              111,
              45,
              99,
              97,
              99,
              104,
              101,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              58,
              32,
              34,
              54,
              98,
              97,
              99,
              53,
              52,
              97,
              100,
              45,
              51,
              99,
              49,
              51,
              45,
              52,
              51,
              50,
              98,
              45,
              56,
              97,
              55,
              101,
              45,
              100,
              55,
              53,
              49,
              101,
              53,
              53,
              98,
              48,
              55,
              56,
              100,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              45,
              101,
              110,
              99,
              111,
              100,
              105,
              110,
              103,
              34,
              58,
              32,
              34,
              103,
              122,
              105,
              112,
              44,
              32,
              100,
              101,
              102,
              108,
              97,
              116,
              101,
              44,
              32,
              98,
              114,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              111,
              107,
              105,
              101,
              34,
              58,
              32,
              34,
              115,
              97,
              105,
              108,
              115,
              46,
              115,
              105,
              100,
              61,
              115,
              37,
              51,
              65,
              98,
              103,
              107,
              78,
              65,
              103,
              70,
              71,
              65,
              119,
              116,
              53,
              111,
              73,
              112,
              109,
              101,
              83,
              68,
              51,
              72,
              114,
              108,
              77,
              73,
              106,
              88,
              82,
              118,
              76,
              122,
              80,
              46,
              110,
              49,
              37,
              50,
              70,
              54,
              53,
              37,
              50,
              66,
              55,
              54,
              70,
              70,
              108,
              111,
              122,
              77,
              106,
              121,
              110,
              66,
              116,
              76,
              109,
              87,
              48,
              119,
              106,
              82,
              104,
              50,
              69,
              53,
              48,
              99,
              51,
              67,
              86,
              109,
              49,
              84,
              55,
              102,
              88,
              122,
              85,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              34,
              117,
              114,
              108,
              34,
              58,
              32,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              47,
              115,
              116,
              114,
              101,
              97,
              109,
              47,
              53,
              34,
              10,
              125
            ]
          },
          "cookie": [],
          "responseTime": 144,
          "responseSize": 2875
        },
        "id": "45562bc6-8571-48db-adfa-105f1be68a30",
        "assertions": [
          {
            "assertion": "response is ok",
            "skipped": false
          },
          {
            "assertion": "response has chunked transfer encoding header",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "4bd0009b-90b5-4366-bdd4-94d243d4892b",
          "length": 37,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "53a27d42-a756-4562-a861-811d228fc8d3"
        },
        "item": {
          "_": {
            "postman_id": "19ec1bde-bd85-4b3e-9c7c-5fb739f1a267"
          },
          "id": "19ec1bde-bd85-4b3e-9c7c-5fb739f1a267",
          "name": "Delay Response",
          "request": {
            "description": {
              "content": "Using this endpoint one can configure how long it takes for the server to come back with a response. Appending a number to the URL defines the time (in seconds) the server will wait before responding.\n\nNote that a maximum delay of 10 seconds is accepted by the server.",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "delay",
                "2"
              ],
              "host": [
                "postman-echo",
                "com"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "25e4abc5-a7e4-4eac-9ffa-4c6d1a21c45e",
              "name": "success-response",
              "originalRequest": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "delay",
                    "3"
                  ],
                  "host": [
                    "echo",
                    "getpostman",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "name": "Access-Control-Allow-Credentials",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Credentials",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Headers",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Methods",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Methods",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Origin",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Origin",
                  "value": ""
                },
                {
                  "name": "Access-Control-Expose-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Expose-Headers",
                  "value": ""
                },
                {
                  "name": "Connection",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "name": "Content-Length",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Length",
                  "value": "13"
                },
                {
                  "name": "Content-Type",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "name": "Date",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Date",
                  "value": "Mon, 02 Jan 2017 09:19:03 GMT"
                },
                {
                  "name": "ETag",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "ETag",
                  "value": "W/\"d-t/L/D5c0SDl+MoXtKdSVOg\""
                },
                {
                  "name": "Server",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Server",
                  "value": "nginx/1.10.1"
                },
                {
                  "name": "Vary",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Vary",
                  "value": "Accept-Encoding"
                }
              ],
              "body": "{\"delay\":\"3\"}",
              "cookie": [
                {
                  "name": "sails.sid",
                  "expires": null,
                  "domain": "echo.getpostman.com",
                  "path": "/",
                  "secure": false,
                  "httpOnly": true,
                  "value": "s%3AYjUiFBtGiJVL2a-qzZQZ1DFlAMhgXN9O.WaAjRUV0OteZxwmhbNibuB7VKse068JJIh6PwLQUKmQ"
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4243d71b-c0cb-4af8-9f32-6859a3397506",
                "type": "text/javascript",
                "exec": [
                  "var _ = require('lodash');",
                  "",
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response has valid json body\", function () {",
                  "    pm.response.to.have.jsonBody('delay');",
                  "});",
                  "",
                  "// additional sanity tests",
                  "pm.test(\"request must have a valid delay\", function () {",
                  "    pm.expect(Number(_.get(pm.request, 'url.path[1]'))).to.be.above(0).and.below(10);",
                  "});",
                  "pm.test(\"response should take more time than the delay specified\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.above(Number(_.get(pm.request, 'url.path[1]')));",
                  "});"
                ],
                "_lastExecutionId": "dedb7e80-5254-4790-b823-c1900b54f147"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Using this endpoint one can configure how long it takes for the server to come back with a response. Appending a number to the URL defines the time (in seconds) the server will wait before responding.\n\nNote that a maximum delay of 10 seconds is accepted by the server.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "delay",
              "2"
            ],
            "host": [
              "postman-echo",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.26.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "71b01667-ed69-4164-a212-3d28b6ac14ad",
              "system": true
            },
            {
              "key": "Host",
              "value": "postman-echo.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "sails.sid=s%3AAPM5wmZaFxbHCPKS5lNJova_NOCurxTf.SLIVUSqjRBBGYNhSRqZ0NBEVFgMmI3BZTiiTN%2BmUaeo",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "d4861ec3-3d2c-4d45-8385-c3b8f113de94",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Fri, 12 Jun 2020 13:15:48 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "13"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "ETag",
              "value": "W/\"d-vb8pS8uHJYunqF73qADGxcv0Je8\""
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3AwHVShxJ_qbeLUn7uGJcrvmZ-CwFwnJbb.cgXEWzqLOqHijnHkYZanCxqd8AJ3cBUBjS7%2FtWEB2%2BU; Path=/; HttpOnly"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              101,
              108,
              97,
              121,
              34,
              58,
              34,
              50,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2125,
          "responseSize": 13
        },
        "id": "19ec1bde-bd85-4b3e-9c7c-5fb739f1a267",
        "assertions": [
          {
            "assertion": "response is ok",
            "skipped": false
          },
          {
            "assertion": "response has valid json body",
            "skipped": false
          },
          {
            "assertion": "request must have a valid delay",
            "skipped": false
          },
          {
            "assertion": "response should take more time than the delay specified",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "b0c15b50-dd5c-4e46-b0e4-23b82478451a",
          "length": 37,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "33f34ffd-3d34-46d3-b5c0-3acc4ead1f00"
        },
        "item": {
          "_": {
            "postman_id": "b14cae14-5220-4966-88b7-42d7167b0e82"
          },
          "id": "b14cae14-5220-4966-88b7-42d7167b0e82",
          "name": "Get UTF8 Encoded Response",
          "request": {
            "description": {
              "content": "If a response of an endpoint requires to send data beyond the basic English / ASCII character set, the `charset` parameter in the `Content-Type` response header defines the character encoding policy.\n\nThis endpoint returns an `UTF8` character encoded response body with text in various languages such as Greek, Latin, East Asian, etc. Postman can interpret the character encoding and use appropriate methods to display the character set in responses.",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "encoding",
                "utf8"
              ],
              "host": [
                "postman-echo",
                "com"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "810dd656-181c-4e5a-9fe7-191d5a1a8e31",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response has charset in content-type header\", function () {",
                  "    pm.response.to.have.header('content-type', 'text/html; charset=utf-8');",
                  "});",
                  "",
                  "pm.test(\"response has chunked transfer encoding header\", function () {",
                  "    pm.response.to.have.header('transfer-encoding', 'chunked');",
                  "});"
                ],
                "_lastExecutionId": "25e34363-0b2b-41d3-a0ae-3512bdfca7c5"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "If a response of an endpoint requires to send data beyond the basic English / ASCII character set, the `charset` parameter in the `Content-Type` response header defines the character encoding policy.\n\nThis endpoint returns an `UTF8` character encoded response body with text in various languages such as Greek, Latin, East Asian, etc. Postman can interpret the character encoding and use appropriate methods to display the character set in responses.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "encoding",
              "utf8"
            ],
            "host": [
              "postman-echo",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.26.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "395c4bae-1763-40ff-ae9e-80ef7916de6c",
              "system": true
            },
            {
              "key": "Host",
              "value": "postman-echo.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "sails.sid=s%3AwHVShxJ_qbeLUn7uGJcrvmZ-CwFwnJbb.cgXEWzqLOqHijnHkYZanCxqd8AJ3cBUBjS7%2FtWEB2%2BU",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "d7d5df8c-1bd4-465f-a08b-3e2df3007ea2",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Fri, 12 Jun 2020 13:15:48 GMT"
            },
            {
              "key": "Content-Type",
              "value": "text/html; charset=utf-8"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "ETag",
              "value": "W/\"3d0e-bb1Z6nxw+98ped7xrePAFKVeCtU\""
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Content-Encoding",
              "value": "gzip"
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3AVfVU90Nq_CnjfmZnz-mjgSeJFuBZEHK8.SxDdHVGUeUZFaWiktjUGC8hXvdrvMjOmg%2Feel2x2eT4; Path=/; HttpOnly"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              10,
              32,
              32,
              32,
              32,
              60,
              104,
              116,
              109,
              108,
              62,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              60,
              98,
              111,
              100,
              121,
              62,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              60,
              104,
              49,
              62,
              85,
              110,
              105,
              99,
              111,
              100,
              101,
              32,
              68,
              101,
              109,
              111,
              60,
              47,
              104,
              49,
              62,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              60,
              112,
              62,
              84,
              97,
              107,
              101,
              110,
              32,
              102,
              114,
              111,
              109,
              32,
              60,
              97,
              32,
              104,
              114,
              101,
              102,
              61,
              34,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              119,
              119,
              119,
              46,
              99,
              108,
              46,
              99,
              97,
              109,
              46,
              97,
              99,
              46,
              117,
              107,
              47,
              126,
              109,
              103,
              107,
              50,
              53,
              47,
              117,
              99,
              115,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              115,
              47,
              85,
              84,
              70,
              45,
              56,
              45,
              100,
              101,
              109,
              111,
              46,
              116,
              120,
              116,
              34,
              62,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              119,
              119,
              119,
              46,
              99,
              108,
              46,
              99,
              97,
              109,
              46,
              97,
              99,
              46,
              117,
              107,
              47,
              126,
              109,
              103,
              107,
              50,
              53,
              47,
              117,
              99,
              115,
              47,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              115,
              47,
              85,
              84,
              70,
              45,
              56,
              45,
              100,
              101,
              109,
              111,
              46,
              116,
              120,
              116,
              60,
              47,
              97,
              62,
              60,
              47,
              112,
              62,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              60,
              112,
              114,
              101,
              62,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              85,
              84,
              70,
              45,
              56,
              32,
              101,
              110,
              99,
              111,
              100,
              101,
              100,
              32,
              115,
              97,
              109,
              112,
              108,
              101,
              32,
              112,
              108,
              97,
              105,
              110,
              45,
              116,
              101,
              120,
              116,
              32,
              102,
              105,
              108,
              101,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              226,
              128,
              190,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              77,
              97,
              114,
              107,
              117,
              115,
              32,
              75,
              117,
              104,
              110,
              32,
              91,
              203,
              136,
              109,
              97,
              202,
              179,
              107,
              202,
              138,
              115,
              32,
              107,
              117,
              203,
              144,
              110,
              93,
              32,
              60,
              104,
              116,
              116,
              112,
              58,
              47,
              47,
              119,
              119,
              119,
              46,
              99,
              108,
              46,
              99,
              97,
              109,
              46,
              97,
              99,
              46,
              117,
              107,
              47,
              126,
              109,
              103,
              107,
              50,
              53,
              47,
              62,
              32,
              226,
              128,
              148,
              32,
              50,
              48,
              48,
              50,
              45,
              48,
              55,
              45,
              50,
              53,
              10,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              84,
              104,
              101,
              32,
              65,
              83,
              67,
              73,
              73,
              32,
              99,
              111,
              109,
              112,
              97,
              116,
              105,
              98,
              108,
              101,
              32,
              85,
              84,
              70,
              45,
              56,
              32,
              101,
              110,
              99,
              111,
              100,
              105,
              110,
              103,
              32,
              117,
              115,
              101,
              100,
              32,
              105,
              110,
              32,
              116,
              104,
              105,
              115,
              32,
              112,
              108,
              97,
              105,
              110,
              45,
              116,
              101,
              120,
              116,
              32,
              102,
              105,
              108,
              101,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              105,
              115,
              32,
              100,
              101,
              102,
              105,
              110,
              101,
              100,
              32,
              105,
              110,
              32,
              85,
              110,
              105,
              99,
              111,
              100,
              101,
              44,
              32,
              73,
              83,
              79,
              32,
              49,
              48,
              54,
              52,
              54,
              45,
              49,
              44,
              32,
              97,
              110,
              100,
              32,
              82,
              70,
              67,
              32,
              50,
              50,
              55,
              57,
              46,
              10,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              85,
              115,
              105,
              110,
              103,
              32,
              85,
              110,
              105,
              99,
              111,
              100,
              101,
              47,
              85,
              84,
              70,
              45,
              56,
              44,
              32,
              121,
              111,
              117,
              32,
              99,
              97,
              110,
              32,
              119,
              114,
              105,
              116,
              101,
              32,
              105,
              110,
              32,
              101,
              109,
              97,
              105,
              108,
              115,
              32,
              97,
              110,
              100,
              32,
              115,
              111,
              117,
              114,
              99,
              101,
              32,
              99,
              111,
              100,
              101,
              32,
              116,
              104,
              105,
              110,
              103,
              115,
              32,
              115,
              117,
              99,
              104,
              32,
              97,
              115,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              77,
              97,
              116,
              104,
              101,
              109,
              97,
              116,
              105,
              99,
              115,
              32,
              97,
              110,
              100,
              32,
              115,
              99,
              105,
              101,
              110,
              99,
              101,
              115,
              58,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              136,
              174,
              32,
              69,
              226,
              139,
              133,
              100,
              97,
              32,
              61,
              32,
              81,
              44,
              32,
              32,
              110,
              32,
              226,
              134,
              146,
              32,
              226,
              136,
              158,
              44,
              32,
              226,
              136,
              145,
              32,
              102,
              40,
              105,
              41,
              32,
              61,
              32,
              226,
              136,
              143,
              32,
              103,
              40,
              105,
              41,
              44,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              142,
              167,
              226,
              142,
              161,
              226,
              142,
              155,
              226,
              148,
              140,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              148,
              144,
              226,
              142,
              158,
              226,
              142,
              164,
              226,
              142,
              171,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              142,
              170,
              226,
              142,
              162,
              226,
              142,
              156,
              226,
              148,
              130,
              97,
              194,
              178,
              43,
              98,
              194,
              179,
              32,
              226,
              142,
              159,
              226,
              142,
              165,
              226,
              142,
              170,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              136,
              128,
              120,
              226,
              136,
              136,
              226,
              132,
              157,
              58,
              32,
              226,
              140,
              136,
              120,
              226,
              140,
              137,
              32,
              61,
              32,
              226,
              136,
              146,
              226,
              140,
              138,
              226,
              136,
              146,
              120,
              226,
              140,
              139,
              44,
              32,
              206,
              177,
              32,
              226,
              136,
              167,
              32,
              194,
              172,
              206,
              178,
              32,
              61,
              32,
              194,
              172,
              40,
              194,
              172,
              206,
              177,
              32,
              226,
              136,
              168,
              32,
              206,
              178,
              41,
              44,
              32,
              32,
              32,
              32,
              226,
              142,
              170,
              226,
              142,
              162,
              226,
              142,
              156,
              226,
              148,
              130,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              148,
              128,
              32,
              226,
              142,
              159,
              226,
              142,
              165,
              226,
              142,
              170,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              142,
              170,
              226,
              142,
              162,
              226,
              142,
              156,
              226,
              142,
              183,
              32,
              99,
              226,
              130,
              136,
              32,
              32,
              32,
              226,
              142,
              159,
              226,
              142,
              165,
              226,
              142,
              170,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              132,
              149,
              32,
              226,
              138,
              134,
              32,
              226,
              132,
              149,
              226,
              130,
              128,
              32,
              226,
              138,
              130,
              32,
              226,
              132,
              164,
              32,
              226,
              138,
              130,
              32,
              226,
              132,
              154,
              32,
              226,
              138,
              130,
              32,
              226,
              132,
              157,
              32,
              226,
              138,
              130,
              32,
              226,
              132,
              130,
              44,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              142,
              168,
              226,
              142,
              162,
              226,
              142,
              156,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              142,
              159,
              226,
              142,
              165,
              226,
              142,
              172,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              142,
              170,
              226,
              142,
              162,
              226,
              142,
              156,
              32,
              226,
              136,
              158,
              32,
              32,
              32,
              32,
              32,
              226,
              142,
              159,
              226,
              142,
              165,
              226,
              142,
              170,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              138,
              165,
              32,
              60,
              32,
              97,
              32,
              226,
              137,
              160,
              32,
              98,
              32,
              226,
              137,
              161,
              32,
              99,
              32,
              226,
              137,
              164,
              32,
              100,
              32,
              226,
              137,
              170,
              32,
              226,
              138,
              164,
              32,
              226,
              135,
              146,
              32,
              40,
              226,
              159,
              166,
              65,
              226,
              159,
              167,
              32,
              226,
              135,
              148,
              32,
              226,
              159,
              170,
              66,
              226,
              159,
              171,
              41,
              44,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              142,
              170,
              226,
              142,
              162,
              226,
              142,
              156,
              32,
              226,
              142,
              178,
              32,
              32,
              32,
              32,
              32,
              226,
              142,
              159,
              226,
              142,
              165,
              226,
              142,
              170,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              142,
              170,
              226,
              142,
              162,
              226,
              142,
              156,
              32,
              226,
              142,
              179,
              97,
              226,
              129,
              177,
              45,
              98,
              226,
              129,
              177,
              226,
              142,
              159,
              226,
              142,
              165,
              226,
              142,
              170,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              50,
              72,
              226,
              130,
              130,
              32,
              43,
              32,
              79,
              226,
              130,
              130,
              32,
              226,
              135,
              140,
              32,
              50,
              72,
              226,
              130,
              130,
              79,
              44,
              32,
              82,
              32,
              61,
              32,
              52,
              46,
              55,
              32,
              107,
              206,
              169,
              44,
              32,
              226,
              140,
              128,
              32,
              50,
              48,
              48,
              32,
              109,
              109,
              32,
              32,
              32,
              32,
              32,
              226,
              142,
              169,
              226,
              142,
              163,
              226,
              142,
              157,
              105,
              61,
              49,
              32,
              32,
              32,
              32,
              226,
              142,
              160,
              226,
              142,
              166,
              226,
              142,
              173,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              76,
              105,
              110,
              103,
              117,
              105,
              115,
              116,
              105,
              99,
              115,
              32,
              97,
              110,
              100,
              32,
              100,
              105,
              99,
              116,
              105,
              111,
              110,
              97,
              114,
              105,
              101,
              115,
              58,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              195,
              176,
              105,
              32,
              196,
              177,
              110,
              116,
              201,
              153,
              203,
              136,
              110,
              195,
              166,
              202,
              131,
              201,
              153,
              110,
              201,
              153,
              108,
              32,
              102,
              201,
              153,
              203,
              136,
              110,
              201,
              155,
              116,
              196,
              177,
              107,
              32,
              201,
              153,
              115,
              111,
              202,
              138,
              115,
              105,
              203,
              136,
              101,
              196,
              177,
              202,
              131,
              110,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              89,
              32,
              91,
              203,
              136,
              202,
              143,
              112,
              115,
              105,
              108,
              201,
              148,
              110,
              93,
              44,
              32,
              89,
              101,
              110,
              32,
              91,
              106,
              201,
              155,
              110,
              93,
              44,
              32,
              89,
              111,
              103,
              97,
              32,
              91,
              203,
              136,
              106,
              111,
              203,
              144,
              103,
              201,
              145,
              93,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              65,
              80,
              76,
              58,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              40,
              40,
              86,
              226,
              141,
              179,
              86,
              41,
              61,
              226,
              141,
              179,
              226,
              141,
              180,
              86,
              41,
              47,
              86,
              226,
              134,
              144,
              44,
              86,
              32,
              32,
              32,
              32,
              226,
              140,
              183,
              226,
              134,
              144,
              226,
              141,
              179,
              226,
              134,
              146,
              226,
              141,
              180,
              226,
              136,
              134,
              226,
              136,
              135,
              226,
              138,
              131,
              226,
              128,
              190,
              226,
              141,
              142,
              226,
              141,
              149,
              226,
              140,
              136,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              78,
              105,
              99,
              101,
              114,
              32,
              116,
              121,
              112,
              111,
              103,
              114,
              97,
              112,
              104,
              121,
              32,
              105,
              110,
              32,
              112,
              108,
              97,
              105,
              110,
              32,
              116,
              101,
              120,
              116,
              32,
              102,
              105,
              108,
              101,
              115,
              58,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              148,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              151,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              145,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              145,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              145,
              32,
              32,
              32,
              226,
              128,
              162,
              32,
              226,
              128,
              152,
              115,
              105,
              110,
              103,
              108,
              101,
              226,
              128,
              153,
              32,
              97,
              110,
              100,
              32,
              226,
              128,
              156,
              100,
              111,
              117,
              98,
              108,
              101,
              226,
              128,
              157,
              32,
              113,
              117,
              111,
              116,
              101,
              115,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              145,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              145,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              145,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              145,
              32,
              32,
              32,
              226,
              128,
              162,
              32,
              67,
              117,
              114,
              108,
              121,
              32,
              97,
              112,
              111,
              115,
              116,
              114,
              111,
              112,
              104,
              101,
              115,
              58,
              32,
              226,
              128,
              156,
              87,
              101,
              226,
              128,
              153,
              118,
              101,
              32,
              98,
              101,
              101,
              110,
              32,
              104,
              101,
              114,
              101,
              226,
              128,
              157,
              32,
              226,
              149,
              145,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              145,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              145,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              145,
              32,
              32,
              32,
              226,
              128,
              162,
              32,
              76,
              97,
              116,
              105,
              110,
              45,
              49,
              32,
              97,
              112,
              111,
              115,
              116,
              114,
              111,
              112,
              104,
              101,
              32,
              97,
              110,
              100,
              32,
              97,
              99,
              99,
              101,
              110,
              116,
              115,
              58,
              32,
              39,
              194,
              180,
              96,
              32,
              32,
              226,
              149,
              145,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              145,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              145,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              145,
              32,
              32,
              32,
              226,
              128,
              162,
              32,
              226,
              128,
              154,
              100,
              101,
              117,
              116,
              115,
              99,
              104,
              101,
              226,
              128,
              152,
              32,
              226,
              128,
              158,
              65,
              110,
              102,
              195,
              188,
              104,
              114,
              117,
              110,
              103,
              115,
              122,
              101,
              105,
              99,
              104,
              101,
              110,
              226,
              128,
              156,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              145,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              145,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              145,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              145,
              32,
              32,
              32,
              226,
              128,
              162,
              32,
              226,
              128,
              160,
              44,
              32,
              226,
              128,
              161,
              44,
              32,
              226,
              128,
              176,
              44,
              32,
              226,
              128,
              162,
              44,
              32,
              51,
              226,
              128,
              147,
              52,
              44,
              32,
              226,
              128,
              148,
              44,
              32,
              226,
              136,
              146,
              53,
              47,
              43,
              53,
              44,
              32,
              226,
              132,
              162,
              44,
              32,
              226,
              128,
              166,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              145,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              145,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              145,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              145,
              32,
              32,
              32,
              226,
              128,
              162,
              32,
              65,
              83,
              67,
              73,
              73,
              32,
              115,
              97,
              102,
              101,
              116,
              121,
              32,
              116,
              101,
              115,
              116,
              58,
              32,
              49,
              108,
              73,
              124,
              44,
              32,
              48,
              79,
              68,
              44,
              32,
              56,
              66,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              145,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              145,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              173,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              149,
              174,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              145,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              145,
              32,
              32,
              32,
              226,
              128,
              162,
              32,
              116,
              104,
              101,
              32,
              101,
              117,
              114,
              111,
              32,
              115,
              121,
              109,
              98,
              111,
              108,
              58,
              32,
              226,
              148,
              130,
              32,
              49,
              52,
              46,
              57,
              53,
              32,
              226,
              130,
              172,
              32,
              226,
              148,
              130,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              145,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              145,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              176,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              149,
              175,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              145,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              154,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              157,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              67,
              111,
              109,
              98,
              105,
              110,
              105,
              110,
              103,
              32,
              99,
              104,
              97,
              114,
              97,
              99,
              116,
              101,
              114,
              115,
              58,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              83,
              84,
              65,
              82,
              71,
              206,
              155,
              204,
              138,
              84,
              69,
              32,
              83,
              71,
              45,
              49,
              44,
              32,
              97,
              32,
              61,
              32,
              118,
              204,
              135,
              32,
              61,
              32,
              114,
              204,
              136,
              44,
              32,
              97,
              226,
              131,
              145,
              32,
              226,
              138,
              165,
              32,
              98,
              226,
              131,
              145,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              71,
              114,
              101,
              101,
              107,
              32,
              40,
              105,
              110,
              32,
              80,
              111,
              108,
              121,
              116,
              111,
              110,
              105,
              99,
              41,
              58,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              84,
              104,
              101,
              32,
              71,
              114,
              101,
              101,
              107,
              32,
              97,
              110,
              116,
              104,
              101,
              109,
              58,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              206,
              163,
              225,
              189,
              178,
              32,
              206,
              179,
              206,
              189,
              207,
              137,
              207,
              129,
              225,
              189,
              183,
              206,
              182,
              207,
              137,
              32,
              225,
              188,
              128,
              207,
              128,
              225,
              189,
              184,
              32,
              207,
              132,
              225,
              189,
              180,
              206,
              189,
              32,
              206,
              186,
              225,
              189,
              185,
              207,
              136,
              206,
              183,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              207,
              132,
              206,
              191,
              225,
              191,
              166,
              32,
              207,
              131,
              207,
              128,
              206,
              177,
              206,
              184,
              206,
              185,
              206,
              191,
              225,
              191,
              166,
              32,
              207,
              132,
              225,
              189,
              180,
              206,
              189,
              32,
              207,
              132,
              207,
              129,
              206,
              191,
              206,
              188,
              206,
              181,
              207,
              129,
              225,
              189,
              181,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              207,
              131,
              225,
              189,
              178,
              32,
              206,
              179,
              206,
              189,
              207,
              137,
              207,
              129,
              225,
              189,
              183,
              206,
              182,
              207,
              137,
              32,
              225,
              188,
              128,
              207,
              128,
              225,
              189,
              184,
              32,
              207,
              132,
              225,
              189,
              180,
              206,
              189,
              32,
              225,
              189,
              132,
              207,
              136,
              206,
              183,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              207,
              128,
              206,
              191,
              225,
              189,
              186,
              32,
              206,
              188,
              225,
              189,
              178,
              32,
              206,
              178,
              225,
              189,
              183,
              206,
              177,
              32,
              206,
              188,
              206,
              181,
              207,
              132,
              207,
              129,
              225,
              189,
              177,
              206,
              181,
              206,
              185,
              32,
              207,
              132,
              225,
              189,
              180,
              32,
              206,
              179,
              225,
              191,
              134,
              46,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              225,
              190,
              191,
              206,
              145,
              207,
              128,
              225,
              190,
              191,
              32,
              207,
              132,
              225,
              189,
              176,
              32,
              206,
              186,
              225,
              189,
              185,
              206,
              186,
              206,
              186,
              206,
              177,
              206,
              187,
              206,
              177,
              32,
              206,
              178,
              206,
              179,
              206,
              177,
              206,
              187,
              206,
              188,
              225,
              189,
              179,
              206,
              189,
              206,
              183,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              207,
              132,
              225,
              191,
              182,
              206,
              189,
              32,
              225,
              191,
              190,
              206,
              149,
              206,
              187,
              206,
              187,
              225,
              189,
              181,
              206,
              189,
              207,
              137,
              206,
              189,
              32,
              207,
              132,
              225,
              189,
              176,
              32,
              225,
              188,
              177,
              206,
              181,
              207,
              129,
              225,
              189,
              177,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              206,
              186,
              206,
              177,
              225,
              189,
              182,
              32,
              207,
              131,
              225,
              189,
              176,
              206,
              189,
              32,
              207,
              128,
              207,
              129,
              225,
              191,
              182,
              207,
              132,
              206,
              177,
              32,
              225,
              188,
              128,
              206,
              189,
              206,
              180,
              207,
              129,
              206,
              181,
              206,
              185,
              207,
              137,
              206,
              188,
              225,
              189,
              179,
              206,
              189,
              206,
              183,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              207,
              135,
              206,
              177,
              225,
              191,
              150,
              207,
              129,
              206,
              181,
              44,
              32,
              225,
              189,
              166,
              32,
              207,
              135,
              206,
              177,
              225,
              191,
              150,
              207,
              129,
              206,
              181,
              44,
              32,
              225,
              190,
              191,
              206,
              149,
              206,
              187,
              206,
              181,
              207,
              133,
              206,
              184,
              206,
              181,
              207,
              129,
              206,
              185,
              225,
              189,
              177,
              33,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              70,
              114,
              111,
              109,
              32,
              97,
              32,
              115,
              112,
              101,
              101,
              99,
              104,
              32,
              111,
              102,
              32,
              68,
              101,
              109,
              111,
              115,
              116,
              104,
              101,
              110,
              101,
              115,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              52,
              116,
              104,
              32,
              99,
              101,
              110,
              116,
              117,
              114,
              121,
              32,
              66,
              67,
              58,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              206,
              159,
              225,
              189,
              144,
              207,
              135,
              225,
              189,
              182,
              32,
              207,
              132,
              206,
              177,
              225,
              189,
              144,
              207,
              132,
              225,
              189,
              176,
              32,
              207,
              128,
              206,
              177,
              207,
              129,
              225,
              189,
              183,
              207,
              131,
              207,
              132,
              206,
              177,
              207,
              132,
              206,
              177,
              225,
              189,
              183,
              32,
              206,
              188,
              206,
              191,
              206,
              185,
              32,
              206,
              179,
              206,
              185,
              206,
              179,
              206,
              189,
              225,
              189,
              189,
              207,
              131,
              206,
              186,
              206,
              181,
              206,
              185,
              206,
              189,
              44,
              32,
              225,
              189,
              166,
              32,
              225,
              188,
              132,
              206,
              189,
              206,
              180,
              207,
              129,
              206,
              181,
              207,
              130,
              32,
              225,
              190,
              191,
              206,
              145,
              206,
              184,
              206,
              183,
              206,
              189,
              206,
              177,
              225,
              191,
              150,
              206,
              191,
              206,
              185,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              225,
              189,
              133,
              207,
              132,
              206,
              177,
              206,
              189,
              32,
              207,
              132,
              225,
              190,
              191,
              32,
              206,
              181,
              225,
              188,
              176,
              207,
              130,
              32,
              207,
              132,
              225,
              189,
              176,
              32,
              207,
              128,
              207,
              129,
              225,
              189,
              177,
              206,
              179,
              206,
              188,
              206,
              177,
              207,
              132,
              206,
              177,
              32,
              225,
              188,
              128,
              207,
              128,
              206,
              191,
              206,
              178,
              206,
              187,
              225,
              189,
              179,
              207,
              136,
              207,
              137,
              32,
              206,
              186,
              206,
              177,
              225,
              189,
              182,
              32,
              225,
              189,
              133,
              207,
              132,
              206,
              177,
              206,
              189,
              32,
              207,
              128,
              207,
              129,
              225,
              189,
              184,
              207,
              130,
              32,
              207,
              132,
              206,
              191,
              225,
              189,
              186,
              207,
              130,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              206,
              187,
              225,
              189,
              185,
              206,
              179,
              206,
              191,
              207,
              133,
              207,
              130,
              32,
              206,
              191,
              225,
              189,
              147,
              207,
              130,
              32,
              225,
              188,
              128,
              206,
              186,
              206,
              191,
              225,
              189,
              187,
              207,
              137,
              206,
              135,
              32,
              207,
              132,
              206,
              191,
              225,
              189,
              186,
              207,
              130,
              32,
              206,
              188,
              225,
              189,
              178,
              206,
              189,
              32,
              206,
              179,
              225,
              189,
              176,
              207,
              129,
              32,
              206,
              187,
              225,
              189,
              185,
              206,
              179,
              206,
              191,
              207,
              133,
              207,
              130,
              32,
              207,
              128,
              206,
              181,
              207,
              129,
              225,
              189,
              182,
              32,
              207,
              132,
              206,
              191,
              225,
              191,
              166,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              207,
              132,
              206,
              185,
              206,
              188,
              207,
              137,
              207,
              129,
              225,
              189,
              181,
              207,
              131,
              206,
              177,
              207,
              131,
              206,
              184,
              206,
              177,
              206,
              185,
              32,
              206,
              166,
              225,
              189,
              183,
              206,
              187,
              206,
              185,
              207,
              128,
              207,
              128,
              206,
              191,
              206,
              189,
              32,
              225,
              189,
              129,
              207,
              129,
              225,
              191,
              182,
              32,
              206,
              179,
              206,
              185,
              206,
              179,
              206,
              189,
              206,
              191,
              206,
              188,
              225,
              189,
              179,
              206,
              189,
              206,
              191,
              207,
              133,
              207,
              130,
              44,
              32,
              207,
              132,
              225,
              189,
              176,
              32,
              206,
              180,
              225,
              189,
              178,
              32,
              207,
              128,
              207,
              129,
              225,
              189,
              177,
              206,
              179,
              206,
              188,
              206,
              177,
              207,
              132,
              225,
              190,
              191,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              206,
              181,
              225,
              188,
              176,
              207,
              130,
              32,
              207,
              132,
              206,
              191,
              225,
              191,
              166,
              207,
              132,
              206,
              191,
              32,
              207,
              128,
              207,
              129,
              206,
              191,
              225,
              189,
              181,
              206,
              186,
              206,
              191,
              206,
              189,
              207,
              132,
              206,
              177,
              44,
              32,
              32,
              225,
              189,
              165,
              207,
              131,
              206,
              184,
              225,
              190,
              191,
              32,
              225,
              189,
              133,
              207,
              128,
              207,
              137,
              207,
              130,
              32,
              206,
              188,
              225,
              189,
              180,
              32,
              207,
              128,
              206,
              181,
              206,
              185,
              207,
              131,
              225,
              189,
              185,
              206,
              188,
              206,
              181,
              206,
              184,
              225,
              190,
              191,
              32,
              206,
              177,
              225,
              189,
              144,
              207,
              132,
              206,
              191,
              225,
              189,
              182,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              207,
              128,
              207,
              129,
              225,
              189,
              185,
              207,
              132,
              206,
              181,
              207,
              129,
              206,
              191,
              206,
              189,
              32,
              206,
              186,
              206,
              177,
              206,
              186,
              225,
              191,
              182,
              207,
              130,
              32,
              207,
              131,
              206,
              186,
              225,
              189,
              179,
              207,
              136,
              206,
              177,
              207,
              131,
              206,
              184,
              206,
              177,
              206,
              185,
              32,
              206,
              180,
              225,
              189,
              179,
              206,
              191,
              206,
              189,
              46,
              32,
              206,
              191,
              225,
              189,
              144,
              206,
              180,
              225,
              189,
              179,
              206,
              189,
              32,
              206,
              191,
              225,
              189,
              150,
              206,
              189,
              32,
              225,
              188,
              132,
              206,
              187,
              206,
              187,
              206,
              191,
              32,
              206,
              188,
              206,
              191,
              206,
              185,
              32,
              206,
              180,
              206,
              191,
              206,
              186,
              206,
              191,
              225,
              191,
              166,
              207,
              131,
              206,
              185,
              206,
              189,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              206,
              191,
              225,
              188,
              177,
              32,
              207,
              132,
              225,
              189,
              176,
              32,
              207,
              132,
              206,
              191,
              206,
              185,
              206,
              177,
              225,
              191,
              166,
              207,
              132,
              206,
              177,
              32,
              206,
              187,
              225,
              189,
              179,
              206,
              179,
              206,
              191,
              206,
              189,
              207,
              132,
              206,
              181,
              207,
              130,
              32,
              225,
              188,
              162,
              32,
              207,
              132,
              225,
              189,
              180,
              206,
              189,
              32,
              225,
              189,
              145,
              207,
              128,
              225,
              189,
              185,
              206,
              184,
              206,
              181,
              207,
              131,
              206,
              185,
              206,
              189,
              44,
              32,
              207,
              128,
              206,
              181,
              207,
              129,
              225,
              189,
              182,
              32,
              225,
              188,
              167,
              207,
              130,
              32,
              206,
              178,
              206,
              191,
              207,
              133,
              206,
              187,
              206,
              181,
              225,
              189,
              187,
              206,
              181,
              207,
              131,
              206,
              184,
              206,
              177,
              206,
              185,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              206,
              191,
              225,
              189,
              144,
              207,
              135,
              225,
              189,
              182,
              32,
              207,
              132,
              225,
              189,
              180,
              206,
              189,
              32,
              206,
              191,
              225,
              189,
              150,
              207,
              131,
              206,
              177,
              206,
              189,
              32,
              207,
              128,
              206,
              177,
              207,
              129,
              206,
              185,
              207,
              131,
              207,
              132,
              225,
              189,
              177,
              206,
              189,
              207,
              132,
              206,
              181,
              207,
              130,
              32,
              225,
              189,
              145,
              206,
              188,
              225,
              191,
              150,
              206,
              189,
              32,
              225,
              188,
              129,
              206,
              188,
              206,
              177,
              207,
              129,
              207,
              132,
              225,
              189,
              177,
              206,
              189,
              206,
              181,
              206,
              185,
              206,
              189,
              46,
              32,
              225,
              188,
              144,
              206,
              179,
              225,
              189,
              188,
              32,
              206,
              180,
              225,
              189,
              179,
              44,
              32,
              225,
              189,
              133,
              207,
              132,
              206,
              185,
              32,
              206,
              188,
              225,
              189,
              179,
              206,
              189,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              207,
              128,
              206,
              191,
              207,
              132,
              225,
              190,
              191,
              32,
              225,
              188,
              144,
              206,
              190,
              225,
              191,
              134,
              206,
              189,
              32,
              207,
              132,
              225,
              191,
              135,
              32,
              207,
              128,
              225,
              189,
              185,
              206,
              187,
              206,
              181,
              206,
              185,
              32,
              206,
              186,
              206,
              177,
              225,
              189,
              182,
              32,
              207,
              132,
              225,
              189,
              176,
              32,
              206,
              177,
              225,
              189,
              145,
              207,
              132,
              225,
              191,
              134,
              207,
              130,
              32,
              225,
              188,
              148,
              207,
              135,
              206,
              181,
              206,
              185,
              206,
              189,
              32,
              225,
              188,
              128,
              207,
              131,
              207,
              134,
              206,
              177,
              206,
              187,
              225,
              191,
              182,
              207,
              130,
              32,
              206,
              186,
              206,
              177,
              225,
              189,
              182,
              32,
              206,
              166,
              225,
              189,
              183,
              206,
              187,
              206,
              185,
              207,
              128,
              207,
              128,
              206,
              191,
              206,
              189,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              207,
              132,
              206,
              185,
              206,
              188,
              207,
              137,
              207,
              129,
              225,
              189,
              181,
              207,
              131,
              206,
              177,
              207,
              131,
              206,
              184,
              206,
              177,
              206,
              185,
              44,
              32,
              206,
              186,
              206,
              177,
              225,
              189,
              182,
              32,
              206,
              188,
              225,
              189,
              177,
              206,
              187,
              225,
              190,
              191,
              32,
              225,
              188,
              128,
              206,
              186,
              207,
              129,
              206,
              185,
              206,
              178,
              225,
              191,
              182,
              207,
              130,
              32,
              206,
              191,
              225,
              188,
              182,
              206,
              180,
              206,
              177,
              206,
              135,
              32,
              225,
              188,
              144,
              207,
              128,
              225,
              190,
              191,
              32,
              225,
              188,
              144,
              206,
              188,
              206,
              191,
              225,
              191,
              166,
              32,
              206,
              179,
              225,
              189,
              177,
              207,
              129,
              44,
              32,
              206,
              191,
              225,
              189,
              144,
              32,
              207,
              128,
              225,
              189,
              177,
              206,
              187,
              206,
              177,
              206,
              185,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              206,
              179,
              225,
              189,
              179,
              206,
              179,
              206,
              191,
              206,
              189,
              206,
              181,
              206,
              189,
              32,
              207,
              132,
              206,
              177,
              225,
              191,
              166,
              207,
              132,
              225,
              190,
              191,
              32,
              225,
              188,
              128,
              206,
              188,
              207,
              134,
              225,
              189,
              185,
              207,
              132,
              206,
              181,
              207,
              129,
              206,
              177,
              206,
              135,
              32,
              206,
              189,
              225,
              191,
              166,
              206,
              189,
              32,
              206,
              188,
              225,
              189,
              179,
              206,
              189,
              207,
              132,
              206,
              191,
              206,
              185,
              32,
              207,
              128,
              225,
              189,
              179,
              207,
              128,
              206,
              181,
              206,
              185,
              207,
              131,
              206,
              188,
              206,
              177,
              206,
              185,
              32,
              207,
              132,
              206,
              191,
              225,
              191,
              166,
              206,
              184,
              225,
              190,
              191,
              32,
              225,
              188,
              177,
              206,
              186,
              206,
              177,
              206,
              189,
              225,
              189,
              184,
              206,
              189,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              207,
              128,
              207,
              129,
              206,
              191,
              206,
              187,
              206,
              177,
              206,
              178,
              206,
              181,
              225,
              191,
              150,
              206,
              189,
              32,
              225,
              188,
              161,
              206,
              188,
              225,
              191,
              150,
              206,
              189,
              32,
              206,
              181,
              225,
              188,
              182,
              206,
              189,
              206,
              177,
              206,
              185,
              32,
              207,
              132,
              225,
              189,
              180,
              206,
              189,
              32,
              207,
              128,
              207,
              129,
              225,
              189,
              189,
              207,
              132,
              206,
              183,
              206,
              189,
              44,
              32,
              225,
              189,
              133,
              207,
              128,
              207,
              137,
              207,
              130,
              32,
              207,
              132,
              206,
              191,
              225,
              189,
              186,
              207,
              130,
              32,
              207,
              131,
              207,
              133,
              206,
              188,
              206,
              188,
              225,
              189,
              177,
              207,
              135,
              206,
              191,
              207,
              133,
              207,
              130,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              207,
              131,
              225,
              189,
              189,
              207,
              131,
              206,
              191,
              206,
              188,
              206,
              181,
              206,
              189,
              46,
              32,
              225,
              188,
              144,
              225,
              189,
              176,
              206,
              189,
              32,
              206,
              179,
              225,
              189,
              176,
              207,
              129,
              32,
              207,
              132,
              206,
              191,
              225,
              191,
              166,
              207,
              132,
              206,
              191,
              32,
              206,
              178,
              206,
              181,
              206,
              178,
              206,
              177,
              225,
              189,
              183,
              207,
              137,
              207,
              130,
              32,
              225,
              189,
              145,
              207,
              128,
              225,
              189,
              177,
              207,
              129,
              206,
              190,
              225,
              191,
              131,
              44,
              32,
              207,
              132,
              225,
              189,
              185,
              207,
              132,
              206,
              181,
              32,
              206,
              186,
              206,
              177,
              225,
              189,
              182,
              32,
              207,
              128,
              206,
              181,
              207,
              129,
              225,
              189,
              182,
              32,
              207,
              132,
              206,
              191,
              225,
              191,
              166,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              207,
              132,
              225,
              189,
              183,
              206,
              189,
              206,
              177,
              32,
              207,
              132,
              206,
              185,
              206,
              188,
              207,
              137,
              207,
              129,
              225,
              189,
              181,
              207,
              131,
              206,
              181,
              207,
              132,
              206,
              177,
              225,
              189,
              183,
              32,
              207,
              132,
              206,
              185,
              207,
              130,
              32,
              206,
              186,
              206,
              177,
              225,
              189,
              182,
              32,
              225,
              189,
              131,
              206,
              189,
              32,
              207,
              132,
              207,
              129,
              225,
              189,
              185,
              207,
              128,
              206,
              191,
              206,
              189,
              32,
              225,
              188,
              144,
              206,
              190,
              225,
              189,
              179,
              207,
              131,
              207,
              132,
              206,
              177,
              206,
              185,
              32,
              207,
              131,
              206,
              186,
              206,
              191,
              207,
              128,
              206,
              181,
              225,
              191,
              150,
              206,
              189,
              206,
              135,
              32,
              207,
              128,
              207,
              129,
              225,
              189,
              182,
              206,
              189,
              32,
              206,
              180,
              225,
              189,
              178,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              207,
              132,
              225,
              189,
              180,
              206,
              189,
              32,
              225,
              188,
              128,
              207,
              129,
              207,
              135,
              225,
              189,
              180,
              206,
              189,
              32,
              225,
              189,
              128,
              207,
              129,
              206,
              184,
              225,
              191,
              182,
              207,
              130,
              32,
              225,
              189,
              145,
              207,
              128,
              206,
              191,
              206,
              184,
              225,
              189,
              179,
              207,
              131,
              206,
              184,
              206,
              177,
              206,
              185,
              44,
              32,
              206,
              188,
              225,
              189,
              177,
              207,
              132,
              206,
              177,
              206,
              185,
              206,
              191,
              206,
              189,
              32,
              225,
              188,
              161,
              206,
              179,
              206,
              191,
              225,
              191,
              166,
              206,
              188,
              206,
              177,
              206,
              185,
              32,
              207,
              128,
              206,
              181,
              207,
              129,
              225,
              189,
              182,
              32,
              207,
              132,
              225,
              191,
              134,
              207,
              130,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              207,
              132,
              206,
              181,
              206,
              187,
              206,
              181,
              207,
              133,
              207,
              132,
              225,
              191,
              134,
              207,
              130,
              32,
              225,
              189,
              129,
              206,
              189,
              207,
              132,
              206,
              185,
              206,
              189,
              206,
              191,
              225,
              191,
              166,
              206,
              189,
              32,
              207,
              128,
              206,
              191,
              206,
              185,
              206,
              181,
              225,
              191,
              150,
              207,
              131,
              206,
              184,
              206,
              177,
              206,
              185,
              32,
              206,
              187,
              225,
              189,
              185,
              206,
              179,
              206,
              191,
              206,
              189,
              46,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              206,
              148,
              206,
              183,
              206,
              188,
              206,
              191,
              207,
              131,
              206,
              184,
              225,
              189,
              179,
              206,
              189,
              206,
              191,
              207,
              133,
              207,
              130,
              44,
              32,
              206,
              147,
              225,
              191,
              189,
              32,
              225,
              190,
              191,
              206,
              159,
              206,
              187,
              207,
              133,
              206,
              189,
              206,
              184,
              206,
              185,
              206,
              177,
              206,
              186,
              225,
              189,
              184,
              207,
              130,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              71,
              101,
              111,
              114,
              103,
              105,
              97,
              110,
              58,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              70,
              114,
              111,
              109,
              32,
              97,
              32,
              85,
              110,
              105,
              99,
              111,
              100,
              101,
              32,
              99,
              111,
              110,
              102,
              101,
              114,
              101,
              110,
              99,
              101,
              32,
              105,
              110,
              118,
              105,
              116,
              97,
              116,
              105,
              111,
              110,
              58,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              225,
              131,
              146,
              225,
              131,
              151,
              225,
              131,
              174,
              225,
              131,
              157,
              225,
              131,
              149,
              225,
              131,
              151,
              32,
              225,
              131,
              144,
              225,
              131,
              174,
              225,
              131,
              154,
              225,
              131,
              144,
              225,
              131,
              149,
              225,
              131,
              148,
              32,
              225,
              131,
              146,
              225,
              131,
              144,
              225,
              131,
              152,
              225,
              131,
              144,
              225,
              131,
              160,
              225,
              131,
              157,
              225,
              131,
              151,
              32,
              225,
              131,
              160,
              225,
              131,
              148,
              225,
              131,
              146,
              225,
              131,
              152,
              225,
              131,
              161,
              225,
              131,
              162,
              225,
              131,
              160,
              225,
              131,
              144,
              225,
              131,
              170,
              225,
              131,
              152,
              225,
              131,
              144,
              32,
              85,
              110,
              105,
              99,
              111,
              100,
              101,
              45,
              225,
              131,
              152,
              225,
              131,
              161,
              32,
              225,
              131,
              155,
              225,
              131,
              148,
              225,
              131,
              144,
              225,
              131,
              151,
              225,
              131,
              148,
              32,
              225,
              131,
              161,
              225,
              131,
              144,
              225,
              131,
              148,
              225,
              131,
              160,
              225,
              131,
              151,
              225,
              131,
              144,
              225,
              131,
              168,
              225,
              131,
              157,
              225,
              131,
              160,
              225,
              131,
              152,
              225,
              131,
              161,
              225,
              131,
              157,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              225,
              131,
              153,
              225,
              131,
              157,
              225,
              131,
              156,
              225,
              131,
              164,
              225,
              131,
              148,
              225,
              131,
              160,
              225,
              131,
              148,
              225,
              131,
              156,
              225,
              131,
              170,
              225,
              131,
              152,
              225,
              131,
              144,
              225,
              131,
              150,
              225,
              131,
              148,
              32,
              225,
              131,
              147,
              225,
              131,
              144,
              225,
              131,
              161,
              225,
              131,
              144,
              225,
              131,
              161,
              225,
              131,
              172,
              225,
              131,
              160,
              225,
              131,
              148,
              225,
              131,
              145,
              225,
              131,
              144,
              225,
              131,
              147,
              44,
              32,
              225,
              131,
              160,
              225,
              131,
              157,
              225,
              131,
              155,
              225,
              131,
              148,
              225,
              131,
              154,
              225,
              131,
              152,
              225,
              131,
              170,
              32,
              225,
              131,
              146,
              225,
              131,
              144,
              225,
              131,
              152,
              225,
              131,
              155,
              225,
              131,
              144,
              225,
              131,
              160,
              225,
              131,
              151,
              225,
              131,
              148,
              225,
              131,
              145,
              225,
              131,
              144,
              32,
              49,
              48,
              45,
              49,
              50,
              32,
              225,
              131,
              155,
              225,
              131,
              144,
              225,
              131,
              160,
              225,
              131,
              162,
              225,
              131,
              161,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              225,
              131,
              165,
              46,
              32,
              225,
              131,
              155,
              225,
              131,
              144,
              225,
              131,
              152,
              225,
              131,
              156,
              225,
              131,
              170,
              225,
              131,
              168,
              225,
              131,
              152,
              44,
              32,
              225,
              131,
              146,
              225,
              131,
              148,
              225,
              131,
              160,
              225,
              131,
              155,
              225,
              131,
              144,
              225,
              131,
              156,
              225,
              131,
              152,
              225,
              131,
              144,
              225,
              131,
              168,
              225,
              131,
              152,
              46,
              32,
              225,
              131,
              153,
              225,
              131,
              157,
              225,
              131,
              156,
              225,
              131,
              164,
              225,
              131,
              148,
              225,
              131,
              160,
              225,
              131,
              148,
              225,
              131,
              156,
              225,
              131,
              170,
              225,
              131,
              152,
              225,
              131,
              144,
              32,
              225,
              131,
              168,
              225,
              131,
              148,
              225,
              131,
              176,
              225,
              131,
              153,
              225,
              131,
              160,
              225,
              131,
              148,
              225,
              131,
              145,
              225,
              131,
              161,
              32,
              225,
              131,
              148,
              225,
              131,
              160,
              225,
              131,
              151,
              225,
              131,
              144,
              225,
              131,
              147,
              32,
              225,
              131,
              155,
              225,
              131,
              161,
              225,
              131,
              157,
              225,
              131,
              164,
              225,
              131,
              154,
              225,
              131,
              152,
              225,
              131,
              157,
              225,
              131,
              161,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              225,
              131,
              148,
              225,
              131,
              165,
              225,
              131,
              161,
              225,
              131,
              158,
              225,
              131,
              148,
              225,
              131,
              160,
              225,
              131,
              162,
              225,
              131,
              148,
              225,
              131,
              145,
              225,
              131,
              161,
              32,
              225,
              131,
              152,
              225,
              131,
              161,
              225,
              131,
              148,
              225,
              131,
              151,
              32,
              225,
              131,
              147,
              225,
              131,
              144,
              225,
              131,
              160,
              225,
              131,
              146,
              225,
              131,
              148,
              225,
              131,
              145,
              225,
              131,
              168,
              225,
              131,
              152,
              32,
              225,
              131,
              160,
              225,
              131,
              157,
              225,
              131,
              146,
              225,
              131,
              157,
              225,
              131,
              160,
              225,
              131,
              152,
              225,
              131,
              170,
              225,
              131,
              144,
              225,
              131,
              144,
              32,
              225,
              131,
              152,
              225,
              131,
              156,
              225,
              131,
              162,
              225,
              131,
              148,
              225,
              131,
              160,
              225,
              131,
              156,
              225,
              131,
              148,
              225,
              131,
              162,
              225,
              131,
              152,
              32,
              225,
              131,
              147,
              225,
              131,
              144,
              32,
              85,
              110,
              105,
              99,
              111,
              100,
              101,
              45,
              225,
              131,
              152,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              225,
              131,
              152,
              225,
              131,
              156,
              225,
              131,
              162,
              225,
              131,
              148,
              225,
              131,
              160,
              225,
              131,
              156,
              225,
              131,
              144,
              225,
              131,
              170,
              225,
              131,
              152,
              225,
              131,
              157,
              225,
              131,
              156,
              225,
              131,
              144,
              225,
              131,
              154,
              225,
              131,
              152,
              225,
              131,
              150,
              225,
              131,
              144,
              225,
              131,
              170,
              225,
              131,
              152,
              225,
              131,
              144,
              32,
              225,
              131,
              147,
              225,
              131,
              144,
              32,
              225,
              131,
              154,
              225,
              131,
              157,
              225,
              131,
              153,
              225,
              131,
              144,
              225,
              131,
              154,
              225,
              131,
              152,
              225,
              131,
              150,
              225,
              131,
              144,
              225,
              131,
              170,
              225,
              131,
              152,
              225,
              131,
              144,
              44,
              32,
              85,
              110,
              105,
              99,
              111,
              100,
              101,
              45,
              225,
              131,
              152,
              225,
              131,
              161,
              32,
              225,
              131,
              146,
              225,
              131,
              144,
              225,
              131,
              155,
              225,
              131,
              157,
              225,
              131,
              167,
              225,
              131,
              148,
              225,
              131,
              156,
              225,
              131,
              148,
              225,
              131,
              145,
              225,
              131,
              144,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              225,
              131,
              157,
              225,
              131,
              158,
              225,
              131,
              148,
              225,
              131,
              160,
              225,
              131,
              144,
              225,
              131,
              170,
              225,
              131,
              152,
              225,
              131,
              163,
              225,
              131,
              154,
              32,
              225,
              131,
              161,
              225,
              131,
              152,
              225,
              131,
              161,
              225,
              131,
              162,
              225,
              131,
              148,
              225,
              131,
              155,
              225,
              131,
              148,
              225,
              131,
              145,
              225,
              131,
              161,
              225,
              131,
              144,
              44,
              32,
              225,
              131,
              147,
              225,
              131,
              144,
              32,
              225,
              131,
              146,
              225,
              131,
              144,
              225,
              131,
              155,
              225,
              131,
              157,
              225,
              131,
              167,
              225,
              131,
              148,
              225,
              131,
              156,
              225,
              131,
              148,
              225,
              131,
              145,
              225,
              131,
              152,
              225,
              131,
              151,
              32,
              225,
              131,
              158,
              225,
              131,
              160,
              225,
              131,
              157,
              225,
              131,
              146,
              225,
              131,
              160,
              225,
              131,
              144,
              225,
              131,
              155,
              225,
              131,
              148,
              225,
              131,
              145,
              225,
              131,
              168,
              225,
              131,
              152,
              44,
              32,
              225,
              131,
              168,
              225,
              131,
              160,
              225,
              131,
              152,
              225,
              131,
              164,
              225,
              131,
              162,
              225,
              131,
              148,
              225,
              131,
              145,
              225,
              131,
              168,
              225,
              131,
              152,
              44,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              225,
              131,
              162,
              225,
              131,
              148,
              225,
              131,
              165,
              225,
              131,
              161,
              225,
              131,
              162,
              225,
              131,
              148,
              225,
              131,
              145,
              225,
              131,
              152,
              225,
              131,
              161,
              32,
              225,
              131,
              147,
              225,
              131,
              144,
              225,
              131,
              155,
              225,
              131,
              163,
              225,
              131,
              168,
              225,
              131,
              144,
              225,
              131,
              149,
              225,
              131,
              148,
              225,
              131,
              145,
              225,
              131,
              144,
              225,
              131,
              161,
              225,
              131,
              144,
              32,
              225,
              131,
              147,
              225,
              131,
              144,
              32,
              225,
              131,
              155,
              225,
              131,
              160,
              225,
              131,
              144,
              225,
              131,
              149,
              225,
              131,
              144,
              225,
              131,
              154,
              225,
              131,
              148,
              225,
              131,
              156,
              225,
              131,
              157,
              225,
              131,
              149,
              225,
              131,
              144,
              225,
              131,
              156,
              32,
              225,
              131,
              153,
              225,
              131,
              157,
              225,
              131,
              155,
              225,
              131,
              158,
              225,
              131,
              152,
              225,
              131,
              163,
              225,
              131,
              162,
              225,
              131,
              148,
              225,
              131,
              160,
              225,
              131,
              163,
              225,
              131,
              154,
              32,
              225,
              131,
              161,
              225,
              131,
              152,
              225,
              131,
              161,
              225,
              131,
              162,
              225,
              131,
              148,
              225,
              131,
              155,
              225,
              131,
              148,
              225,
              131,
              145,
              225,
              131,
              168,
              225,
              131,
              152,
              46,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              82,
              117,
              115,
              115,
              105,
              97,
              110,
              58,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              70,
              114,
              111,
              109,
              32,
              97,
              32,
              85,
              110,
              105,
              99,
              111,
              100,
              101,
              32,
              99,
              111,
              110,
              102,
              101,
              114,
              101,
              110,
              99,
              101,
              32,
              105,
              110,
              118,
              105,
              116,
              97,
              116,
              105,
              111,
              110,
              58,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              208,
              151,
              208,
              176,
              209,
              128,
              208,
              181,
              208,
              179,
              208,
              184,
              209,
              129,
              209,
              130,
              209,
              128,
              208,
              184,
              209,
              128,
              209,
              131,
              208,
              185,
              209,
              130,
              208,
              181,
              209,
              129,
              209,
              140,
              32,
              209,
              129,
              208,
              181,
              208,
              185,
              209,
              135,
              208,
              176,
              209,
              129,
              32,
              208,
              189,
              208,
              176,
              32,
              208,
              148,
              208,
              181,
              209,
              129,
              209,
              143,
              209,
              130,
              209,
              131,
              209,
              142,
              32,
              208,
              156,
              208,
              181,
              208,
              182,
              208,
              180,
              209,
              131,
              208,
              189,
              208,
              176,
              209,
              128,
              208,
              190,
              208,
              180,
              208,
              189,
              209,
              131,
              209,
              142,
              32,
              208,
              154,
              208,
              190,
              208,
              189,
              209,
              132,
              208,
              181,
              209,
              128,
              208,
              181,
              208,
              189,
              209,
              134,
              208,
              184,
              209,
              142,
              32,
              208,
              191,
              208,
              190,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              85,
              110,
              105,
              99,
              111,
              100,
              101,
              44,
              32,
              208,
              186,
              208,
              190,
              209,
              130,
              208,
              190,
              209,
              128,
              208,
              176,
              209,
              143,
              32,
              209,
              129,
              208,
              190,
              209,
              129,
              209,
              130,
              208,
              190,
              208,
              184,
              209,
              130,
              209,
              129,
              209,
              143,
              32,
              49,
              48,
              45,
              49,
              50,
              32,
              208,
              188,
              208,
              176,
              209,
              128,
              209,
              130,
              208,
              176,
              32,
              49,
              57,
              57,
              55,
              32,
              208,
              179,
              208,
              190,
              208,
              180,
              208,
              176,
              32,
              208,
              178,
              32,
              208,
              156,
              208,
              176,
              208,
              185,
              208,
              189,
              209,
              134,
              208,
              181,
              32,
              208,
              178,
              32,
              208,
              147,
              208,
              181,
              209,
              128,
              208,
              188,
              208,
              176,
              208,
              189,
              208,
              184,
              208,
              184,
              46,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              208,
              154,
              208,
              190,
              208,
              189,
              209,
              132,
              208,
              181,
              209,
              128,
              208,
              181,
              208,
              189,
              209,
              134,
              208,
              184,
              209,
              143,
              32,
              209,
              129,
              208,
              190,
              208,
              177,
              208,
              181,
              209,
              128,
              208,
              181,
              209,
              130,
              32,
              209,
              136,
              208,
              184,
              209,
              128,
              208,
              190,
              208,
              186,
              208,
              184,
              208,
              185,
              32,
              208,
              186,
              209,
              128,
              209,
              131,
              208,
              179,
              32,
              209,
              141,
              208,
              186,
              209,
              129,
              208,
              191,
              208,
              181,
              209,
              128,
              209,
              130,
              208,
              190,
              208,
              178,
              32,
              208,
              191,
              208,
              190,
              32,
              32,
              208,
              178,
              208,
              190,
              208,
              191,
              209,
              128,
              208,
              190,
              209,
              129,
              208,
              176,
              208,
              188,
              32,
              208,
              179,
              208,
              187,
              208,
              190,
              208,
              177,
              208,
              176,
              208,
              187,
              209,
              140,
              208,
              189,
              208,
              190,
              208,
              179,
              208,
              190,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              208,
              152,
              208,
              189,
              209,
              130,
              208,
              181,
              209,
              128,
              208,
              189,
              208,
              181,
              209,
              130,
              208,
              176,
              32,
              208,
              184,
              32,
              85,
              110,
              105,
              99,
              111,
              100,
              101,
              44,
              32,
              208,
              187,
              208,
              190,
              208,
              186,
              208,
              176,
              208,
              187,
              208,
              184,
              208,
              183,
              208,
              176,
              209,
              134,
              208,
              184,
              208,
              184,
              32,
              208,
              184,
              32,
              208,
              184,
              208,
              189,
              209,
              130,
              208,
              181,
              209,
              128,
              208,
              189,
              208,
              176,
              209,
              134,
              208,
              184,
              208,
              190,
              208,
              189,
              208,
              176,
              208,
              187,
              208,
              184,
              208,
              183,
              208,
              176,
              209,
              134,
              208,
              184,
              208,
              184,
              44,
              32,
              208,
              178,
              208,
              190,
              208,
              191,
              208,
              187,
              208,
              190,
              209,
              137,
              208,
              181,
              208,
              189,
              208,
              184,
              209,
              142,
              32,
              208,
              184,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              208,
              191,
              209,
              128,
              208,
              184,
              208,
              188,
              208,
              181,
              208,
              189,
              208,
              181,
              208,
              189,
              208,
              184,
              209,
              142,
              32,
              85,
              110,
              105,
              99,
              111,
              100,
              101,
              32,
              208,
              178,
              32,
              209,
              128,
              208,
              176,
              208,
              183,
              208,
              187,
              208,
              184,
              209,
              135,
              208,
              189,
              209,
              139,
              209,
              133,
              32,
              208,
              190,
              208,
              191,
              208,
              181,
              209,
              128,
              208,
              176,
              209,
              134,
              208,
              184,
              208,
              190,
              208,
              189,
              208,
              189,
              209,
              139,
              209,
              133,
              32,
              209,
              129,
              208,
              184,
              209,
              129,
              209,
              130,
              208,
              181,
              208,
              188,
              208,
              176,
              209,
              133,
              32,
              208,
              184,
              32,
              208,
              191,
              209,
              128,
              208,
              190,
              208,
              179,
              209,
              128,
              208,
              176,
              208,
              188,
              208,
              188,
              208,
              189,
              209,
              139,
              209,
              133,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              208,
              191,
              209,
              128,
              208,
              184,
              208,
              187,
              208,
              190,
              208,
              182,
              208,
              181,
              208,
              189,
              208,
              184,
              209,
              143,
              209,
              133,
              44,
              32,
              209,
              136,
              209,
              128,
              208,
              184,
              209,
              132,
              209,
              130,
              208,
              176,
              209,
              133,
              44,
              32,
              208,
              178,
              208,
              181,
              209,
              128,
              209,
              129,
              209,
              130,
              208,
              186,
              208,
              181,
              32,
              208,
              184,
              32,
              208,
              188,
              208,
              189,
              208,
              190,
              208,
              179,
              208,
              190,
              209,
              143,
              208,
              183,
              209,
              139,
              209,
              135,
              208,
              189,
              209,
              139,
              209,
              133,
              32,
              208,
              186,
              208,
              190,
              208,
              188,
              208,
              191,
              209,
              140,
              209,
              142,
              209,
              130,
              208,
              181,
              209,
              128,
              208,
              189,
              209,
              139,
              209,
              133,
              32,
              209,
              129,
              208,
              184,
              209,
              129,
              209,
              130,
              208,
              181,
              208,
              188,
              208,
              176,
              209,
              133,
              46,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              84,
              104,
              97,
              105,
              32,
              40,
              85,
              67,
              83,
              32,
              76,
              101,
              118,
              101,
              108,
              32,
              50,
              41,
              58,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              69,
              120,
              99,
              101,
              114,
              112,
              116,
              32,
              102,
              114,
              111,
              109,
              32,
              97,
              32,
              112,
              111,
              101,
              116,
              114,
              121,
              32,
              111,
              110,
              32,
              84,
              104,
              101,
              32,
              82,
              111,
              109,
              97,
              110,
              99,
              101,
              32,
              111,
              102,
              32,
              84,
              104,
              101,
              32,
              84,
              104,
              114,
              101,
              101,
              32,
              75,
              105,
              110,
              103,
              100,
              111,
              109,
              115,
              32,
              40,
              97,
              32,
              67,
              104,
              105,
              110,
              101,
              115,
              101,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              99,
              108,
              97,
              115,
              115,
              105,
              99,
              32,
              39,
              83,
              97,
              110,
              32,
              71,
              117,
              97,
              39,
              41,
              58,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              91,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              124,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              45,
              93,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              224,
              185,
              143,
              32,
              224,
              185,
              129,
              224,
              184,
              156,
              224,
              185,
              136,
              224,
              184,
              153,
              224,
              184,
              148,
              224,
              184,
              180,
              224,
              184,
              153,
              224,
              184,
              174,
              224,
              184,
              177,
              224,
              185,
              136,
              224,
              184,
              153,
              224,
              185,
              128,
              224,
              184,
              170,
              224,
              184,
              183,
              224,
              185,
              136,
              224,
              184,
              173,
              224,
              184,
              161,
              224,
              185,
              130,
              224,
              184,
              151,
              224,
              184,
              163,
              224,
              184,
              161,
              224,
              185,
              129,
              224,
              184,
              170,
              224,
              184,
              153,
              224,
              184,
              170,
              224,
              184,
              177,
              224,
              184,
              135,
              224,
              185,
              128,
              224,
              184,
              167,
              224,
              184,
              138,
              32,
              32,
              224,
              184,
              158,
              224,
              184,
              163,
              224,
              184,
              176,
              224,
              184,
              155,
              224,
              184,
              129,
              224,
              185,
              128,
              224,
              184,
              129,
              224,
              184,
              168,
              224,
              184,
              129,
              224,
              184,
              173,
              224,
              184,
              135,
              224,
              184,
              154,
              224,
              184,
              185,
              224,
              185,
              138,
              224,
              184,
              129,
              224,
              184,
              185,
              224,
              185,
              137,
              224,
              184,
              130,
              224,
              184,
              182,
              224,
              185,
              137,
              224,
              184,
              153,
              224,
              185,
              131,
              224,
              184,
              171,
              224,
              184,
              161,
              224,
              185,
              136,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              224,
              184,
              170,
              224,
              184,
              180,
              224,
              184,
              154,
              224,
              184,
              170,
              224,
              184,
              173,
              224,
              184,
              135,
              224,
              184,
              129,
              224,
              184,
              169,
              224,
              184,
              177,
              224,
              184,
              149,
              224,
              184,
              163,
              224,
              184,
              180,
              224,
              184,
              162,
              224,
              185,
              140,
              224,
              184,
              129,
              224,
              185,
              136,
              224,
              184,
              173,
              224,
              184,
              153,
              224,
              184,
              171,
              224,
              184,
              153,
              224,
              185,
              137,
              224,
              184,
              178,
              224,
              185,
              129,
              224,
              184,
              165,
              224,
              184,
              150,
              224,
              184,
              177,
              224,
              184,
              148,
              224,
              185,
              132,
              224,
              184,
              155,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              224,
              184,
              170,
              224,
              184,
              173,
              224,
              184,
              135,
              224,
              184,
              173,
              224,
              184,
              135,
              224,
              184,
              132,
              224,
              185,
              140,
              224,
              185,
              132,
              224,
              184,
              139,
              224,
              184,
              163,
              224,
              185,
              137,
              224,
              185,
              130,
              224,
              184,
              135,
              224,
              185,
              136,
              224,
              185,
              128,
              224,
              184,
              130,
              224,
              184,
              165,
              224,
              184,
              178,
              224,
              185,
              128,
              224,
              184,
              154,
              224,
              184,
              178,
              224,
              184,
              155,
              224,
              184,
              177,
              224,
              184,
              141,
              224,
              184,
              141,
              224,
              184,
              178,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              224,
              184,
              151,
              224,
              184,
              163,
              224,
              184,
              135,
              224,
              184,
              153,
              224,
              184,
              177,
              224,
              184,
              154,
              224,
              184,
              150,
              224,
              184,
              183,
              224,
              184,
              173,
              224,
              184,
              130,
              224,
              184,
              177,
              224,
              184,
              153,
              224,
              184,
              151,
              224,
              184,
              181,
              224,
              185,
              128,
              224,
              184,
              155,
              224,
              185,
              135,
              224,
              184,
              153,
              224,
              184,
              151,
              224,
              184,
              181,
              224,
              185,
              136,
              224,
              184,
              158,
              224,
              184,
              182,
              224,
              185,
              136,
              224,
              184,
              135,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              224,
              184,
              154,
              224,
              185,
              137,
              224,
              184,
              178,
              224,
              184,
              153,
              224,
              185,
              128,
              224,
              184,
              161,
              224,
              184,
              183,
              224,
              184,
              173,
              224,
              184,
              135,
              224,
              184,
              136,
              224,
              184,
              182,
              224,
              184,
              135,
              224,
              184,
              167,
              224,
              184,
              180,
              224,
              184,
              155,
              224,
              184,
              163,
              224,
              184,
              180,
              224,
              184,
              149,
              224,
              185,
              128,
              224,
              184,
              155,
              224,
              185,
              135,
              224,
              184,
              153,
              224,
              184,
              153,
              224,
              184,
              177,
              224,
              184,
              129,
              224,
              184,
              171,
              224,
              184,
              153,
              224,
              184,
              178,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              224,
              185,
              130,
              224,
              184,
              174,
              224,
              184,
              136,
              224,
              184,
              180,
              224,
              185,
              139,
              224,
              184,
              153,
              224,
              185,
              128,
              224,
              184,
              163,
              224,
              184,
              181,
              224,
              184,
              162,
              224,
              184,
              129,
              224,
              184,
              151,
              224,
              184,
              177,
              224,
              184,
              158,
              224,
              184,
              151,
              224,
              184,
              177,
              224,
              185,
              136,
              224,
              184,
              167,
              224,
              184,
              171,
              224,
              184,
              177,
              224,
              184,
              167,
              224,
              185,
              128,
              224,
              184,
              161,
              224,
              184,
              183,
              224,
              184,
              173,
              224,
              184,
              135,
              224,
              184,
              161,
              224,
              184,
              178,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              224,
              184,
              171,
              224,
              184,
              161,
              224,
              184,
              178,
              224,
              184,
              162,
              224,
              184,
              136,
              224,
              184,
              176,
              224,
              184,
              134,
              224,
              185,
              136,
              224,
              184,
              178,
              224,
              184,
              161,
              224,
              184,
              148,
              224,
              184,
              138,
              224,
              184,
              177,
              224,
              185,
              136,
              224,
              184,
              167,
              224,
              184,
              149,
              224,
              184,
              177,
              224,
              184,
              167,
              224,
              184,
              170,
              224,
              184,
              179,
              224,
              184,
              132,
              224,
              184,
              177,
              224,
              184,
              141,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              224,
              185,
              128,
              224,
              184,
              171,
              224,
              184,
              161,
              224,
              184,
              183,
              224,
              184,
              173,
              224,
              184,
              153,
              224,
              184,
              130,
              224,
              184,
              177,
              224,
              184,
              154,
              224,
              185,
              132,
              224,
              184,
              170,
              224,
              185,
              132,
              224,
              184,
              165,
              224,
              185,
              136,
              224,
              185,
              128,
              224,
              184,
              170,
              224,
              184,
              183,
              224,
              184,
              173,
              224,
              184,
              136,
              224,
              184,
              178,
              224,
              184,
              129,
              224,
              185,
              128,
              224,
              184,
              132,
              224,
              184,
              171,
              224,
              184,
              178,
              32,
              32,
              32,
              32,
              32,
              32,
              224,
              184,
              163,
              224,
              184,
              177,
              224,
              184,
              154,
              224,
              184,
              171,
              224,
              184,
              161,
              224,
              184,
              178,
              224,
              184,
              155,
              224,
              185,
              136,
              224,
              184,
              178,
              224,
              185,
              128,
              224,
              184,
              130,
              224,
              185,
              137,
              224,
              184,
              178,
              224,
              184,
              161,
              224,
              184,
              178,
              224,
              185,
              128,
              224,
              184,
              165,
              224,
              184,
              162,
              224,
              184,
              173,
              224,
              184,
              178,
              224,
              184,
              170,
              224,
              184,
              177,
              224,
              184,
              141,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              224,
              184,
              157,
              224,
              185,
              136,
              224,
              184,
              178,
              224,
              184,
              162,
              224,
              184,
              173,
              224,
              185,
              137,
              224,
              184,
              173,
              224,
              184,
              135,
              224,
              184,
              173,
              224,
              184,
              184,
              224,
              185,
              137,
              224,
              184,
              153,
              224,
              184,
              162,
              224,
              184,
              184,
              224,
              185,
              129,
              224,
              184,
              162,
              224,
              184,
              129,
              224,
              185,
              131,
              224,
              184,
              171,
              224,
              185,
              137,
              224,
              185,
              129,
              224,
              184,
              149,
              224,
              184,
              129,
              224,
              184,
              129,
              224,
              184,
              177,
              224,
              184,
              153,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              224,
              185,
              131,
              224,
              184,
              138,
              224,
              185,
              137,
              224,
              184,
              170,
              224,
              184,
              178,
              224,
              184,
              167,
              224,
              184,
              153,
              224,
              184,
              177,
              224,
              185,
              137,
              224,
              184,
              153,
              224,
              185,
              128,
              224,
              184,
              155,
              224,
              185,
              135,
              224,
              184,
              153,
              224,
              184,
              138,
              224,
              184,
              153,
              224,
              184,
              167,
              224,
              184,
              153,
              224,
              184,
              138,
              224,
              184,
              183,
              224,
              185,
              136,
              224,
              184,
              153,
              224,
              184,
              138,
              224,
              184,
              167,
              224,
              184,
              153,
              224,
              185,
              131,
              224,
              184,
              136,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              224,
              184,
              158,
              224,
              184,
              165,
              224,
              184,
              177,
              224,
              184,
              153,
              224,
              184,
              165,
              224,
              184,
              180,
              224,
              184,
              137,
              224,
              184,
              184,
              224,
              184,
              162,
              224,
              184,
              129,
              224,
              184,
              184,
              224,
              184,
              162,
              224,
              184,
              129,
              224,
              184,
              181,
              224,
              184,
              129,
              224,
              184,
              165,
              224,
              184,
              177,
              224,
              184,
              154,
              224,
              184,
              129,
              224,
              185,
              136,
              224,
              184,
              173,
              224,
              185,
              128,
              224,
              184,
              171,
              224,
              184,
              149,
              224,
              184,
              184,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              224,
              184,
              138,
              224,
              185,
              136,
              224,
              184,
              178,
              224,
              184,
              135,
              224,
              184,
              173,
              224,
              184,
              178,
              224,
              185,
              128,
              224,
              184,
              158,
              224,
              184,
              168,
              224,
              184,
              136,
              224,
              184,
              163,
              224,
              184,
              180,
              224,
              184,
              135,
              224,
              184,
              171,
              224,
              184,
              153,
              224,
              184,
              178,
              224,
              184,
              159,
              224,
              185,
              137,
              224,
              184,
              178,
              224,
              184,
              163,
              224,
              185,
              137,
              224,
              184,
              173,
              224,
              184,
              135,
              224,
              185,
              132,
              224,
              184,
              171,
              224,
              185,
              137,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              224,
              184,
              149,
              224,
              185,
              137,
              224,
              184,
              173,
              224,
              184,
              135,
              224,
              184,
              163,
              224,
              184,
              154,
              224,
              184,
              163,
              224,
              184,
              178,
              224,
              184,
              134,
              224,
              185,
              136,
              224,
              184,
              178,
              224,
              184,
              159,
              224,
              184,
              177,
              224,
              184,
              153,
              224,
              184,
              136,
              224,
              184,
              153,
              224,
              184,
              154,
              224,
              184,
              163,
              224,
              184,
              163,
              224,
              184,
              165,
              224,
              184,
              177,
              224,
              184,
              162,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              224,
              184,
              164,
              224,
              185,
              133,
              224,
              184,
              171,
              224,
              184,
              178,
              224,
              185,
              131,
              224,
              184,
              132,
              224,
              184,
              163,
              224,
              184,
              132,
              224,
              185,
              137,
              224,
              184,
              179,
              224,
              184,
              138,
              224,
              184,
              185,
              224,
              184,
              129,
              224,
              184,
              185,
              224,
              185,
              137,
              224,
              184,
              154,
              224,
              184,
              163,
              224,
              184,
              163,
              224,
              184,
              165,
              224,
              184,
              177,
              224,
              184,
              135,
              224,
              184,
              129,
              224,
              185,
              140,
              32,
              224,
              184,
              175,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              40,
              84,
              104,
              101,
              32,
              97,
              98,
              111,
              118,
              101,
              32,
              105,
              115,
              32,
              97,
              32,
              116,
              119,
              111,
              45,
              99,
              111,
              108,
              117,
              109,
              110,
              32,
              116,
              101,
              120,
              116,
              46,
              32,
              73,
              102,
              32,
              99,
              111,
              109,
              98,
              105,
              110,
              105,
              110,
              103,
              32,
              99,
              104,
              97,
              114,
              97,
              99,
              116,
              101,
              114,
              115,
              32,
              97,
              114,
              101,
              32,
              104,
              97,
              110,
              100,
              108,
              101,
              100,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              99,
              111,
              114,
              114,
              101,
              99,
              116,
              108,
              121,
              44,
              32,
              116,
              104,
              101,
              32,
              108,
              105,
              110,
              101,
              115,
              32,
              111,
              102,
              32,
              116,
              104,
              101,
              32,
              115,
              101,
              99,
              111,
              110,
              100,
              32,
              99,
              111,
              108,
              117,
              109,
              110,
              32,
              115,
              104,
              111,
              117,
              108,
              100,
              32,
              98,
              101,
              32,
              97,
              108,
              105,
              103,
              110,
              101,
              100,
              32,
              119,
              105,
              116,
              104,
              32,
              116,
              104,
              101,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              124,
              32,
              99,
              104,
              97,
              114,
              97,
              99,
              116,
              101,
              114,
              32,
              97,
              98,
              111,
              118,
              101,
              46,
              41,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              69,
              116,
              104,
              105,
              111,
              112,
              105,
              97,
              110,
              58,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              80,
              114,
              111,
              118,
              101,
              114,
              98,
              115,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              65,
              109,
              104,
              97,
              114,
              105,
              99,
              32,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              58,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              225,
              136,
              176,
              225,
              136,
              155,
              225,
              139,
              173,
              32,
              225,
              138,
              160,
              225,
              139,
              173,
              225,
              137,
              179,
              225,
              136,
              168,
              225,
              136,
              181,
              32,
              225,
              138,
              149,
              225,
              140,
              137,
              225,
              136,
              165,
              32,
              225,
              138,
              160,
              225,
              139,
              173,
              225,
              138,
              168,
              225,
              136,
              176,
              225,
              136,
              181,
              225,
              141,
              162,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              225,
              137,
              165,
              225,
              136,
              139,
              32,
              225,
              138,
              171,
              225,
              136,
              136,
              225,
              138,
              157,
              32,
              225,
              138,
              165,
              225,
              138,
              149,
              225,
              139,
              176,
              225,
              138,
              160,
              225,
              137,
              163,
              225,
              137,
              180,
              32,
              225,
              137,
              160,
              225,
              137,
              134,
              225,
              136,
              152,
              225,
              140,
              160,
              225,
              138,
              157,
              225,
              141,
              162,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              225,
              140,
              140,
              225,
              140,
              165,
              32,
              225,
              139,
              171,
              225,
              136,
              136,
              225,
              137,
              164,
              225,
              137,
              177,
              32,
              225,
              137,
              129,
              225,
              136,
              157,
              225,
              140,
              165,
              225,
              138,
              147,
              32,
              225,
              138,
              144,
              225,
              139,
              141,
              225,
              141,
              162,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              225,
              139,
              176,
              225,
              136,
              128,
              32,
              225,
              137,
              160,
              225,
              136,
              149,
              225,
              136,
              141,
              225,
              136,
              153,
              32,
              225,
              137,
              133,
              225,
              137,
              164,
              32,
              225,
              137,
              163,
              225,
              139,
              173,
              225,
              140,
              160,
              225,
              140,
              163,
              32,
              225,
              138,
              149,
              225,
              140,
              163,
              225,
              137,
              181,
              32,
              225,
              137,
              160,
              225,
              140,
              136,
              225,
              139,
              176,
              225,
              136,
              136,
              225,
              139,
              141,
              225,
              141,
              162,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              225,
              139,
              168,
              225,
              138,
              160,
              225,
              141,
              141,
              32,
              225,
              139,
              136,
              225,
              136,
              136,
              225,
              136,
              157,
              225,
              137,
              179,
              32,
              225,
              137,
              160,
              225,
              137,
              133,
              225,
              137,
              164,
              32,
              225,
              138,
              160,
              225,
              139,
              173,
              225,
              137,
              179,
              225,
              136,
              189,
              225,
              136,
              157,
              225,
              141,
              162,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              225,
              138,
              160,
              225,
              139,
              173,
              225,
              140,
              165,
              32,
              225,
              137,
              160,
              225,
              137,
              160,
              225,
              136,
              139,
              32,
              225,
              139,
              179,
              225,
              139,
              139,
              32,
              225,
              137,
              176,
              225,
              136,
              152,
              225,
              137,
              179,
              225,
              141,
              162,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              225,
              136,
              178,
              225,
              137,
              176,
              225,
              136,
              168,
              225,
              140,
              137,
              225,
              136,
              153,
              32,
              225,
              139,
              173,
              225,
              139,
              176,
              225,
              136,
              168,
              225,
              140,
              141,
              225,
              136,
              153,
              225,
              141,
              162,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              225,
              137,
              128,
              225,
              136,
              181,
              32,
              225,
              137,
              160,
              225,
              137,
              128,
              225,
              136,
              181,
              225,
              141,
              165,
              32,
              225,
              139,
              149,
              225,
              138,
              149,
              225,
              137,
              129,
              225,
              136,
              139,
              225,
              136,
              141,
              32,
              225,
              137,
              160,
              225,
              138,
              165,
              225,
              140,
              141,
              225,
              136,
              169,
              32,
              225,
              139,
              173,
              225,
              136,
              132,
              225,
              139,
              179,
              225,
              136,
              141,
              225,
              141,
              162,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              225,
              139,
              181,
              225,
              136,
              173,
              32,
              225,
              137,
              162,
              225,
              139,
              171,
              225,
              137,
              165,
              225,
              136,
              173,
              32,
              225,
              138,
              160,
              225,
              138,
              149,
              225,
              137,
              160,
              225,
              136,
              179,
              32,
              225,
              139,
              171,
              225,
              136,
              181,
              225,
              136,
              173,
              225,
              141,
              162,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              225,
              136,
              176,
              225,
              139,
              141,
              32,
              225,
              138,
              165,
              225,
              138,
              149,
              225,
              139,
              176,
              225,
              137,
              164,
              225,
              137,
              177,
              32,
              225,
              138,
              165,
              225,
              138,
              149,
              225,
              140,
              133,
              32,
              225,
              138,
              165,
              225,
              138,
              149,
              225,
              139,
              176,
              32,
              225,
              140,
              137,
              225,
              136,
              168,
              225,
              137,
              164,
              225,
              137,
              177,
              32,
              225,
              138,
              160,
              225,
              139,
              173,
              225,
              137,
              176,
              225,
              139,
              179,
              225,
              139,
              176,
              225,
              136,
              173,
              225,
              136,
              157,
              225,
              141,
              162,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              225,
              138,
              165,
              225,
              140,
              141,
              225,
              139,
              156,
              225,
              136,
              173,
              32,
              225,
              139,
              168,
              225,
              138,
              168,
              225,
              141,
              136,
              225,
              137,
              176,
              225,
              139,
              141,
              225,
              138,
              149,
              32,
              225,
              140,
              137,
              225,
              136,
              174,
              225,
              136,
              174,
              32,
              225,
              136,
              179,
              225,
              139,
              173,
              225,
              139,
              152,
              225,
              140,
              139,
              225,
              139,
              141,
              32,
              225,
              138,
              160,
              225,
              139,
              173,
              225,
              139,
              181,
              225,
              136,
              173,
              225,
              136,
              157,
              225,
              141,
              162,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              225,
              139,
              168,
              225,
              140,
              142,
              225,
              136,
              168,
              225,
              137,
              164,
              225,
              137,
              181,
              32,
              225,
              136,
              140,
              225,
              137,
              163,
              225,
              141,
              165,
              32,
              225,
              137,
              162,
              225,
              139,
              171,
              225,
              139,
              169,
              225,
              137,
              181,
              32,
              225,
              139,
              173,
              225,
              136,
              181,
              225,
              137,
              133,
              32,
              225,
              137,
              163,
              225,
              139,
              171,
              225,
              139,
              169,
              225,
              137,
              181,
              32,
              225,
              139,
              171,
              225,
              140,
              160,
              225,
              136,
              141,
              225,
              137,
              133,
              225,
              141,
              162,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              225,
              136,
              165,
              225,
              136,
              171,
              32,
              225,
              138,
              168,
              225,
              136,
              152,
              225,
              141,
              141,
              225,
              137,
              179,
              225,
              137,
              181,
              32,
              225,
              136,
              141,
              225,
              140,
              132,
              225,
              138,
              149,
              32,
              225,
              136,
              139,
              225,
              141,
              139,
              225,
              137,
              179,
              225,
              137,
              181,
              225,
              141,
              162,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              225,
              139,
              147,
              225,
              137,
              163,
              225,
              139,
              173,
              32,
              225,
              136,
              155,
              225,
              139,
              176,
              225,
              136,
              170,
              225,
              139,
              171,
              32,
              225,
              139,
              168,
              225,
              136,
              136,
              225,
              139,
              141,
              225,
              141,
              165,
              32,
              225,
              140,
              141,
              225,
              138,
              149,
              225,
              139,
              181,
              32,
              225,
              139,
              173,
              225,
              139,
              158,
              32,
              225,
              139,
              173,
              225,
              139,
              158,
              225,
              136,
              171,
              225,
              136,
              141,
              225,
              141,
              162,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              225,
              139,
              168,
              225,
              138,
              165,
              225,
              136,
              181,
              225,
              136,
              139,
              225,
              136,
              157,
              32,
              225,
              138,
              160,
              225,
              140,
              136,
              225,
              136,
              169,
              32,
              225,
              136,
              152,
              225,
              138,
              171,
              32,
              225,
              139,
              168,
              225,
              138,
              160,
              225,
              136,
              158,
              225,
              136,
              171,
              32,
              225,
              138,
              160,
              225,
              140,
              136,
              225,
              136,
              169,
              32,
              225,
              139,
              139,
              225,
              136,
              173,
              225,
              138,
              171,
              225,
              141,
              162,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              225,
              137,
              176,
              225,
              138,
              149,
              225,
              140,
              139,
              225,
              136,
              142,
              32,
              225,
              137,
              162,
              225,
              137,
              176,
              225,
              141,
              137,
              32,
              225,
              137,
              176,
              225,
              136,
              152,
              225,
              136,
              141,
              225,
              136,
              182,
              32,
              225,
              137,
              163,
              225,
              141,
              137,
              225,
              141,
              162,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              225,
              139,
              136,
              225,
              139,
              179,
              225,
              140,
              133,
              225,
              136,
              133,
              32,
              225,
              136,
              155,
              225,
              136,
              173,
              32,
              225,
              137,
              162,
              225,
              136,
              134,
              225,
              138,
              149,
              32,
              225,
              140,
              168,
              225,
              136,
              173,
              225,
              136,
              181,
              225,
              136,
              133,
              32,
              225,
              138,
              160,
              225,
              137,
              181,
              225,
              136,
              139,
              225,
              136,
              176,
              225,
              139,
              141,
              225,
              141,
              162,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              225,
              138,
              165,
              225,
              140,
              141,
              225,
              136,
              173,
              225,
              136,
              133,
              225,
              138,
              149,
              32,
              225,
              137,
              160,
              225,
              141,
              141,
              225,
              136,
              171,
              225,
              136,
              189,
              225,
              136,
              133,
              32,
              225,
              136,
              141,
              225,
              138,
              173,
              32,
              225,
              139,
              152,
              225,
              136,
              173,
              225,
              140,
              139,
              225,
              141,
              162,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              82,
              117,
              110,
              101,
              115,
              58,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              225,
              154,
              187,
              225,
              155,
              150,
              32,
              225,
              154,
              179,
              225,
              154,
              185,
              225,
              154,
              171,
              225,
              154,
              166,
              32,
              225,
              154,
              166,
              225,
              154,
              171,
              225,
              155,
              143,
              32,
              225,
              154,
              187,
              225,
              155,
              150,
              32,
              225,
              155,
              146,
              225,
              154,
              162,
              225,
              155,
              158,
              225,
              155,
              150,
              32,
              225,
              154,
              169,
              225,
              154,
              190,
              32,
              225,
              154,
              166,
              225,
              154,
              171,
              225,
              155,
              151,
              32,
              225,
              155,
              154,
              225,
              154,
              170,
              225,
              154,
              190,
              225,
              155,
              158,
              225,
              155,
              150,
              32,
              225,
              154,
              190,
              225,
              154,
              169,
              225,
              154,
              177,
              225,
              154,
              166,
              225,
              154,
              185,
              225,
              155,
              150,
              225,
              154,
              170,
              225,
              154,
              177,
              225,
              155,
              158,
              225,
              154,
              162,
              225,
              155,
              151,
              32,
              225,
              154,
              185,
              225,
              155,
              129,
              225,
              154,
              166,
              32,
              225,
              154,
              166,
              225,
              154,
              170,
              32,
              225,
              154,
              185,
              225,
              155,
              150,
              225,
              155,
              165,
              225,
              154,
              171,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              40,
              79,
              108,
              100,
              32,
              69,
              110,
              103,
              108,
              105,
              115,
              104,
              44,
              32,
              119,
              104,
              105,
              99,
              104,
              32,
              116,
              114,
              97,
              110,
              115,
              99,
              114,
              105,
              98,
              101,
              100,
              32,
              105,
              110,
              116,
              111,
              32,
              76,
              97,
              116,
              105,
              110,
              32,
              114,
              101,
              97,
              100,
              115,
              32,
              39,
              72,
              101,
              32,
              99,
              119,
              97,
              101,
              116,
              104,
              32,
              116,
              104,
              97,
              116,
              32,
              104,
              101,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              98,
              117,
              100,
              101,
              32,
              116,
              104,
              97,
              101,
              109,
              32,
              108,
              97,
              110,
              100,
              101,
              32,
              110,
              111,
              114,
              116,
              104,
              119,
              101,
              97,
              114,
              100,
              117,
              109,
              32,
              119,
              105,
              116,
              104,
              32,
              116,
              104,
              97,
              32,
              87,
              101,
              115,
              116,
              115,
              97,
              101,
              46,
              39,
              32,
              97,
              110,
              100,
              32,
              109,
              101,
              97,
              110,
              115,
              32,
              39,
              72,
              101,
              32,
              115,
              97,
              105,
              100,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              116,
              104,
              97,
              116,
              32,
              104,
              101,
              32,
              108,
              105,
              118,
              101,
              100,
              32,
              105,
              110,
              32,
              116,
              104,
              101,
              32,
              110,
              111,
              114,
              116,
              104,
              101,
              114,
              110,
              32,
              108,
              97,
              110,
              100,
              32,
              110,
              101,
              97,
              114,
              32,
              116,
              104,
              101,
              32,
              87,
              101,
              115,
              116,
              101,
              114,
              110,
              32,
              83,
              101,
              97,
              46,
              39,
              41,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              66,
              114,
              97,
              105,
              108,
              108,
              101,
              58,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              161,
              140,
              226,
              160,
              129,
              226,
              160,
              167,
              226,
              160,
              145,
              32,
              226,
              160,
              188,
              226,
              160,
              129,
              226,
              160,
              146,
              32,
              32,
              226,
              161,
              141,
              226,
              160,
              156,
              226,
              160,
              135,
              226,
              160,
              145,
              226,
              160,
              185,
              226,
              160,
              176,
              226,
              160,
              142,
              32,
              226,
              161,
              163,
              226,
              160,
              149,
              226,
              160,
              140,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              161,
              141,
              226,
              160,
              156,
              226,
              160,
              135,
              226,
              160,
              145,
              226,
              160,
              185,
              32,
              226,
              160,
              186,
              226,
              160,
              129,
              226,
              160,
              142,
              32,
              226,
              160,
              153,
              226,
              160,
              145,
              226,
              160,
              129,
              226,
              160,
              153,
              226,
              160,
              146,
              32,
              226,
              160,
              158,
              226,
              160,
              149,
              32,
              226,
              160,
              131,
              226,
              160,
              145,
              226,
              160,
              155,
              226,
              160,
              148,
              32,
              226,
              160,
              186,
              226,
              160,
              138,
              226,
              160,
              185,
              226,
              160,
              178,
              32,
              226,
              161,
              185,
              226,
              160,
              187,
              226,
              160,
              145,
              32,
              226,
              160,
              138,
              226,
              160,
              142,
              32,
              226,
              160,
              157,
              226,
              160,
              149,
              32,
              226,
              160,
              153,
              226,
              160,
              179,
              226,
              160,
              131,
              226,
              160,
              158,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              160,
              177,
              226,
              160,
              129,
              226,
              160,
              158,
              226,
              160,
              145,
              226,
              160,
              167,
              226,
              160,
              187,
              32,
              226,
              160,
              129,
              226,
              160,
              131,
              226,
              160,
              179,
              226,
              160,
              158,
              32,
              226,
              160,
              185,
              226,
              160,
              129,
              226,
              160,
              158,
              226,
              160,
              178,
              32,
              226,
              161,
              185,
              226,
              160,
              145,
              32,
              226,
              160,
              151,
              226,
              160,
              145,
              226,
              160,
              155,
              226,
              160,
              138,
              226,
              160,
              140,
              226,
              160,
              187,
              32,
              226,
              160,
              149,
              226,
              160,
              139,
              32,
              226,
              160,
              153,
              226,
              160,
              138,
              226,
              160,
              142,
              32,
              226,
              160,
              131,
              226,
              160,
              165,
              226,
              160,
              151,
              226,
              160,
              138,
              226,
              160,
              129,
              226,
              160,
              135,
              32,
              226,
              160,
              186,
              226,
              160,
              129,
              226,
              160,
              142,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              160,
              142,
              226,
              160,
              138,
              226,
              160,
              155,
              226,
              160,
              157,
              226,
              160,
              171,
              32,
              226,
              160,
              131,
              226,
              160,
              185,
              32,
              226,
              160,
              185,
              226,
              160,
              145,
              32,
              226,
              160,
              138,
              226,
              160,
              135,
              226,
              160,
              187,
              226,
              160,
              155,
              226,
              160,
              185,
              226,
              160,
              141,
              226,
              160,
              129,
              226,
              160,
              157,
              226,
              160,
              130,
              32,
              226,
              160,
              185,
              226,
              160,
              145,
              32,
              226,
              160,
              138,
              226,
              160,
              135,
              226,
              160,
              187,
              226,
              160,
              133,
              226,
              160,
              130,
              32,
              226,
              160,
              185,
              226,
              160,
              145,
              32,
              226,
              160,
              165,
              226,
              160,
              157,
              226,
              160,
              153,
              226,
              160,
              187,
              226,
              160,
              158,
              226,
              160,
              129,
              226,
              160,
              133,
              226,
              160,
              187,
              226,
              160,
              130,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              160,
              129,
              226,
              160,
              157,
              226,
              160,
              153,
              32,
              226,
              160,
              185,
              226,
              160,
              145,
              32,
              226,
              160,
              161,
              226,
              160,
              138,
              226,
              160,
              145,
              226,
              160,
              139,
              32,
              226,
              160,
              141,
              226,
              160,
              179,
              226,
              160,
              151,
              226,
              160,
              157,
              226,
              160,
              187,
              226,
              160,
              178,
              32,
              226,
              161,
              142,
              226,
              160,
              138,
              226,
              160,
              151,
              226,
              160,
              149,
              226,
              160,
              149,
              226,
              160,
              155,
              226,
              160,
              145,
              32,
              226,
              160,
              142,
              226,
              160,
              138,
              226,
              160,
              155,
              226,
              160,
              157,
              226,
              160,
              171,
              32,
              226,
              160,
              138,
              226,
              160,
              158,
              226,
              160,
              178,
              32,
              226,
              161,
              129,
              226,
              160,
              157,
              226,
              160,
              153,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              161,
              142,
              226,
              160,
              138,
              226,
              160,
              151,
              226,
              160,
              149,
              226,
              160,
              149,
              226,
              160,
              155,
              226,
              160,
              145,
              226,
              160,
              176,
              226,
              160,
              142,
              32,
              226,
              160,
              157,
              226,
              160,
              129,
              226,
              160,
              141,
              226,
              160,
              145,
              32,
              226,
              160,
              186,
              226,
              160,
              129,
              226,
              160,
              142,
              32,
              226,
              160,
              155,
              226,
              160,
              149,
              226,
              160,
              149,
              226,
              160,
              153,
              32,
              226,
              160,
              165,
              226,
              160,
              143,
              226,
              160,
              149,
              226,
              160,
              157,
              32,
              226,
              160,
              176,
              226,
              161,
              161,
              226,
              160,
              129,
              226,
              160,
              157,
              226,
              160,
              155,
              226,
              160,
              145,
              226,
              160,
              130,
              32,
              226,
              160,
              139,
              226,
              160,
              149,
              226,
              160,
              151,
              32,
              226,
              160,
              129,
              226,
              160,
              157,
              226,
              160,
              185,
              226,
              160,
              185,
              226,
              160,
              148,
              226,
              160,
              155,
              32,
              226,
              160,
              153,
              226,
              160,
              145,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              160,
              161,
              226,
              160,
              149,
              226,
              160,
              142,
              226,
              160,
              145,
              32,
              226,
              160,
              158,
              226,
              160,
              149,
              32,
              226,
              160,
              143,
              226,
              160,
              165,
              226,
              160,
              158,
              32,
              226,
              160,
              153,
              226,
              160,
              138,
              226,
              160,
              142,
              32,
              226,
              160,
              153,
              226,
              160,
              129,
              226,
              160,
              157,
              226,
              160,
              153,
              32,
              226,
              160,
              158,
              226,
              160,
              149,
              226,
              160,
              178,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              161,
              149,
              226,
              160,
              135,
              226,
              160,
              153,
              32,
              226,
              161,
              141,
              226,
              160,
              156,
              226,
              160,
              135,
              226,
              160,
              145,
              226,
              160,
              185,
              32,
              226,
              160,
              186,
              226,
              160,
              129,
              226,
              160,
              142,
              32,
              226,
              160,
              129,
              226,
              160,
              142,
              32,
              226,
              160,
              153,
              226,
              160,
              145,
              226,
              160,
              129,
              226,
              160,
              153,
              32,
              226,
              160,
              129,
              226,
              160,
              142,
              32,
              226,
              160,
              129,
              32,
              226,
              160,
              153,
              226,
              160,
              149,
              226,
              160,
              149,
              226,
              160,
              151,
              226,
              160,
              164,
              226,
              160,
              157,
              226,
              160,
              129,
              226,
              160,
              138,
              226,
              160,
              135,
              226,
              160,
              178,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              161,
              141,
              226,
              160,
              148,
              226,
              160,
              153,
              226,
              160,
              150,
              32,
              226,
              161,
              138,
              32,
              226,
              160,
              153,
              226,
              160,
              149,
              226,
              160,
              157,
              226,
              160,
              176,
              226,
              160,
              158,
              32,
              226,
              160,
              141,
              226,
              160,
              145,
              226,
              160,
              129,
              226,
              160,
              157,
              32,
              226,
              160,
              158,
              226,
              160,
              149,
              32,
              226,
              160,
              142,
              226,
              160,
              129,
              226,
              160,
              185,
              32,
              226,
              160,
              185,
              226,
              160,
              129,
              226,
              160,
              158,
              32,
              226,
              161,
              138,
              32,
              226,
              160,
              133,
              226,
              160,
              157,
              226,
              160,
              170,
              226,
              160,
              130,
              32,
              226,
              160,
              149,
              226,
              160,
              139,
              32,
              226,
              160,
              141,
              226,
              160,
              185,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              160,
              170,
              226,
              160,
              157,
              32,
              226,
              160,
              133,
              226,
              160,
              157,
              226,
              160,
              170,
              226,
              160,
              135,
              226,
              160,
              171,
              226,
              160,
              155,
              226,
              160,
              145,
              226,
              160,
              130,
              32,
              226,
              160,
              177,
              226,
              160,
              129,
              226,
              160,
              158,
              32,
              226,
              160,
              185,
              226,
              160,
              187,
              226,
              160,
              145,
              32,
              226,
              160,
              138,
              226,
              160,
              142,
              32,
              226,
              160,
              143,
              226,
              160,
              156,
              226,
              160,
              158,
              226,
              160,
              138,
              226,
              160,
              138,
              226,
              160,
              165,
              226,
              160,
              135,
              226,
              160,
              156,
              226,
              160,
              135,
              226,
              160,
              185,
              32,
              226,
              160,
              153,
              226,
              160,
              145,
              226,
              160,
              129,
              226,
              160,
              153,
              32,
              226,
              160,
              129,
              226,
              160,
              131,
              226,
              160,
              179,
              226,
              160,
              158,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              160,
              129,
              32,
              226,
              160,
              153,
              226,
              160,
              149,
              226,
              160,
              149,
              226,
              160,
              151,
              226,
              160,
              164,
              226,
              160,
              157,
              226,
              160,
              129,
              226,
              160,
              138,
              226,
              160,
              135,
              226,
              160,
              178,
              32,
              226,
              161,
              138,
              32,
              226,
              160,
              141,
              226,
              160,
              138,
              226,
              160,
              163,
              226,
              160,
              158,
              32,
              226,
              160,
              153,
              226,
              160,
              129,
              226,
              160,
              167,
              226,
              160,
              145,
              32,
              226,
              160,
              131,
              226,
              160,
              145,
              226,
              160,
              178,
              32,
              226,
              160,
              148,
              226,
              160,
              138,
              226,
              160,
              135,
              226,
              160,
              148,
              226,
              160,
              171,
              226,
              160,
              130,
              32,
              226,
              160,
              141,
              226,
              160,
              185,
              226,
              160,
              142,
              226,
              160,
              145,
              226,
              160,
              135,
              226,
              160,
              139,
              226,
              160,
              130,
              32,
              226,
              160,
              158,
              226,
              160,
              149,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              160,
              151,
              226,
              160,
              145,
              226,
              160,
              155,
              226,
              160,
              156,
              226,
              160,
              153,
              32,
              226,
              160,
              129,
              32,
              226,
              160,
              138,
              226,
              160,
              149,
              226,
              160,
              139,
              226,
              160,
              139,
              226,
              160,
              148,
              226,
              160,
              164,
              226,
              160,
              157,
              226,
              160,
              129,
              226,
              160,
              138,
              226,
              160,
              135,
              32,
              226,
              160,
              129,
              226,
              160,
              142,
              32,
              226,
              160,
              185,
              226,
              160,
              145,
              32,
              226,
              160,
              153,
              226,
              160,
              145,
              226,
              160,
              129,
              226,
              160,
              153,
              226,
              160,
              145,
              226,
              160,
              140,
              32,
              226,
              160,
              143,
              226,
              160,
              138,
              226,
              160,
              145,
              226,
              160,
              138,
              226,
              160,
              145,
              32,
              226,
              160,
              149,
              226,
              160,
              139,
              32,
              226,
              160,
              138,
              226,
              160,
              151,
              226,
              160,
              149,
              226,
              160,
              157,
              226,
              160,
              141,
              226,
              160,
              149,
              226,
              160,
              157,
              226,
              160,
              155,
              226,
              160,
              187,
              226,
              160,
              185,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              160,
              148,
              32,
              226,
              160,
              185,
              226,
              160,
              145,
              32,
              226,
              160,
              158,
              226,
              160,
              151,
              226,
              160,
              129,
              226,
              160,
              153,
              226,
              160,
              145,
              226,
              160,
              178,
              32,
              226,
              161,
              131,
              226,
              160,
              165,
              226,
              160,
              158,
              32,
              226,
              160,
              185,
              226,
              160,
              145,
              32,
              226,
              160,
              186,
              226,
              160,
              138,
              226,
              160,
              142,
              226,
              160,
              153,
              226,
              160,
              149,
              226,
              160,
              141,
              32,
              226,
              160,
              149,
              226,
              160,
              139,
              32,
              226,
              160,
              179,
              226,
              160,
              151,
              32,
              226,
              160,
              129,
              226,
              160,
              157,
              226,
              160,
              138,
              226,
              160,
              145,
              226,
              160,
              140,
              226,
              160,
              149,
              226,
              160,
              151,
              226,
              160,
              142,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              160,
              138,
              226,
              160,
              142,
              32,
              226,
              160,
              148,
              32,
              226,
              160,
              185,
              226,
              160,
              145,
              32,
              226,
              160,
              142,
              226,
              160,
              138,
              226,
              160,
              141,
              226,
              160,
              138,
              226,
              160,
              135,
              226,
              160,
              145,
              226,
              160,
              134,
              32,
              226,
              160,
              129,
              226,
              160,
              157,
              226,
              160,
              153,
              32,
              226,
              160,
              141,
              226,
              160,
              185,
              32,
              226,
              160,
              165,
              226,
              160,
              157,
              226,
              160,
              153,
              226,
              160,
              129,
              226,
              160,
              135,
              226,
              160,
              135,
              226,
              160,
              170,
              226,
              160,
              171,
              32,
              226,
              160,
              153,
              226,
              160,
              129,
              226,
              160,
              157,
              226,
              160,
              153,
              226,
              160,
              142,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              160,
              169,
              226,
              160,
              129,
              226,
              160,
              135,
              226,
              160,
              135,
              32,
              226,
              160,
              157,
              226,
              160,
              149,
              226,
              160,
              158,
              32,
              226,
              160,
              153,
              226,
              160,
              138,
              226,
              160,
              140,
              226,
              160,
              165,
              226,
              160,
              151,
              226,
              160,
              131,
              32,
              226,
              160,
              138,
              226,
              160,
              158,
              226,
              160,
              130,
              32,
              226,
              160,
              149,
              226,
              160,
              151,
              32,
              226,
              160,
              185,
              226,
              160,
              145,
              32,
              226,
              161,
              138,
              226,
              160,
              179,
              226,
              160,
              157,
              226,
              160,
              158,
              226,
              160,
              151,
              226,
              160,
              185,
              226,
              160,
              176,
              226,
              160,
              142,
              32,
              226,
              160,
              153,
              226,
              160,
              149,
              226,
              160,
              157,
              226,
              160,
              145,
              32,
              226,
              160,
              139,
              226,
              160,
              149,
              226,
              160,
              151,
              226,
              160,
              178,
              32,
              226,
              161,
              185,
              226,
              160,
              179,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              160,
              186,
              226,
              160,
              138,
              226,
              160,
              135,
              226,
              160,
              135,
              32,
              226,
              160,
              185,
              226,
              160,
              187,
              226,
              160,
              145,
              226,
              160,
              139,
              226,
              160,
              149,
              226,
              160,
              151,
              226,
              160,
              145,
              32,
              226,
              160,
              143,
              226,
              160,
              187,
              226,
              160,
              141,
              226,
              160,
              138,
              226,
              160,
              158,
              32,
              226,
              160,
              141,
              226,
              160,
              145,
              32,
              226,
              160,
              158,
              226,
              160,
              149,
              32,
              226,
              160,
              151,
              226,
              160,
              145,
              226,
              160,
              143,
              226,
              160,
              145,
              226,
              160,
              129,
              226,
              160,
              158,
              226,
              160,
              130,
              32,
              226,
              160,
              145,
              226,
              160,
              141,
              226,
              160,
              143,
              226,
              160,
              153,
              226,
              160,
              129,
              226,
              160,
              158,
              226,
              160,
              138,
              226,
              160,
              138,
              226,
              160,
              129,
              226,
              160,
              135,
              226,
              160,
              135,
              226,
              160,
              185,
              226,
              160,
              130,
              32,
              226,
              160,
              185,
              226,
              160,
              129,
              226,
              160,
              158,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              161,
              141,
              226,
              160,
              156,
              226,
              160,
              135,
              226,
              160,
              145,
              226,
              160,
              185,
              32,
              226,
              160,
              186,
              226,
              160,
              129,
              226,
              160,
              142,
              32,
              226,
              160,
              129,
              226,
              160,
              142,
              32,
              226,
              160,
              153,
              226,
              160,
              145,
              226,
              160,
              129,
              226,
              160,
              153,
              32,
              226,
              160,
              129,
              226,
              160,
              142,
              32,
              226,
              160,
              129,
              32,
              226,
              160,
              153,
              226,
              160,
              149,
              226,
              160,
              149,
              226,
              160,
              151,
              226,
              160,
              164,
              226,
              160,
              157,
              226,
              160,
              129,
              226,
              160,
              138,
              226,
              160,
              135,
              226,
              160,
              178,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              40,
              84,
              104,
              101,
              32,
              102,
              105,
              114,
              115,
              116,
              32,
              99,
              111,
              117,
              112,
              108,
              101,
              32,
              111,
              102,
              32,
              112,
              97,
              114,
              97,
              103,
              114,
              97,
              112,
              104,
              115,
              32,
              111,
              102,
              32,
              34,
              65,
              32,
              67,
              104,
              114,
              105,
              115,
              116,
              109,
              97,
              115,
              32,
              67,
              97,
              114,
              111,
              108,
              34,
              32,
              98,
              121,
              32,
              68,
              105,
              99,
              107,
              101,
              110,
              115,
              41,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              67,
              111,
              109,
              112,
              97,
              99,
              116,
              32,
              102,
              111,
              110,
              116,
              32,
              115,
              101,
              108,
              101,
              99,
              116,
              105,
              111,
              110,
              32,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              32,
              116,
              101,
              120,
              116,
              58,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              65,
              66,
              67,
              68,
              69,
              70,
              71,
              72,
              73,
              74,
              75,
              76,
              77,
              78,
              79,
              80,
              81,
              82,
              83,
              84,
              85,
              86,
              87,
              88,
              89,
              90,
              32,
              47,
              48,
              49,
              50,
              51,
              52,
              53,
              54,
              55,
              56,
              57,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              97,
              98,
              99,
              100,
              101,
              102,
              103,
              104,
              105,
              106,
              107,
              108,
              109,
              110,
              111,
              112,
              113,
              114,
              115,
              116,
              117,
              118,
              119,
              120,
              121,
              122,
              32,
              194,
              163,
              194,
              169,
              194,
              181,
              195,
              128,
              195,
              134,
              195,
              150,
              195,
              158,
              195,
              159,
              195,
              169,
              195,
              182,
              195,
              191,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              128,
              147,
              226,
              128,
              148,
              226,
              128,
              152,
              226,
              128,
              156,
              226,
              128,
              157,
              226,
              128,
              158,
              226,
              128,
              160,
              226,
              128,
              162,
              226,
              128,
              166,
              226,
              128,
              176,
              226,
              132,
              162,
              197,
              147,
              197,
              160,
              197,
              184,
              197,
              190,
              226,
              130,
              172,
              32,
              206,
              145,
              206,
              146,
              206,
              147,
              206,
              148,
              206,
              169,
              206,
              177,
              206,
              178,
              206,
              179,
              206,
              180,
              207,
              137,
              32,
              208,
              144,
              208,
              145,
              208,
              146,
              208,
              147,
              208,
              148,
              208,
              176,
              208,
              177,
              208,
              178,
              208,
              179,
              208,
              180,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              136,
              128,
              226,
              136,
              130,
              226,
              136,
              136,
              226,
              132,
              157,
              226,
              136,
              167,
              226,
              136,
              170,
              226,
              137,
              161,
              226,
              136,
              158,
              32,
              226,
              134,
              145,
              226,
              134,
              151,
              226,
              134,
              168,
              226,
              134,
              187,
              226,
              135,
              163,
              32,
              226,
              148,
              144,
              226,
              148,
              188,
              226,
              149,
              148,
              226,
              149,
              152,
              226,
              150,
              145,
              226,
              150,
              186,
              226,
              152,
              186,
              226,
              153,
              128,
              32,
              239,
              172,
              129,
              239,
              191,
              189,
              226,
              145,
              128,
              226,
              130,
              130,
              225,
              188,
              160,
              225,
              184,
              130,
              211,
              165,
              225,
              186,
              132,
              201,
              144,
              203,
              144,
              226,
              141,
              142,
              215,
              144,
              212,
              177,
              225,
              131,
              144,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              71,
              114,
              101,
              101,
              116,
              105,
              110,
              103,
              115,
              32,
              105,
              110,
              32,
              118,
              97,
              114,
              105,
              111,
              117,
              115,
              32,
              108,
              97,
              110,
              103,
              117,
              97,
              103,
              101,
              115,
              58,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              72,
              101,
              108,
              108,
              111,
              32,
              119,
              111,
              114,
              108,
              100,
              44,
              32,
              206,
              154,
              206,
              177,
              206,
              187,
              206,
              183,
              206,
              188,
              225,
              189,
              179,
              207,
              129,
              206,
              177,
              32,
              206,
              186,
              225,
              189,
              185,
              207,
              131,
              206,
              188,
              206,
              181,
              44,
              32,
              227,
              130,
              179,
              227,
              131,
              179,
              227,
              131,
              139,
              227,
              131,
              129,
              227,
              131,
              143,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              66,
              111,
              120,
              32,
              100,
              114,
              97,
              119,
              105,
              110,
              103,
              32,
              97,
              108,
              105,
              103,
              110,
              109,
              101,
              110,
              116,
              32,
              116,
              101,
              115,
              116,
              115,
              58,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              150,
              136,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              150,
              137,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              148,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              166,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              151,
              32,
              32,
              226,
              148,
              140,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              148,
              172,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              148,
              144,
              32,
              32,
              226,
              149,
              173,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              148,
              172,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              149,
              174,
              32,
              32,
              226,
              149,
              173,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              148,
              172,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              149,
              174,
              32,
              32,
              226,
              148,
              143,
              226,
              148,
              129,
              226,
              148,
              129,
              226,
              148,
              179,
              226,
              148,
              129,
              226,
              148,
              129,
              226,
              148,
              147,
              32,
              32,
              226,
              148,
              142,
              226,
              148,
              146,
              226,
              148,
              143,
              226,
              148,
              145,
              32,
              32,
              32,
              226,
              149,
              183,
              32,
              32,
              226,
              149,
              187,
              32,
              226,
              148,
              143,
              226,
              148,
              175,
              226,
              148,
              147,
              32,
              226,
              148,
              140,
              226,
              148,
              176,
              226,
              148,
              144,
              32,
              32,
              32,
              32,
              226,
              150,
              138,
              32,
              226,
              149,
              177,
              226,
              149,
              178,
              226,
              149,
              177,
              226,
              149,
              178,
              226,
              149,
              179,
              226,
              149,
              179,
              226,
              149,
              179,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              145,
              226,
              148,
              140,
              226,
              148,
              128,
              226,
              149,
              168,
              226,
              148,
              128,
              226,
              148,
              144,
              226,
              149,
              145,
              32,
              32,
              226,
              148,
              130,
              226,
              149,
              148,
              226,
              149,
              144,
              226,
              149,
              167,
              226,
              149,
              144,
              226,
              149,
              151,
              226,
              148,
              130,
              32,
              32,
              226,
              148,
              130,
              226,
              149,
              146,
              226,
              149,
              144,
              226,
              149,
              170,
              226,
              149,
              144,
              226,
              149,
              149,
              226,
              148,
              130,
              32,
              32,
              226,
              148,
              130,
              226,
              149,
              147,
              226,
              148,
              128,
              226,
              149,
              129,
              226,
              148,
              128,
              226,
              149,
              150,
              226,
              148,
              130,
              32,
              32,
              226,
              148,
              131,
              226,
              148,
              140,
              226,
              148,
              128,
              226,
              149,
              130,
              226,
              148,
              128,
              226,
              148,
              144,
              226,
              148,
              131,
              32,
              32,
              226,
              148,
              151,
              226,
              149,
              131,
              226,
              149,
              132,
              226,
              148,
              153,
              32,
              32,
              226,
              149,
              182,
              226,
              148,
              188,
              226,
              149,
              180,
              226,
              149,
              186,
              226,
              149,
              139,
              226,
              149,
              184,
              226,
              148,
              160,
              226,
              148,
              188,
              226,
              148,
              168,
              32,
              226,
              148,
              157,
              226,
              149,
              139,
              226,
              148,
              165,
              32,
              32,
              32,
              32,
              226,
              150,
              139,
              32,
              226,
              149,
              178,
              226,
              149,
              177,
              226,
              149,
              178,
              226,
              149,
              177,
              226,
              149,
              179,
              226,
              149,
              179,
              226,
              149,
              179,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              145,
              226,
              148,
              130,
              226,
              149,
              178,
              32,
              226,
              149,
              177,
              226,
              148,
              130,
              226,
              149,
              145,
              32,
              32,
              226,
              148,
              130,
              226,
              149,
              145,
              32,
              32,
              32,
              226,
              149,
              145,
              226,
              148,
              130,
              32,
              32,
              226,
              148,
              130,
              226,
              148,
              130,
              32,
              226,
              148,
              130,
              32,
              226,
              148,
              130,
              226,
              148,
              130,
              32,
              32,
              226,
              148,
              130,
              226,
              149,
              145,
              32,
              226,
              148,
              131,
              32,
              226,
              149,
              145,
              226,
              148,
              130,
              32,
              32,
              226,
              148,
              131,
              226,
              148,
              130,
              32,
              226,
              149,
              191,
              32,
              226,
              148,
              130,
              226,
              148,
              131,
              32,
              32,
              226,
              148,
              141,
              226,
              149,
              133,
              226,
              149,
              134,
              226,
              148,
              147,
              32,
              32,
              32,
              226,
              149,
              181,
              32,
              32,
              226,
              149,
              185,
              32,
              226,
              148,
              151,
              226,
              148,
              183,
              226,
              148,
              155,
              32,
              226,
              148,
              148,
              226,
              148,
              184,
              226,
              148,
              152,
              32,
              32,
              32,
              32,
              226,
              150,
              140,
              32,
              226,
              149,
              177,
              226,
              149,
              178,
              226,
              149,
              177,
              226,
              149,
              178,
              226,
              149,
              179,
              226,
              149,
              179,
              226,
              149,
              179,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              160,
              226,
              149,
              161,
              32,
              226,
              149,
              179,
              32,
              226,
              149,
              158,
              226,
              149,
              163,
              32,
              32,
              226,
              148,
              156,
              226,
              149,
              162,
              32,
              32,
              32,
              226,
              149,
              159,
              226,
              148,
              164,
              32,
              32,
              226,
              148,
              156,
              226,
              148,
              188,
              226,
              148,
              128,
              226,
              148,
              188,
              226,
              148,
              128,
              226,
              148,
              188,
              226,
              148,
              164,
              32,
              32,
              226,
              148,
              156,
              226,
              149,
              171,
              226,
              148,
              128,
              226,
              149,
              130,
              226,
              148,
              128,
              226,
              149,
              171,
              226,
              148,
              164,
              32,
              32,
              226,
              148,
              163,
              226,
              148,
              191,
              226,
              149,
              190,
              226,
              148,
              188,
              226,
              149,
              188,
              226,
              148,
              191,
              226,
              148,
              171,
              32,
              32,
              226,
              148,
              149,
              226,
              148,
              155,
              226,
              148,
              150,
              226,
              148,
              154,
              32,
              32,
              32,
              32,
              32,
              226,
              148,
              140,
              226,
              148,
              132,
              226,
              148,
              132,
              226,
              148,
              144,
              32,
              226,
              149,
              142,
              32,
              226,
              148,
              143,
              226,
              148,
              133,
              226,
              148,
              133,
              226,
              148,
              147,
              32,
              226,
              148,
              139,
              32,
              226,
              150,
              141,
              32,
              226,
              149,
              178,
              226,
              149,
              177,
              226,
              149,
              178,
              226,
              149,
              177,
              226,
              149,
              179,
              226,
              149,
              179,
              226,
              149,
              179,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              145,
              226,
              148,
              130,
              226,
              149,
              177,
              32,
              226,
              149,
              178,
              226,
              148,
              130,
              226,
              149,
              145,
              32,
              32,
              226,
              148,
              130,
              226,
              149,
              145,
              32,
              32,
              32,
              226,
              149,
              145,
              226,
              148,
              130,
              32,
              32,
              226,
              148,
              130,
              226,
              148,
              130,
              32,
              226,
              148,
              130,
              32,
              226,
              148,
              130,
              226,
              148,
              130,
              32,
              32,
              226,
              148,
              130,
              226,
              149,
              145,
              32,
              226,
              148,
              131,
              32,
              226,
              149,
              145,
              226,
              148,
              130,
              32,
              32,
              226,
              148,
              131,
              226,
              148,
              130,
              32,
              226,
              149,
              189,
              32,
              226,
              148,
              130,
              226,
              148,
              131,
              32,
              32,
              226,
              150,
              145,
              226,
              150,
              145,
              226,
              150,
              146,
              226,
              150,
              146,
              226,
              150,
              147,
              226,
              150,
              147,
              226,
              150,
              136,
              226,
              150,
              136,
              32,
              226,
              148,
              138,
              32,
              32,
              226,
              148,
              134,
              32,
              226,
              149,
              142,
              32,
              226,
              149,
              143,
              32,
              32,
              226,
              148,
              135,
              32,
              226,
              148,
              139,
              32,
              226,
              150,
              142,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              145,
              226,
              148,
              148,
              226,
              148,
              128,
              226,
              149,
              165,
              226,
              148,
              128,
              226,
              148,
              152,
              226,
              149,
              145,
              32,
              32,
              226,
              148,
              130,
              226,
              149,
              154,
              226,
              149,
              144,
              226,
              149,
              164,
              226,
              149,
              144,
              226,
              149,
              157,
              226,
              148,
              130,
              32,
              32,
              226,
              148,
              130,
              226,
              149,
              152,
              226,
              149,
              144,
              226,
              149,
              170,
              226,
              149,
              144,
              226,
              149,
              155,
              226,
              148,
              130,
              32,
              32,
              226,
              148,
              130,
              226,
              149,
              153,
              226,
              148,
              128,
              226,
              149,
              128,
              226,
              148,
              128,
              226,
              149,
              156,
              226,
              148,
              130,
              32,
              32,
              226,
              148,
              131,
              226,
              148,
              148,
              226,
              148,
              128,
              226,
              149,
              130,
              226,
              148,
              128,
              226,
              148,
              152,
              226,
              148,
              131,
              32,
              32,
              226,
              150,
              145,
              226,
              150,
              145,
              226,
              150,
              146,
              226,
              150,
              146,
              226,
              150,
              147,
              226,
              150,
              147,
              226,
              150,
              136,
              226,
              150,
              136,
              32,
              226,
              148,
              138,
              32,
              32,
              226,
              148,
              134,
              32,
              226,
              149,
              142,
              32,
              226,
              149,
              143,
              32,
              32,
              226,
              148,
              135,
              32,
              226,
              148,
              139,
              32,
              226,
              150,
              143,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              149,
              154,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              169,
              226,
              149,
              144,
              226,
              149,
              144,
              226,
              149,
              157,
              32,
              32,
              226,
              148,
              148,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              148,
              180,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              148,
              152,
              32,
              32,
              226,
              149,
              176,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              148,
              180,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              149,
              175,
              32,
              32,
              226,
              149,
              176,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              148,
              180,
              226,
              148,
              128,
              226,
              148,
              128,
              226,
              149,
              175,
              32,
              32,
              226,
              148,
              151,
              226,
              148,
              129,
              226,
              148,
              129,
              226,
              148,
              187,
              226,
              148,
              129,
              226,
              148,
              129,
              226,
              148,
              155,
              32,
              32,
              226,
              150,
              151,
              226,
              150,
              132,
              226,
              150,
              150,
              226,
              150,
              155,
              226,
              150,
              128,
              226,
              150,
              156,
              32,
              32,
              32,
              226,
              148,
              148,
              226,
              149,
              140,
              226,
              149,
              140,
              226,
              148,
              152,
              32,
              226,
              149,
              142,
              32,
              226,
              148,
              151,
              226,
              149,
              141,
              226,
              149,
              141,
              226,
              148,
              155,
              32,
              226,
              148,
              139,
              32,
              32,
              226,
              150,
              129,
              226,
              150,
              130,
              226,
              150,
              131,
              226,
              150,
              132,
              226,
              150,
              133,
              226,
              150,
              134,
              226,
              150,
              135,
              226,
              150,
              136,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              226,
              150,
              157,
              226,
              150,
              128,
              226,
              150,
              152,
              226,
              150,
              153,
              226,
              150,
              132,
              226,
              150,
              159,
              10,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              32,
              60,
              47,
              112,
              114,
              101,
              62,
              10,
              32,
              32,
              32,
              32,
              32,
              32,
              60,
              47,
              98,
              111,
              100,
              121,
              62,
              10,
              32,
              32,
              32,
              32,
              60,
              47,
              104,
              116,
              109,
              108,
              62,
              10,
              32,
              32
            ]
          },
          "cookie": [],
          "responseTime": 125,
          "responseSize": 15630
        },
        "id": "b14cae14-5220-4966-88b7-42d7167b0e82",
        "assertions": [
          {
            "assertion": "response is ok",
            "skipped": false
          },
          {
            "assertion": "response has charset in content-type header",
            "skipped": false
          },
          {
            "assertion": "response has chunked transfer encoding header",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "2464a011-d857-406a-957b-5152706e8123",
          "length": 37,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "0700d50f-411b-4dd9-94a3-f50748d35f6a"
        },
        "item": {
          "_": {
            "postman_id": "d4c90b85-644a-4637-8ff6-683443b3b37c"
          },
          "id": "d4c90b85-644a-4637-8ff6-683443b3b37c",
          "name": "GZip Compressed Response",
          "request": {
            "description": {
              "content": "This endpoint returns the response using [gzip compression algoritm](https://en.wikipedia.org/wiki/Gzip).\nThe uncompressed response is a JSON string containing the details of the request sent by the client. For this endpoint to work, one should request with `Accept-encoding` header containing `gzip` as part of its value. Postman supports gzip, deflate and SDCH decoding and automatically sends them as part of the request.\n\nHTTP Compression allows the server to send responses in a compressed format, which is uncompressed by the client before processing. This reduces network bandwidth consumption at the cost of increase in CPU usage.\nTo know more about this, refer the [HTTP Compression](https://en.wikipedia.org/wiki/HTTP_compression) wikipedia article.",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "gzip"
              ],
              "host": [
                "postman-echo",
                "com"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e1a272b2-6014-4cc4-903d-7051aa2004e3",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response has valid json body\", function () {",
                  "    pm.response.to.have.jsonBody('gzipped', true);",
                  "});",
                  "",
                  "pm.test('response headers should indicate valid content encoding', function  () {",
                  "    pm.response.to.have.header('content-encoding', 'gzip')",
                  "        .and.have.header('content-type', 'application/json');",
                  "});",
                  "",
                  "pm.test('requesting http client should accept compressed response', function () {",
                  "    pm.expect(pm.response.json()).to.have.nested.property('headers.accept-encoding')",
                  "        .and.to.match(/.*gzip.*/);",
                  "});"
                ],
                "_lastExecutionId": "a9256b13-2642-4017-a4d6-26b409a4b491"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This endpoint returns the response using [gzip compression algoritm](https://en.wikipedia.org/wiki/Gzip).\nThe uncompressed response is a JSON string containing the details of the request sent by the client. For this endpoint to work, one should request with `Accept-encoding` header containing `gzip` as part of its value. Postman supports gzip, deflate and SDCH decoding and automatically sends them as part of the request.\n\nHTTP Compression allows the server to send responses in a compressed format, which is uncompressed by the client before processing. This reduces network bandwidth consumption at the cost of increase in CPU usage.\nTo know more about this, refer the [HTTP Compression](https://en.wikipedia.org/wiki/HTTP_compression) wikipedia article.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "gzip"
            ],
            "host": [
              "postman-echo",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.26.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d2b6925d-3d89-41d8-976d-46c7af12937b",
              "system": true
            },
            {
              "key": "Host",
              "value": "postman-echo.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "sails.sid=s%3AVfVU90Nq_CnjfmZnz-mjgSeJFuBZEHK8.SxDdHVGUeUZFaWiktjUGC8hXvdrvMjOmg%2Feel2x2eT4",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "53b3c792-a05f-4eb4-bf51-a33b32eb2c06",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Fri, 12 Jun 2020 13:15:48 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "380"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Content-Encoding",
              "value": "gzip"
            },
            {
              "key": "ETag",
              "value": "W/\"17c-tTyT6sc/RVbuiyuhld09HgZAZBM\""
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3AUMTmgWrzqmx64R0XPyNxU5WdjsTcSrIf.kiThCrwrruUQva88tZI1qXV0foiKe10f%2BLvnb0rjr9M; Path=/; HttpOnly"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              10,
              32,
              32,
              34,
              103,
              122,
              105,
              112,
              112,
              101,
              100,
              34,
              58,
              32,
              116,
              114,
              117,
              101,
              44,
              10,
              32,
              32,
              34,
              104,
              101,
              97,
              100,
              101,
              114,
              115,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              114,
              111,
              116,
              111,
              34,
              58,
              32,
              34,
              104,
              116,
              116,
              112,
              115,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              111,
              114,
              116,
              34,
              58,
              32,
              34,
              52,
              52,
              51,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              104,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              120,
              45,
              97,
              109,
              122,
              110,
              45,
              116,
              114,
              97,
              99,
              101,
              45,
              105,
              100,
              34,
              58,
              32,
              34,
              82,
              111,
              111,
              116,
              61,
              49,
              45,
              53,
              101,
              101,
              51,
              56,
              48,
              48,
              52,
              45,
              51,
              52,
              99,
              102,
              98,
              49,
              52,
              54,
              97,
              53,
              52,
              49,
              54,
              51,
              55,
              50,
              55,
              49,
              102,
              57,
              49,
              50,
              54,
              101,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              117,
              115,
              101,
              114,
              45,
              97,
              103,
              101,
              110,
              116,
              34,
              58,
              32,
              34,
              80,
              111,
              115,
              116,
              109,
              97,
              110,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              47,
              55,
              46,
              50,
              54,
              46,
              48,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              34,
              58,
              32,
              34,
              42,
              47,
              42,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              97,
              99,
              104,
              101,
              45,
              99,
              111,
              110,
              116,
              114,
              111,
              108,
              34,
              58,
              32,
              34,
              110,
              111,
              45,
              99,
              97,
              99,
              104,
              101,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              58,
              32,
              34,
              100,
              50,
              98,
              54,
              57,
              50,
              53,
              100,
              45,
              51,
              100,
              56,
              57,
              45,
              52,
              49,
              100,
              56,
              45,
              57,
              55,
              54,
              100,
              45,
              52,
              54,
              99,
              55,
              97,
              102,
              49,
              50,
              57,
              51,
              55,
              98,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              45,
              101,
              110,
              99,
              111,
              100,
              105,
              110,
              103,
              34,
              58,
              32,
              34,
              103,
              122,
              105,
              112,
              44,
              32,
              100,
              101,
              102,
              108,
              97,
              116,
              101,
              44,
              32,
              98,
              114,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              111,
              107,
              105,
              101,
              34,
              58,
              32,
              34,
              115,
              97,
              105,
              108,
              115,
              46,
              115,
              105,
              100,
              61,
              115,
              37,
              51,
              65,
              86,
              102,
              86,
              85,
              57,
              48,
              78,
              113,
              95,
              67,
              110,
              106,
              102,
              109,
              90,
              110,
              122,
              45,
              109,
              106,
              103,
              83,
              101,
              74,
              70,
              117,
              66,
              90,
              69,
              72,
              75,
              56,
              46,
              83,
              120,
              68,
              100,
              72,
              86,
              71,
              85,
              101,
              85,
              90,
              70,
              97,
              87,
              105,
              107,
              116,
              106,
              85,
              71,
              67,
              56,
              104,
              88,
              118,
              100,
              114,
              118,
              77,
              106,
              79,
              109,
              103,
              37,
              50,
              70,
              101,
              101,
              108,
              50,
              120,
              50,
              101,
              84,
              52,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              32,
              34,
              71,
              69,
              84,
              34,
              10,
              125
            ]
          },
          "cookie": [],
          "responseTime": 120,
          "responseSize": 535
        },
        "id": "d4c90b85-644a-4637-8ff6-683443b3b37c",
        "assertions": [
          {
            "assertion": "response is ok",
            "skipped": false
          },
          {
            "assertion": "response has valid json body",
            "skipped": false
          },
          {
            "assertion": "response headers should indicate valid content encoding",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response headers should indicate valid content encoding",
              "message": "expected 'content-type' response header to be 'application/json' but got 'application/json; charset=utf-8'",
              "stack": "AssertionError: expected 'content-type' response header to be 'application/json' but got 'application/json; charset=utf-8'\n   at Object.eval sandbox-script.js:3:20)"
            }
          },
          {
            "assertion": "requesting http client should accept compressed response",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "5d160689-5461-498f-8dce-2d91af886e9d",
          "length": 37,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "d4826307-73be-4f85-9c42-a9f1bcf31f05"
        },
        "item": {
          "_": {
            "postman_id": "1a13c2df-f757-49d5-b37b-6bf6851f0df8"
          },
          "id": "1a13c2df-f757-49d5-b37b-6bf6851f0df8",
          "name": "Deflate Compressed Response",
          "request": {
            "description": {
              "content": "This endpoint returns the response using [deflate compression algoritm](https://en.wikipedia.org/wiki/DEFLATE). \nThe uncompressed response is a JSON string containing the details of the request sent by the client. For this endpoint to work, one should request with `Accept-encoding` header containing `deflate` as part of its value. Postman supports gzip, deflate and SDCH decoding and automatically sends them as part of the request.\n\nHTTP Compression allows the server to send responses in a compressed format, which is uncompressed by the client before processing. This reduces network bandwidth consumption at the cost of increase in CPU usage.\nTo know more about this, refer the [HTTP Compression](https://en.wikipedia.org/wiki/HTTP_compression) wikipedia article.",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "deflate"
              ],
              "host": [
                "postman-echo",
                "com"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "353b437b-66f2-4ce3-8edf-f457f1581772",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response has valid json body\", function () {",
                  "    pm.response.to.have.jsonBody('deflated', true);",
                  "});",
                  "",
                  "pm.test('response headers should indicate valid content encoding', function  () {",
                  "    pm.response.to.have.header('content-encoding', 'deflate')",
                  "        .and.have.header('content-type', 'application/json');",
                  "});",
                  "",
                  "pm.test('requesting http client should accept compressed response', function () {",
                  "    pm.expect(pm.response.json()).to.have.nested.property('headers.accept-encoding')",
                  "        .and.to.match(/.*deflate.*/);",
                  "});"
                ],
                "_lastExecutionId": "4660971a-3ff5-44f5-a124-9f5fe105c621"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "This endpoint returns the response using [deflate compression algoritm](https://en.wikipedia.org/wiki/DEFLATE). \nThe uncompressed response is a JSON string containing the details of the request sent by the client. For this endpoint to work, one should request with `Accept-encoding` header containing `deflate` as part of its value. Postman supports gzip, deflate and SDCH decoding and automatically sends them as part of the request.\n\nHTTP Compression allows the server to send responses in a compressed format, which is uncompressed by the client before processing. This reduces network bandwidth consumption at the cost of increase in CPU usage.\nTo know more about this, refer the [HTTP Compression](https://en.wikipedia.org/wiki/HTTP_compression) wikipedia article.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "deflate"
            ],
            "host": [
              "postman-echo",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.26.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8e44b9c7-b05d-48f3-8e94-c949da16e566",
              "system": true
            },
            {
              "key": "Host",
              "value": "postman-echo.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "sails.sid=s%3AUMTmgWrzqmx64R0XPyNxU5WdjsTcSrIf.kiThCrwrruUQva88tZI1qXV0foiKe10f%2BLvnb0rjr9M",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "0fe5fb49-dba5-41ee-9fbc-af18da1cf3b1",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Fri, 12 Jun 2020 13:15:48 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "363"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Content-Encoding",
              "value": "deflate"
            },
            {
              "key": "ETag",
              "value": "W/\"16b-UgotxIvH7uzSM62EXYuK3mwafRo\""
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3ATwzjOTBQjcQ8NVIXNAoaSJWNeUJLjus2.8LcP9xjcCwsIa9cOIGYp3kOg99dIf4yDIDpbXIM1M8Y; Path=/; HttpOnly"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              10,
              32,
              32,
              34,
              100,
              101,
              102,
              108,
              97,
              116,
              101,
              100,
              34,
              58,
              32,
              116,
              114,
              117,
              101,
              44,
              10,
              32,
              32,
              34,
              104,
              101,
              97,
              100,
              101,
              114,
              115,
              34,
              58,
              32,
              123,
              10,
              32,
              32,
              32,
              32,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              114,
              111,
              116,
              111,
              34,
              58,
              32,
              34,
              104,
              116,
              116,
              112,
              115,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              120,
              45,
              102,
              111,
              114,
              119,
              97,
              114,
              100,
              101,
              100,
              45,
              112,
              111,
              114,
              116,
              34,
              58,
              32,
              34,
              52,
              52,
              51,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              104,
              111,
              115,
              116,
              34,
              58,
              32,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              101,
              99,
              104,
              111,
              46,
              99,
              111,
              109,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              120,
              45,
              97,
              109,
              122,
              110,
              45,
              116,
              114,
              97,
              99,
              101,
              45,
              105,
              100,
              34,
              58,
              32,
              34,
              82,
              111,
              111,
              116,
              61,
              49,
              45,
              53,
              101,
              101,
              51,
              56,
              48,
              48,
              52,
              45,
              100,
              50,
              55,
              100,
              101,
              54,
              100,
              101,
              98,
              100,
              57,
              101,
              51,
              57,
              99,
              57,
              56,
              50,
              101,
              49,
              98,
              49,
              99,
              102,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              117,
              115,
              101,
              114,
              45,
              97,
              103,
              101,
              110,
              116,
              34,
              58,
              32,
              34,
              80,
              111,
              115,
              116,
              109,
              97,
              110,
              82,
              117,
              110,
              116,
              105,
              109,
              101,
              47,
              55,
              46,
              50,
              54,
              46,
              48,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              34,
              58,
              32,
              34,
              42,
              47,
              42,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              97,
              99,
              104,
              101,
              45,
              99,
              111,
              110,
              116,
              114,
              111,
              108,
              34,
              58,
              32,
              34,
              110,
              111,
              45,
              99,
              97,
              99,
              104,
              101,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              112,
              111,
              115,
              116,
              109,
              97,
              110,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              58,
              32,
              34,
              56,
              101,
              52,
              52,
              98,
              57,
              99,
              55,
              45,
              98,
              48,
              53,
              100,
              45,
              52,
              56,
              102,
              51,
              45,
              56,
              101,
              57,
              52,
              45,
              99,
              57,
              52,
              57,
              100,
              97,
              49,
              54,
              101,
              53,
              54,
              54,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              97,
              99,
              99,
              101,
              112,
              116,
              45,
              101,
              110,
              99,
              111,
              100,
              105,
              110,
              103,
              34,
              58,
              32,
              34,
              103,
              122,
              105,
              112,
              44,
              32,
              100,
              101,
              102,
              108,
              97,
              116,
              101,
              44,
              32,
              98,
              114,
              34,
              44,
              10,
              32,
              32,
              32,
              32,
              34,
              99,
              111,
              111,
              107,
              105,
              101,
              34,
              58,
              32,
              34,
              115,
              97,
              105,
              108,
              115,
              46,
              115,
              105,
              100,
              61,
              115,
              37,
              51,
              65,
              85,
              77,
              84,
              109,
              103,
              87,
              114,
              122,
              113,
              109,
              120,
              54,
              52,
              82,
              48,
              88,
              80,
              121,
              78,
              120,
              85,
              53,
              87,
              100,
              106,
              115,
              84,
              99,
              83,
              114,
              73,
              102,
              46,
              107,
              105,
              84,
              104,
              67,
              114,
              119,
              114,
              114,
              117,
              85,
              81,
              118,
              97,
              56,
              56,
              116,
              90,
              73,
              49,
              113,
              88,
              86,
              48,
              102,
              111,
              105,
              75,
              101,
              49,
              48,
              102,
              37,
              50,
              66,
              76,
              118,
              110,
              98,
              48,
              114,
              106,
              114,
              57,
              77,
              34,
              10,
              32,
              32,
              125,
              44,
              10,
              32,
              32,
              34,
              109,
              101,
              116,
              104,
              111,
              100,
              34,
              58,
              32,
              34,
              71,
              69,
              84,
              34,
              10,
              125
            ]
          },
          "cookie": [],
          "responseTime": 122,
          "responseSize": 536
        },
        "id": "1a13c2df-f757-49d5-b37b-6bf6851f0df8",
        "assertions": [
          {
            "assertion": "response is ok",
            "skipped": false
          },
          {
            "assertion": "response has valid json body",
            "skipped": false
          },
          {
            "assertion": "response headers should indicate valid content encoding",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response headers should indicate valid content encoding",
              "message": "expected 'content-type' response header to be 'application/json' but got 'application/json; charset=utf-8'",
              "stack": "AssertionError: expected 'content-type' response header to be 'application/json' but got 'application/json; charset=utf-8'\n   at Object.eval sandbox-script.js:3:21)"
            }
          },
          {
            "assertion": "requesting http client should accept compressed response",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "1272385c-c899-48a5-86d8-ab7585fa4df1",
          "length": 37,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "8b0c465f-f4e3-49cb-b319-72421028252b"
        },
        "item": {
          "_": {
            "postman_id": "9ada0814-d483-4355-978c-d1ba3436f3c3"
          },
          "id": "9ada0814-d483-4355-978c-d1ba3436f3c3",
          "name": "IP address in JSON format",
          "request": {
            "description": {
              "content": "A simple `GET` request to return the IP address of the source request in the following `JSON` format:\n\n```json\n{\n  ip: \"request-ip-address\"\n}\n```",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "ip"
              ],
              "host": [
                "postman-echo",
                "com"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8e24e512-a983-47fd-a07c-b875b18e1774",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response has valid json body\", function () {",
                  "    pm.response.to.have.jsonBody('ip');",
                  "});",
                  "",
                  "pm.test(\"response must return a valid ip address\", function () {",
                  "    pm.expect(pm.response.json().ip).to",
                  "        // a really gnarly regular expression to ensure that ip address is in correct format",
                  "        .match(/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/);",
                  "});"
                ],
                "_lastExecutionId": "5213408a-a005-4cc1-a144-56850d047df0"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "A simple `GET` request to return the IP address of the source request in the following `JSON` format:\n\n```json\n{\n  ip: \"request-ip-address\"\n}\n```",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "ip"
            ],
            "host": [
              "postman-echo",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.26.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "2c7cb99d-6ead-41ec-9843-5d0344c982d6",
              "system": true
            },
            {
              "key": "Host",
              "value": "postman-echo.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "sails.sid=s%3ATwzjOTBQjcQ8NVIXNAoaSJWNeUJLjus2.8LcP9xjcCwsIa9cOIGYp3kOg99dIf4yDIDpbXIM1M8Y",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "c4d13156-f906-471c-a755-ee1927407eed",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Fri, 12 Jun 2020 13:15:48 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "19"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "ETag",
              "value": "W/\"13-s/pYDsuBTMvZZVu8lBH9DpKnb+Q\""
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3AIAWisgg-JoKPlGAJPcYZ1V7aYYyb84rt.L9iF17brSxTLQdCA6qC%2BFNoSRxoDEwCccl%2B0o%2FTdTTI; Path=/; HttpOnly"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              112,
              34,
              58,
              34,
              50,
              46,
              54,
              46,
              57,
              55,
              46,
              49,
              54,
              52,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 119,
          "responseSize": 19
        },
        "id": "9ada0814-d483-4355-978c-d1ba3436f3c3",
        "assertions": [
          {
            "assertion": "response is ok",
            "skipped": false
          },
          {
            "assertion": "response has valid json body",
            "skipped": false
          },
          {
            "assertion": "response must return a valid ip address",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "e7a1bc05-6faa-488e-b77d-71bf54796f53",
          "length": 37,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "2d82b4a9-0fc2-44d4-8e75-407888e866d3"
        },
        "item": {
          "_": {
            "postman_id": "67927941-3fd3-4f44-9a97-4b8979e1e5f3"
          },
          "id": "67927941-3fd3-4f44-9a97-4b8979e1e5f3",
          "name": "Current UTC time",
          "request": {
            "description": {
              "content": "A simple `GET` request to `/time/now` to return the current timestamp as a UTC string.\n\n```\nFri, 04 Nov 2016 09:00:46 GMT\n```",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "time",
                "now"
              ],
              "host": [
                "postman-echo",
                "com"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "html"
              },
              "id": "cfb5bd57-d760-4033-83ed-808715960969",
              "name": "time as text",
              "originalRequest": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "time",
                    "now"
                  ],
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "name": "Access-Control-Allow-Credentials",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Credentials",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Headers",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Methods",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Methods",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Origin",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Origin",
                  "value": ""
                },
                {
                  "name": "Access-Control-Expose-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Expose-Headers",
                  "value": ""
                },
                {
                  "name": "Connection",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "name": "Content-Encoding",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Encoding",
                  "value": "gzip"
                },
                {
                  "name": "Content-Length",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Length",
                  "value": "49"
                },
                {
                  "name": "Content-Type",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Type",
                  "value": "text/html; charset=utf-8"
                },
                {
                  "name": "Date",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Date",
                  "value": "Wed, 11 Jan 2017 10:27:12 GMT"
                },
                {
                  "name": "ETag",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "ETag",
                  "value": "W/\"1d-2jJhkzratfVX9VZ0+raHbw\""
                },
                {
                  "name": "Server",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Server",
                  "value": "nginx/1.10.1"
                },
                {
                  "name": "Vary",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Vary",
                  "value": "Accept-Encoding"
                },
                {
                  "name": "set-cookie",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "set-cookie",
                  "value": "sails.sid=s%3A2lT3TO7qS1tadeSAp4axl-NcXG9CV6Rf.HGqLY%2FlKEKY4fgCLePaAZs3tCHp%2Bglf7ZOJYlonGeig; Path=/; HttpOnly"
                }
              ],
              "body": "Wed, 11 Jan 2017 10:27:12 GMT",
              "cookie": [
                {
                  "name": "sails.sid",
                  "expires": null,
                  "domain": "postman-echo.com",
                  "path": "/",
                  "secure": false,
                  "httpOnly": true,
                  "value": "s%3A2lT3TO7qS1tadeSAp4axl-NcXG9CV6Rf.HGqLY%2FlKEKY4fgCLePaAZs3tCHp%2Bglf7ZOJYlonGeig"
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8868f348-c1e5-421c-90da-11ee71c96122",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response time matches server response 'date' header\", function () {",
                  "    pm.expect(pm.response.text()).to.eql(pm.response.headers.get('date'))",
                  "});"
                ],
                "_lastExecutionId": "0ff0fe6e-f665-49c8-baad-c92bfd104903"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "A simple `GET` request to `/time/now` to return the current timestamp as a UTC string.\n\n```\nFri, 04 Nov 2016 09:00:46 GMT\n```",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "time",
              "now"
            ],
            "host": [
              "postman-echo",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.26.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "de0e93a6-23c7-4b2a-81fd-da7559cc2a38",
              "system": true
            },
            {
              "key": "Host",
              "value": "postman-echo.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "sails.sid=s%3AIAWisgg-JoKPlGAJPcYZ1V7aYYyb84rt.L9iF17brSxTLQdCA6qC%2BFNoSRxoDEwCccl%2B0o%2FTdTTI",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "6181063b-384a-4275-a4a5-7a2ede980530",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Fri, 12 Jun 2020 13:15:48 GMT"
            },
            {
              "key": "Content-Type",
              "value": "text/html; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "29"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "ETag",
              "value": "W/\"1d-wCENiSK8rdBQ5BU034qIc/yiJI8\""
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              70,
              114,
              105,
              44,
              32,
              49,
              50,
              32,
              74,
              117,
              110,
              32,
              50,
              48,
              50,
              48,
              32,
              49,
              51,
              58,
              49,
              53,
              58,
              52,
              56,
              32,
              71,
              77,
              84
            ]
          },
          "cookie": [],
          "responseTime": 118,
          "responseSize": 29
        },
        "id": "67927941-3fd3-4f44-9a97-4b8979e1e5f3",
        "assertions": [
          {
            "assertion": "response is ok",
            "skipped": false
          },
          {
            "assertion": "response time matches server response 'date' header",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "2efbd8c0-99e4-4f93-8622-5f06fa25a668",
          "length": 37,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "f68189c5-76b4-4350-b30e-8f3fcff945db"
        },
        "item": {
          "_": {
            "postman_id": "d1c3e2f2-235a-4cb7-a3b9-b6ff46f7daac"
          },
          "id": "d1c3e2f2-235a-4cb7-a3b9-b6ff46f7daac",
          "name": "Timestamp validity",
          "request": {
            "description": {
              "content": "A simple `GET` request to `/time/valid` to determine the validity of the timestamp, (current by default).\nThis endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a valid key to indicate the result. The response code is `200`.\n\n```\n{\n  valid: true/false\n}\n```",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "time",
                "valid"
              ],
              "host": [
                "postman-echo",
                "com"
              ],
              "query": [
                {
                  "key": "timestamp",
                  "value": "2016-10-10"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "22664ff6-c88a-4b91-9436-5abae42ced68",
              "name": "Invalid Timestamp",
              "originalRequest": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "time",
                    "valid"
                  ],
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "query": [
                    {
                      "key": "timestamp",
                      "value": "2016-10-10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "name": "Access-Control-Allow-Credentials",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Credentials",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Headers",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Methods",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Methods",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Origin",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Origin",
                  "value": ""
                },
                {
                  "name": "Access-Control-Expose-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Expose-Headers",
                  "value": ""
                },
                {
                  "name": "Connection",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "name": "Content-Length",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Length",
                  "value": "15"
                },
                {
                  "name": "Content-Type",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "name": "Date",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Date",
                  "value": "Wed, 11 Jan 2017 10:27:53 GMT"
                },
                {
                  "name": "ETag",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "ETag",
                  "value": "W/\"f-/i9mO/upK91ZtL0BkKFGtw\""
                },
                {
                  "name": "Server",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Server",
                  "value": "nginx/1.10.1"
                },
                {
                  "name": "Vary",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Vary",
                  "value": "Accept-Encoding"
                },
                {
                  "name": "set-cookie",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "set-cookie",
                  "value": "sails.sid=s%3ATNJaNxi2QCv4RPBb64sIZxQGN1h6IP3g.9sQVAijlsLsh0r7LgffxXa9k2we6UumPEVv%2Bsk4woLI; Path=/; HttpOnly"
                }
              ],
              "body": "{\"valid\":false}",
              "cookie": [
                {
                  "name": "sails.sid",
                  "expires": null,
                  "domain": "postman-echo.com",
                  "path": "/",
                  "secure": false,
                  "httpOnly": true,
                  "value": "s%3ATNJaNxi2QCv4RPBb64sIZxQGN1h6IP3g.9sQVAijlsLsh0r7LgffxXa9k2we6UumPEVv%2Bsk4woLI"
                }
              ]
            },
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "3752ae04-4029-4faf-8703-9981f0aedc7d",
              "name": "Valid Timestamp",
              "originalRequest": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "time",
                    "valid"
                  ],
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "query": [
                    {
                      "key": "timestamp",
                      "value": "2016-10-10"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "name": "Access-Control-Allow-Credentials",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Credentials",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Headers",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Methods",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Methods",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Origin",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Origin",
                  "value": ""
                },
                {
                  "name": "Access-Control-Expose-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Expose-Headers",
                  "value": ""
                },
                {
                  "name": "Connection",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "name": "Content-Length",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Length",
                  "value": "14"
                },
                {
                  "name": "Content-Type",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "name": "Date",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Date",
                  "value": "Wed, 11 Jan 2017 10:27:33 GMT"
                },
                {
                  "name": "ETag",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "ETag",
                  "value": "W/\"e-OYN7L87J1Ba9oy5mJE2kcA\""
                },
                {
                  "name": "Server",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Server",
                  "value": "nginx/1.10.1"
                },
                {
                  "name": "Vary",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Vary",
                  "value": "Accept-Encoding"
                },
                {
                  "name": "set-cookie",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "set-cookie",
                  "value": "sails.sid=s%3AdDGZPe1CZw4mAxGVCHr6RfCADCAwquXa.F5MEm5LJad30JHrSwGGoyWLn2OAAGdvUM7kDtzNfdFI; Path=/; HttpOnly"
                }
              ],
              "body": "{\"valid\":true}",
              "cookie": [
                {
                  "name": "sails.sid",
                  "expires": null,
                  "domain": "postman-echo.com",
                  "path": "/",
                  "secure": false,
                  "httpOnly": true,
                  "value": "s%3AdDGZPe1CZw4mAxGVCHr6RfCADCAwquXa.F5MEm5LJad30JHrSwGGoyWLn2OAAGdvUM7kDtzNfdFI"
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3259322a-2c32-418a-b649-49525271b5d3",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response json should say whether request query time is valid\", function () {",
                  "    pm.response.to.have.jsonBody('valid', true);",
                  "});"
                ],
                "_lastExecutionId": "947dcd8e-c109-4fcf-a59b-812c355fd10b"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "A simple `GET` request to `/time/valid` to determine the validity of the timestamp, (current by default).\nThis endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a valid key to indicate the result. The response code is `200`.\n\n```\n{\n  valid: true/false\n}\n```",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "time",
              "valid"
            ],
            "host": [
              "postman-echo",
              "com"
            ],
            "query": [
              {
                "key": "timestamp",
                "value": "2016-10-10"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.26.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1955bafc-99ad-4878-91a7-95a081f15f6a",
              "system": true
            },
            {
              "key": "Host",
              "value": "postman-echo.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "sails.sid=s%3AIAWisgg-JoKPlGAJPcYZ1V7aYYyb84rt.L9iF17brSxTLQdCA6qC%2BFNoSRxoDEwCccl%2B0o%2FTdTTI",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "80acf203-691e-42b6-bc43-1b8e61e31856",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Fri, 12 Jun 2020 13:15:48 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "14"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "ETag",
              "value": "W/\"e-3MDSGou3nIOvlBZElUyTiBbaRZY\""
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              118,
              97,
              108,
              105,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              125
            ]
          },
          "cookie": [],
          "responseTime": 120,
          "responseSize": 14
        },
        "id": "d1c3e2f2-235a-4cb7-a3b9-b6ff46f7daac",
        "assertions": [
          {
            "assertion": "response is ok",
            "skipped": false
          },
          {
            "assertion": "response json should say whether request query time is valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "55bc1183-22ef-4205-b7a6-c383bdc456ca",
          "length": 37,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "ae8044ef-30ea-4488-8ceb-5bcb147c7e67"
        },
        "item": {
          "_": {
            "postman_id": "13de6f76-1b52-426a-878b-793b364b2678"
          },
          "id": "13de6f76-1b52-426a-878b-793b364b2678",
          "name": "Format timestamp",
          "request": {
            "description": {
              "content": "A simple `GET` request to `/time/format` to convert the timestamp to any desired valid format.\n\nThis endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `format` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  format: \"formatted-timestamp\"\n}\n```",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "time",
                "format"
              ],
              "host": [
                "postman-echo",
                "com"
              ],
              "query": [
                {
                  "key": "timestamp",
                  "value": "2016-10-10"
                },
                {
                  "key": "format",
                  "value": "mm"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b04ba64f-3306-4160-8ff2-caff65afdf24",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response json should say whether request query time is valid\", function () {",
                  "    pm.response.to.have.jsonBody('format', '20');",
                  "});"
                ],
                "_lastExecutionId": "e6e64041-23ac-4343-9ded-67df22c96f6d"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "A simple `GET` request to `/time/format` to convert the timestamp to any desired valid format.\n\nThis endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `format` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  format: \"formatted-timestamp\"\n}\n```",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "time",
              "format"
            ],
            "host": [
              "postman-echo",
              "com"
            ],
            "query": [
              {
                "key": "timestamp",
                "value": "2016-10-10"
              },
              {
                "key": "format",
                "value": "mm"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.26.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9b2f6125-b798-448d-9a7b-c6902778b538",
              "system": true
            },
            {
              "key": "Host",
              "value": "postman-echo.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "sails.sid=s%3AIAWisgg-JoKPlGAJPcYZ1V7aYYyb84rt.L9iF17brSxTLQdCA6qC%2BFNoSRxoDEwCccl%2B0o%2FTdTTI",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "55c83844-1620-4214-b67a-02bd3446f75d",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Fri, 12 Jun 2020 13:15:49 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "15"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "ETag",
              "value": "W/\"f-oSXEKZdRgFcBy3nxz+EFgc2p5wo\""
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3AQqLC_UT20CderebFEzB6xGpNGPj2WPt9.MwjDgsvuR3%2FRuNRE9ZMR2G6rX%2BbguJOm%2F%2BZuHjStjuU; Path=/; HttpOnly"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              102,
              111,
              114,
              109,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 121,
          "responseSize": 15
        },
        "id": "13de6f76-1b52-426a-878b-793b364b2678",
        "assertions": [
          {
            "assertion": "response is ok",
            "skipped": false
          },
          {
            "assertion": "response json should say whether request query time is valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "0ca202f2-2ac1-4ca6-a26f-99808c7ab854",
          "length": 37,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "c0b4bfda-0698-4e5e-8f78-dfbad3d4fe24"
        },
        "item": {
          "_": {
            "postman_id": "ce994a9f-e3a1-4d80-b80e-9907b60daa14"
          },
          "id": "ce994a9f-e3a1-4d80-b80e-9907b60daa14",
          "name": "Extract timestamp unit",
          "request": {
            "description": {
              "content": "A simple `GET` request to `/time/unit` to extract the specified timestamp unit (as provided in the `unit` query parameter). The default unit returned is the `year`.\n\nThis endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `unit` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  unit: \"extracted-timestamp-unit\"\n}\n```",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "time",
                "unit"
              ],
              "host": [
                "postman-echo",
                "com"
              ],
              "query": [
                {
                  "key": "timestamp",
                  "value": "2016-10-10"
                },
                {
                  "key": "unit",
                  "value": "day"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f35d31af-3cc2-45d6-af0f-2fb63a7bf404",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response json should say whether request query unit is valid\", function () {",
                  "    pm.response.to.have.jsonBody('unit', 1);",
                  "});"
                ],
                "_lastExecutionId": "9cf596b3-6dd6-48dd-9f48-084e3702d0a5"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "A simple `GET` request to `/time/unit` to extract the specified timestamp unit (as provided in the `unit` query parameter). The default unit returned is the `year`.\n\nThis endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `unit` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  unit: \"extracted-timestamp-unit\"\n}\n```",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "time",
              "unit"
            ],
            "host": [
              "postman-echo",
              "com"
            ],
            "query": [
              {
                "key": "timestamp",
                "value": "2016-10-10"
              },
              {
                "key": "unit",
                "value": "day"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.26.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "cc959035-a086-4714-b102-973f56e07675",
              "system": true
            },
            {
              "key": "Host",
              "value": "postman-echo.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "sails.sid=s%3AQqLC_UT20CderebFEzB6xGpNGPj2WPt9.MwjDgsvuR3%2FRuNRE9ZMR2G6rX%2BbguJOm%2F%2BZuHjStjuU",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "4a535672-e50b-46b2-8861-51a7eb14247d",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Fri, 12 Jun 2020 13:15:49 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "10"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "ETag",
              "value": "W/\"a-Tq86/bt7ViOhfxXgqKCTL6sompk\""
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3AQQi5RLAsV5dgcGCnHk1WVXAEtNlyo0Vg.i55XkjYN%2F2BrxwxR8l1Ry0erIsurJpBP7Q8%2BUeBq7xA; Path=/; HttpOnly"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              117,
              110,
              105,
              116,
              34,
              58,
              49,
              125
            ]
          },
          "cookie": [],
          "responseTime": 121,
          "responseSize": 10
        },
        "id": "ce994a9f-e3a1-4d80-b80e-9907b60daa14",
        "assertions": [
          {
            "assertion": "response is ok",
            "skipped": false
          },
          {
            "assertion": "response json should say whether request query unit is valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "3f651dc1-6e70-4e32-917d-785725995803",
          "length": 37,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "8b8fdc56-86a9-4450-99b7-4b59e74fe870"
        },
        "item": {
          "_": {
            "postman_id": "a4684425-c101-4c22-93f9-06a3b14f6db5"
          },
          "id": "a4684425-c101-4c22-93f9-06a3b14f6db5",
          "name": "Time addition",
          "request": {
            "description": {
              "content": "A simple `GET` request to `/time/add` to add units of time to the specified / current timestamp (as provided in the `years`, `months`, `days`, `hours`, `minutes`, `seconds`, and `milliseconds` query parameters).\n\nThis endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `sum` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  sum: \"sum of (provided / current) and provided timestamps\"\n}\n```",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "time",
                "add"
              ],
              "host": [
                "postman-echo",
                "com"
              ],
              "query": [
                {
                  "key": "timestamp",
                  "value": "2016-10-10"
                },
                {
                  "key": "years",
                  "value": "100"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "690e316b-b111-401a-9b5b-feee8fe477ed",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response json should return the added years\", function () {",
                  "    pm.response.to.have.jsonBody('sum', 'Sat Oct 10 2116 00:00:00 GMT+0000');",
                  "});"
                ],
                "_lastExecutionId": "d014c719-7f98-4f17-a159-bb2d4f38a74e"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "A simple `GET` request to `/time/add` to add units of time to the specified / current timestamp (as provided in the `years`, `months`, `days`, `hours`, `minutes`, `seconds`, and `milliseconds` query parameters).\n\nThis endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `sum` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  sum: \"sum of (provided / current) and provided timestamps\"\n}\n```",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "time",
              "add"
            ],
            "host": [
              "postman-echo",
              "com"
            ],
            "query": [
              {
                "key": "timestamp",
                "value": "2016-10-10"
              },
              {
                "key": "years",
                "value": "100"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.26.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "409709f9-d278-4555-9d65-23f626dbeb26",
              "system": true
            },
            {
              "key": "Host",
              "value": "postman-echo.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "sails.sid=s%3AQQi5RLAsV5dgcGCnHk1WVXAEtNlyo0Vg.i55XkjYN%2F2BrxwxR8l1Ry0erIsurJpBP7Q8%2BUeBq7xA",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "beb7ef2f-21b2-4faf-af40-e40e2b7213ca",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Fri, 12 Jun 2020 13:15:49 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "43"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "ETag",
              "value": "W/\"2b-NI+s6dhyoOC4+MmZW5sCBgzsnMw\""
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3A6Ujp8pz2S7O-bMCXUgqBo4mHjXDRuhO8.tm1NhNodwHEjLMpQVbcJwjkiCKdzMbbqrKmBXs400Pk; Path=/; HttpOnly"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              109,
              34,
              58,
              34,
              83,
              97,
              116,
              32,
              79,
              99,
              116,
              32,
              49,
              48,
              32,
              50,
              49,
              49,
              54,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              43,
              48,
              48,
              48,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 118,
          "responseSize": 43
        },
        "id": "a4684425-c101-4c22-93f9-06a3b14f6db5",
        "assertions": [
          {
            "assertion": "response is ok",
            "skipped": false
          },
          {
            "assertion": "response json should return the added years",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "8677542d-e10a-4ad5-b6e2-fb468c9f692e",
          "length": 37,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "8672f369-2ed4-49b9-bbfe-f6229667ddd2"
        },
        "item": {
          "_": {
            "postman_id": "cf3eabd6-f74a-476e-ba44-71ce8d5094c8"
          },
          "id": "cf3eabd6-f74a-476e-ba44-71ce8d5094c8",
          "name": "Time subtraction",
          "request": {
            "description": {
              "content": "A simple `GET` request to `/time/subtract` to subtract units of time from the specified / current timestamp (as provided in the `years`, `months`, `days`, `hours`, `minutes`, `seconds`, and `milliseconds` query parameters).\n\nThis endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `difference` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  difference: \"difference between (provided / current) and provided timestamps\"\n}\n```",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "time",
                "subtract"
              ],
              "host": [
                "postman-echo",
                "com"
              ],
              "query": [
                {
                  "key": "timestamp",
                  "value": "2016-10-10"
                },
                {
                  "key": "years",
                  "value": "50"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "89834a3a-1f96-4a71-a26b-c9d598da4202",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response json should return the subtracted years\", function () {",
                  "    pm.response.to.have.jsonBody('difference', 'Mon Oct 10 1966 00:00:00 GMT+0000');",
                  "});"
                ],
                "_lastExecutionId": "02b46a92-d30a-4939-8684-45e01bd319fb"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "A simple `GET` request to `/time/subtract` to subtract units of time from the specified / current timestamp (as provided in the `years`, `months`, `days`, `hours`, `minutes`, `seconds`, and `milliseconds` query parameters).\n\nThis endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `difference` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  difference: \"difference between (provided / current) and provided timestamps\"\n}\n```",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "time",
              "subtract"
            ],
            "host": [
              "postman-echo",
              "com"
            ],
            "query": [
              {
                "key": "timestamp",
                "value": "2016-10-10"
              },
              {
                "key": "years",
                "value": "50"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.26.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f6d7a858-ecdf-4e33-8319-a8159d0ad796",
              "system": true
            },
            {
              "key": "Host",
              "value": "postman-echo.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "sails.sid=s%3A6Ujp8pz2S7O-bMCXUgqBo4mHjXDRuhO8.tm1NhNodwHEjLMpQVbcJwjkiCKdzMbbqrKmBXs400Pk",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "1d641212-b3c3-4513-acfa-6e42b725c79b",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Fri, 12 Jun 2020 13:15:49 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "50"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "ETag",
              "value": "W/\"32-PND5PkDaCj18RICDpWcSi9vkakY\""
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3AnKNZbn6_rMdC77t0BiEsfDdAiib1WU_V.1FBm5pJnhfIKgZHDUwAPgznHFMtQUFbi4smwR%2FsQI8c; Path=/; HttpOnly"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              105,
              102,
              102,
              101,
              114,
              101,
              110,
              99,
              101,
              34,
              58,
              34,
              77,
              111,
              110,
              32,
              79,
              99,
              116,
              32,
              49,
              48,
              32,
              49,
              57,
              54,
              54,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              43,
              48,
              48,
              48,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 122,
          "responseSize": 50
        },
        "id": "cf3eabd6-f74a-476e-ba44-71ce8d5094c8",
        "assertions": [
          {
            "assertion": "response is ok",
            "skipped": false
          },
          {
            "assertion": "response json should return the subtracted years",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "e757dbec-a90d-42e1-a8f1-188e98d8afd5",
          "length": 37,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "a232ee68-f2f5-4d5e-8612-d196947f192b"
        },
        "item": {
          "_": {
            "postman_id": "e077a9c3-e0c2-408e-985c-ee1af659bbc5"
          },
          "id": "e077a9c3-e0c2-408e-985c-ee1af659bbc5",
          "name": "Start of time",
          "request": {
            "description": {
              "content": "A simple `GET` request to `/time/start` to return a relative timstamp in the past from the specified / current timestamp (as provided in the `unit` query parameter).\n\nFor instance, if the `unit` has been specified as `month`, the returned timestamp would indicate the beginning of the current month. Similar results are returned for other units of time, like: `years`, `months`, `days`, `hours`, `minutes`, `seconds`, and `milliseconds`\n\nThis endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `start` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  start: \"A timestamp from the past, depending on the `unit` specified\"\n}\n```",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "time",
                "start"
              ],
              "host": [
                "postman-echo",
                "com"
              ],
              "query": [
                {
                  "key": "timestamp",
                  "value": "2016-10-10"
                },
                {
                  "key": "unit",
                  "value": "month"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ecf607b2-295e-4714-9021-36295aa20beb",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response json should return the beginning of month\", function () {",
                  "    pm.response.to.have.jsonBody('start', 'Sat Oct 01 2016 00:00:00 GMT+0000');",
                  "});"
                ],
                "_lastExecutionId": "bea1c9b3-7151-4cfd-bbc4-99437505dc6e"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "A simple `GET` request to `/time/start` to return a relative timstamp in the past from the specified / current timestamp (as provided in the `unit` query parameter).\n\nFor instance, if the `unit` has been specified as `month`, the returned timestamp would indicate the beginning of the current month. Similar results are returned for other units of time, like: `years`, `months`, `days`, `hours`, `minutes`, `seconds`, and `milliseconds`\n\nThis endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `start` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  start: \"A timestamp from the past, depending on the `unit` specified\"\n}\n```",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "time",
              "start"
            ],
            "host": [
              "postman-echo",
              "com"
            ],
            "query": [
              {
                "key": "timestamp",
                "value": "2016-10-10"
              },
              {
                "key": "unit",
                "value": "month"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.26.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "23b322cc-20db-4e44-bc07-de078afe900a",
              "system": true
            },
            {
              "key": "Host",
              "value": "postman-echo.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "sails.sid=s%3AnKNZbn6_rMdC77t0BiEsfDdAiib1WU_V.1FBm5pJnhfIKgZHDUwAPgznHFMtQUFbi4smwR%2FsQI8c",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "4b9fc980-5f12-4a8c-ab70-4b5d6b217936",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Fri, 12 Jun 2020 13:15:49 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "45"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "ETag",
              "value": "W/\"2d-+DRNEGBPVvAa16PUC5AjHCOmq/0\""
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3AbOiieCHoN2RTvbxAsBnLtOnNINCFKhuc.eoc5l%2BPcTMIIOhNgYlZJ2M6hH87eTtrpwCNY2LEzqXU; Path=/; HttpOnly"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              114,
              116,
              34,
              58,
              34,
              83,
              97,
              116,
              32,
              79,
              99,
              116,
              32,
              48,
              49,
              32,
              50,
              48,
              49,
              54,
              32,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              32,
              71,
              77,
              84,
              43,
              48,
              48,
              48,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 120,
          "responseSize": 45
        },
        "id": "e077a9c3-e0c2-408e-985c-ee1af659bbc5",
        "assertions": [
          {
            "assertion": "response is ok",
            "skipped": false
          },
          {
            "assertion": "response json should return the beginning of month",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "720fcc1b-481e-43b8-a636-bec4b7679702",
          "length": 37,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "37d7c16a-601d-46f1-9b3d-cf748e609e9b"
        },
        "item": {
          "_": {
            "postman_id": "dc44b9cc-7814-4131-8261-615775518a95"
          },
          "id": "dc44b9cc-7814-4131-8261-615775518a95",
          "name": "Object representation",
          "request": {
            "description": {
              "content": "A simple `GET` request to `/time/object` to return the current / provided timestamp as a JSON object.\n\nFor instance, if the `unit` has been specified as `month`, the returned timestamp would indicate the beginning of the current month. Similar results are returned for other units of time, like: `years`, `months`, `days`, `hours`, `minutes`, `seconds`, and `milliseconds`\n\nThis endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  years: 2016,\n  months: 10,\n  days: 10,\n  hours: 23,\n  minutes: 34,\n  seconds: 20,\n  milliseconds: 980\n}\n```",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "time",
                "object"
              ],
              "host": [
                "postman-echo",
                "com"
              ],
              "query": [
                {
                  "key": "timestamp",
                  "value": "2016-10-10"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e3b56686-6c9a-4192-abae-b0cefb4e9efb",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response json should return the date components\", function () {",
                  "    pm.expect(pm.response.json()).to.eql({",
                  "        \"years\": 2016,",
                  "        \"months\": 9,",
                  "        \"date\": 10,",
                  "        ",
                  "        \"hours\": 0,",
                  "        \"minutes\": 0,",
                  "        \"seconds\": 0,",
                  "        \"milliseconds\": 0",
                  "    });",
                  "});"
                ],
                "_lastExecutionId": "34ea0171-9971-42ba-9f93-d726cd62958f"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "A simple `GET` request to `/time/object` to return the current / provided timestamp as a JSON object.\n\nFor instance, if the `unit` has been specified as `month`, the returned timestamp would indicate the beginning of the current month. Similar results are returned for other units of time, like: `years`, `months`, `days`, `hours`, `minutes`, `seconds`, and `milliseconds`\n\nThis endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  years: 2016,\n  months: 10,\n  days: 10,\n  hours: 23,\n  minutes: 34,\n  seconds: 20,\n  milliseconds: 980\n}\n```",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "time",
              "object"
            ],
            "host": [
              "postman-echo",
              "com"
            ],
            "query": [
              {
                "key": "timestamp",
                "value": "2016-10-10"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.26.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f3eb6757-08b7-4f11-a09e-321ae056ef01",
              "system": true
            },
            {
              "key": "Host",
              "value": "postman-echo.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "sails.sid=s%3AbOiieCHoN2RTvbxAsBnLtOnNINCFKhuc.eoc5l%2BPcTMIIOhNgYlZJ2M6hH87eTtrpwCNY2LEzqXU",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "1f4f6e4f-bfe9-4596-8dbc-e8bdd7bc3625",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Fri, 12 Jun 2020 13:15:49 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "86"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "ETag",
              "value": "W/\"56-sbJq4ZMpg65IM+Xxb5GSE9GGvQc\""
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3Ac8A7lQUw7kGmZGN9TYnI_7cOZRcncrIT.U1QykkTYQS4JA9BB7USz7Ewv9meKTmHX7iKHzNZ27Zw; Path=/; HttpOnly"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              121,
              101,
              97,
              114,
              115,
              34,
              58,
              50,
              48,
              49,
              54,
              44,
              34,
              109,
              111,
              110,
              116,
              104,
              115,
              34,
              58,
              57,
              44,
              34,
              100,
              97,
              116,
              101,
              34,
              58,
              49,
              48,
              44,
              34,
              104,
              111,
              117,
              114,
              115,
              34,
              58,
              48,
              44,
              34,
              109,
              105,
              110,
              117,
              116,
              101,
              115,
              34,
              58,
              48,
              44,
              34,
              115,
              101,
              99,
              111,
              110,
              100,
              115,
              34,
              58,
              48,
              44,
              34,
              109,
              105,
              108,
              108,
              105,
              115,
              101,
              99,
              111,
              110,
              100,
              115,
              34,
              58,
              48,
              125
            ]
          },
          "cookie": [],
          "responseTime": 130,
          "responseSize": 86
        },
        "id": "dc44b9cc-7814-4131-8261-615775518a95",
        "assertions": [
          {
            "assertion": "response is ok",
            "skipped": false
          },
          {
            "assertion": "response json should return the date components",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "8ea9a6de-aadc-410d-947e-4ee914d84ae5",
          "length": 37,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "3f9625f5-c6e5-49e1-a85d-bc8143a9a226"
        },
        "item": {
          "_": {
            "postman_id": "53a63c13-c1b0-4b09-b94b-1f75a045e5ee"
          },
          "id": "53a63c13-c1b0-4b09-b94b-1f75a045e5ee",
          "name": "Before comparisons",
          "request": {
            "description": {
              "content": "A simple `GET` request to `/time/before` to check if the provided timestamps is before a comparison `target` (query parameter).\n\nThis endpoint accepts `timestamp`, `locale`, `format`, `strict`, and `target` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `before` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  before: true/false\n}\n```",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "time",
                "before"
              ],
              "host": [
                "postman-echo",
                "com"
              ],
              "query": [
                {
                  "key": "timestamp",
                  "value": "2016-10-10"
                },
                {
                  "key": "target",
                  "value": "2017-10-10"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "604d7c67-92f2-4d29-b05b-85937bf848bc",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response json should say timestamp is before target\", function () {",
                  "    pm.response.to.have.jsonBody('before', true);",
                  "});"
                ],
                "_lastExecutionId": "cb93ce58-bc35-48b4-bec3-b9b6282008d3"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "A simple `GET` request to `/time/before` to check if the provided timestamps is before a comparison `target` (query parameter).\n\nThis endpoint accepts `timestamp`, `locale`, `format`, `strict`, and `target` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `before` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  before: true/false\n}\n```",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "time",
              "before"
            ],
            "host": [
              "postman-echo",
              "com"
            ],
            "query": [
              {
                "key": "timestamp",
                "value": "2016-10-10"
              },
              {
                "key": "target",
                "value": "2017-10-10"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.26.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "47952db0-cd23-431b-82cd-fc681d28e7f5",
              "system": true
            },
            {
              "key": "Host",
              "value": "postman-echo.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "sails.sid=s%3Ac8A7lQUw7kGmZGN9TYnI_7cOZRcncrIT.U1QykkTYQS4JA9BB7USz7Ewv9meKTmHX7iKHzNZ27Zw",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "dc7ce6ad-5ea2-4cd6-8781-3b5467a02efd",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Fri, 12 Jun 2020 13:15:49 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "15"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "ETag",
              "value": "W/\"f-pYji1tDlxSR6vlOQLH4azAZGkpo\""
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3AHu3NptxyRfQKSKde0wqMVFbcVmYtPp1w.0GBh9TVfIKLE3FdmEEzePwEV1a%2F%2FObsIpO7ktavP7io; Path=/; HttpOnly"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              98,
              101,
              102,
              111,
              114,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              125
            ]
          },
          "cookie": [],
          "responseTime": 118,
          "responseSize": 15
        },
        "id": "53a63c13-c1b0-4b09-b94b-1f75a045e5ee",
        "assertions": [
          {
            "assertion": "response is ok",
            "skipped": false
          },
          {
            "assertion": "response json should say timestamp is before target",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "040fee92-3b8a-41e9-a32f-a6ffcd6ffe0e",
          "length": 37,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "3eb78ec2-379e-4c10-b59a-b78fe4b079a9"
        },
        "item": {
          "_": {
            "postman_id": "6e232133-a755-4cad-880c-3ec4104ed16e"
          },
          "id": "6e232133-a755-4cad-880c-3ec4104ed16e",
          "name": "After comparisons",
          "request": {
            "description": {
              "content": "A simple `GET` request to `/time/after` to check if the provided timestamps is after a comparison `target` (query parameter).\n\nThis endpoint accepts `timestamp`, `locale`, `format`, `strict`, and `target` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `after` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  after: true/false\n}\n```",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "time",
                "after"
              ],
              "host": [
                "postman-echo",
                "com"
              ],
              "query": [
                {
                  "key": "timestamp",
                  "value": "2016-10-10"
                },
                {
                  "key": "target",
                  "value": "2017-10-10"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b5b899c8-aa7b-4f44-ac26-f8c432b92043",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response json should say timestamp is not after target\", function () {",
                  "    pm.response.to.have.jsonBody('after', false);",
                  "});"
                ],
                "_lastExecutionId": "cdb21c26-be6b-4fd0-b5fe-5900643d7db7"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "A simple `GET` request to `/time/after` to check if the provided timestamps is after a comparison `target` (query parameter).\n\nThis endpoint accepts `timestamp`, `locale`, `format`, `strict`, and `target` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `after` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  after: true/false\n}\n```",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "time",
              "after"
            ],
            "host": [
              "postman-echo",
              "com"
            ],
            "query": [
              {
                "key": "timestamp",
                "value": "2016-10-10"
              },
              {
                "key": "target",
                "value": "2017-10-10"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.26.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "0ebfc435-c762-43dd-b87f-66481a54682b",
              "system": true
            },
            {
              "key": "Host",
              "value": "postman-echo.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "sails.sid=s%3AHu3NptxyRfQKSKde0wqMVFbcVmYtPp1w.0GBh9TVfIKLE3FdmEEzePwEV1a%2F%2FObsIpO7ktavP7io",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "c266f1e5-91f1-4cae-b420-06820d2e287c",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Fri, 12 Jun 2020 13:15:50 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "15"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "ETag",
              "value": "W/\"f-1yo7D9f7qelpng2aZyy3Vk9UAA8\""
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3A_51sRn4DIYRJ0mF-pMtHt189ojwTol5m.YJ77wT5VTsjrTdtapY44DRpyAiWgk8%2F5o3HPjXaKyto; Path=/; HttpOnly"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              97,
              102,
              116,
              101,
              114,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125
            ]
          },
          "cookie": [],
          "responseTime": 120,
          "responseSize": 15
        },
        "id": "6e232133-a755-4cad-880c-3ec4104ed16e",
        "assertions": [
          {
            "assertion": "response is ok",
            "skipped": false
          },
          {
            "assertion": "response json should say timestamp is not after target",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "a8bab07d-7e2c-40d8-8752-e4e917394862",
          "length": 37,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "c7ea4c99-5c21-433d-a4c8-4a38f94d0eb6"
        },
        "item": {
          "_": {
            "postman_id": "13726bf5-6834-4bdf-aaa5-b833a19ea039"
          },
          "id": "13726bf5-6834-4bdf-aaa5-b833a19ea039",
          "name": "Between timestamps",
          "request": {
            "description": {
              "content": "A simple `GET` request to `/time/between` to check if the provided timestamp is between a range specified by the `start` and `end` query parameters. A resolution limit can also be specified by the `unit` query parameter.\n\nFor instance, for a resolution `unit` of `month`,\n`2016-10-05` does lie between `2016-11-02` and `2016-09-01`.\n\nThis endpoint also accepts `timestamp`, `locale`, `format`, `strict`, and `target` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `between` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  between: true/false\n}\n```",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "time",
                "between"
              ],
              "host": [
                "postman-echo",
                "com"
              ],
              "query": [
                {
                  "key": "timestamp",
                  "value": "2016-10-10"
                },
                {
                  "key": "start",
                  "value": "2017-10-10"
                },
                {
                  "key": "end",
                  "value": "2019-10-10"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "946e2a7c-a7d7-4869-92f5-37bd42a10c7b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response json should say timestamp is not between start and end\", function () {",
                  "    pm.response.to.have.jsonBody('between', false);",
                  "});"
                ],
                "_lastExecutionId": "0e742c6c-b5f9-4e54-822f-27ecc1b329f9"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "A simple `GET` request to `/time/between` to check if the provided timestamp is between a range specified by the `start` and `end` query parameters. A resolution limit can also be specified by the `unit` query parameter.\n\nFor instance, for a resolution `unit` of `month`,\n`2016-10-05` does lie between `2016-11-02` and `2016-09-01`.\n\nThis endpoint also accepts `timestamp`, `locale`, `format`, `strict`, and `target` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `between` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  between: true/false\n}\n```",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "time",
              "between"
            ],
            "host": [
              "postman-echo",
              "com"
            ],
            "query": [
              {
                "key": "timestamp",
                "value": "2016-10-10"
              },
              {
                "key": "start",
                "value": "2017-10-10"
              },
              {
                "key": "end",
                "value": "2019-10-10"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.26.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "740042d7-49ba-437c-a288-b88a17b61b66",
              "system": true
            },
            {
              "key": "Host",
              "value": "postman-echo.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "sails.sid=s%3A_51sRn4DIYRJ0mF-pMtHt189ojwTol5m.YJ77wT5VTsjrTdtapY44DRpyAiWgk8%2F5o3HPjXaKyto",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "63020d65-c24f-4d05-ae8a-fd47dba7770b",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Fri, 12 Jun 2020 13:15:50 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "17"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "ETag",
              "value": "W/\"11-Q5jSDN8J9UWiS3bMKjaPflikNDU\""
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3A9lEZ0YpgVErqAQgQYxiM9zSQuKjWxbwp.ZCXetaWhscnxJ5UYJVt0eulzOBHm3DrwtOUYq2MpV3Y; Path=/; HttpOnly"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              98,
              101,
              116,
              119,
              101,
              101,
              110,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125
            ]
          },
          "cookie": [],
          "responseTime": 119,
          "responseSize": 17
        },
        "id": "13726bf5-6834-4bdf-aaa5-b833a19ea039",
        "assertions": [
          {
            "assertion": "response is ok",
            "skipped": false
          },
          {
            "assertion": "response json should say timestamp is not between start and end",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "d3d03afc-142b-4845-a524-17c2911fa188",
          "length": 37,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "d309fb0e-388e-44a6-a974-af392a24807e"
        },
        "item": {
          "_": {
            "postman_id": "5cd165e3-10d7-4e28-9d5a-c1ff69de80b8"
          },
          "id": "5cd165e3-10d7-4e28-9d5a-c1ff69de80b8",
          "name": "Leap year check",
          "request": {
            "description": {
              "content": "A simple `GET` request to `/time/leap` to check if the provided/current timestamp belongs to a leap year.\n\nThis endpoint also accepts `timestamp`, `locale`, `format`, `strict`, and `target` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `leap` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  leap: true/false\n}\n```",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "time",
                "leap"
              ],
              "host": [
                "postman-echo",
                "com"
              ],
              "query": [
                {
                  "key": "timestamp",
                  "value": "2016-10-10"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d6cf5988-0fe6-4bef-afe6-49958848e144",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response json should say timestamp is within leap year\", function () {",
                  "    pm.response.to.have.jsonBody('leap', true);",
                  "});"
                ],
                "_lastExecutionId": "6a24888e-fe68-420c-9d8c-f18b61b2953c"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "A simple `GET` request to `/time/leap` to check if the provided/current timestamp belongs to a leap year.\n\nThis endpoint also accepts `timestamp`, `locale`, `format`, `strict`, and `target` query parameters to construct the date time instance to check against.\n\nResponses are provided in JSON format, with a `leap` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.\n\n```\n{\n  leap: true/false\n}\n```",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "time",
              "leap"
            ],
            "host": [
              "postman-echo",
              "com"
            ],
            "query": [
              {
                "key": "timestamp",
                "value": "2016-10-10"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.26.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b43f6d72-1e72-4b02-9c4f-0512142c14ba",
              "system": true
            },
            {
              "key": "Host",
              "value": "postman-echo.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "sails.sid=s%3A9lEZ0YpgVErqAQgQYxiM9zSQuKjWxbwp.ZCXetaWhscnxJ5UYJVt0eulzOBHm3DrwtOUYq2MpV3Y",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "4c841756-7a0f-4d70-923c-0be7da5bd40f",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Fri, 12 Jun 2020 13:15:50 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "13"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "ETag",
              "value": "W/\"d-/cHbrs54NBQWs+BmYLn36yaGw/0\""
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3APkXufcZjFs7M9-AZs6X7xfz6RCn5iGIs.7FwKT2EVt1uBqYdZ%2BJIXC4qpbuLAeJfgJsfY5IE7kOA; Path=/; HttpOnly"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              108,
              101,
              97,
              112,
              34,
              58,
              116,
              114,
              117,
              101,
              125
            ]
          },
          "cookie": [],
          "responseTime": 122,
          "responseSize": 13
        },
        "id": "5cd165e3-10d7-4e28-9d5a-c1ff69de80b8",
        "assertions": [
          {
            "assertion": "response is ok",
            "skipped": false
          },
          {
            "assertion": "response json should say timestamp is within leap year",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "8810fad2-1c3c-44d2-b481-1795909fabbe",
          "length": 37,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "568fbc88-fce9-47ce-ae45-71349229c9ae"
        },
        "item": {
          "_": {
            "postman_id": "e299a4a4-5574-4f05-9581-2ef60f545732"
          },
          "id": "e299a4a4-5574-4f05-9581-2ef60f545732",
          "name": "Transform collection from format v1 to v2",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "transform",
                "collection"
              ],
              "host": [
                "postman-echo",
                "com"
              ],
              "query": [
                {
                  "key": "from",
                  "value": "1"
                },
                {
                  "key": "to",
                  "value": "2"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"id\": \"7875be4b-917d-4aff-8cc4-5606c36bf418\",\n  \"name\": \"Sample Postman Collection\",\n  \"description\": \"A sample collection to demonstrate collections as a set of related requests\",\n  \"order\": [\n    \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n    \"141ba274-cc50-4377-a59c-e080066f375e\"\n  ],\n  \"folders\": [],\n  \"requests\": [\n    {\n      \"id\": \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n      \"name\": \"A simple GET request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"GET\",\n      \"headers\": \"\",\n      \"data\": [],\n      \"rawModeData\": \"\",\n      \"tests\": \"tests['response code is 200'] = (responseCode.code === 200);\",\n      \"preRequestScript\": \"\",\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\"\n    },\n    {\n      \"id\": \"141ba274-cc50-4377-a59c-e080066f375e\",\n      \"name\": \"A simple POST request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"POST\",\n      \"headers\": \"Content-Type: text/plain\",\n      \"dataMode\": \"raw\",\n      \"data\": [],\n      \"rawModeData\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\",\n      \"url\": \"https://postman-echo.com/post\"\n    }\n  ]\n}"
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "79270673-03ed-4fa2-abc5-80b405f5d662",
              "name": "Sample v2 Response",
              "originalRequest": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "transform",
                    "collection"
                  ],
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "query": [
                    {
                      "key": "from",
                      "value": "1"
                    },
                    {
                      "key": "to",
                      "value": "2"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "The mime type of this content",
                      "type": "text/plain"
                    },
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"id\": \"7875be4b-917d-4aff-8cc4-5606c36bf418\",\n  \"name\": \"Sample Postman Collection\",\n  \"description\": \"A sample collection to demonstrate collections as a set of related requests\",\n  \"order\": [\n    \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n    \"141ba274-cc50-4377-a59c-e080066f375e\",\n    \"4511ca8b-0bc7-430f-b894-a7ec1036f322\"\n  ],\n  \"folders\": [],\n  \"requests\": [\n    {\n      \"id\": \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n      \"name\": \"A simple GET request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"GET\",\n      \"headers\": \"\",\n      \"data\": [],\n      \"rawModeData\": \"\",\n      \"tests\": \"tests['response code is 200'] = (responseCode.code === 200);\",\n      \"preRequestScript\": \"\",\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\"\n    },\n    {\n      \"id\": \"141ba274-cc50-4377-a59c-e080066f375e\",\n      \"name\": \"A simple POST request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"POST\",\n      \"headers\": \"Content-Type: text/plain\",\n      \"dataMode\": \"raw\",\n      \"data\": [],\n      \"rawModeData\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\",\n      \"url\": \"https://postman-echo.com/post\"\n    },\n    {\n      \"id\": \"4511ca8b-0bc7-430f-b894-a7ec1036f322\",\n      \"name\": \"A simple POST request with JSON body\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"POST\",\n      \"headers\": \"Content-Type: application/json\",\n      \"dataMode\": \"raw\",\n      \"data\": [],\n      \"rawModeData\": \"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\",\n      \"url\": \"https://postman-echo.com/post\"\n    }\n  ]\n}"
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "name": "Access-Control-Allow-Credentials",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Credentials",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Headers",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Methods",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Methods",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Origin",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Origin",
                  "value": ""
                },
                {
                  "name": "Access-Control-Expose-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Expose-Headers",
                  "value": ""
                },
                {
                  "name": "Connection",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "name": "Content-Encoding",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Encoding",
                  "value": "gzip"
                },
                {
                  "name": "Content-Type",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "name": "Date",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Date",
                  "value": "Wed, 11 Jan 2017 10:41:32 GMT"
                },
                {
                  "name": "ETag",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "ETag",
                  "value": "W/\"4cc-7P727Clhlrl9+b1/vneniw\""
                },
                {
                  "name": "Server",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Server",
                  "value": "nginx/1.10.1"
                },
                {
                  "name": "Vary",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Vary",
                  "value": "X-HTTP-Method-Override, Accept-Encoding"
                },
                {
                  "name": "set-cookie",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "set-cookie",
                  "value": "sails.sid=s%3AHtnQ1hlPxoj7wZahoNkcjN-aw9nQL0fc.KSyfLbEKhv1Lt3LvH13Ogjv9ENZgsBBSM6V8Y7TqVOU; Path=/; HttpOnly"
                },
                {
                  "name": "transfer-encoding",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "transfer-encoding",
                  "value": "chunked"
                }
              ],
              "body": "{\"variables\":[],\"info\":{\"name\":\"Sample Postman Collection\",\"_postman_id\":\"7875be4b-917d-4aff-8cc4-5606c36bf418\",\"description\":\"A sample collection to demonstrate collections as a set of related requests\",\"schema\":\"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\"},\"item\":[{\"name\":\"A simple GET request\",\"event\":[{\"listen\":\"test\",\"script\":{\"type\":\"text/javascript\",\"exec\":[\"tests['response code is 200'] = (responseCode.code === 200);\"]}}],\"request\":{\"url\":\"https://postman-echo.com/get?source=newman-sample-github-collection\",\"method\":\"GET\",\"header\":[],\"body\":{\"mode\":\"raw\",\"raw\":\"\"}},\"response\":[]},{\"name\":\"A simple POST request\",\"request\":{\"url\":\"https://postman-echo.com/post\",\"method\":\"POST\",\"header\":[{\"key\":\"Content-Type\",\"value\":\"text/plain\",\"description\":\"\"}],\"body\":{\"mode\":\"raw\",\"raw\":\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\"}},\"response\":[]},{\"name\":\"A simple POST request with JSON body\",\"request\":{\"url\":\"https://postman-echo.com/post\",\"method\":\"POST\",\"header\":[{\"key\":\"Content-Type\",\"value\":\"application/json\",\"description\":\"\"}],\"body\":{\"mode\":\"raw\",\"raw\":\"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\"}},\"response\":[]}]}",
              "cookie": [
                {
                  "name": "sails.sid",
                  "expires": null,
                  "domain": "postman-echo.com",
                  "path": "/",
                  "secure": false,
                  "httpOnly": true,
                  "value": "s%3AHtnQ1hlPxoj7wZahoNkcjN-aw9nQL0fc.KSyfLbEKhv1Lt3LvH13Ogjv9ENZgsBBSM6V8Y7TqVOU"
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e74cf076-42a5-48a1-b283-822ab6a76189",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response has almost valid items\", function () {",
                  "    pm.response.to.have.jsonBody('info.schema', 'https://schema.getpostman.com/json/collection/v2.0.0/collection.json')",
                  "        .and.to.have.jsonBody('item[0].name', 'A simple GET request')",
                  "        .and.to.have.jsonBody('item[1].name', 'A simple POST request');",
                  "});"
                ],
                "_lastExecutionId": "133ae8d6-0dce-44be-aa69-7f5bdfde9fc2"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "transform",
              "collection"
            ],
            "host": [
              "postman-echo",
              "com"
            ],
            "query": [
              {
                "key": "from",
                "value": "1"
              },
              {
                "key": "to",
                "value": "2"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.26.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "aa8f0093-6529-4c05-a657-29f9920fcd4c",
              "system": true
            },
            {
              "key": "Host",
              "value": "postman-echo.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": 1188,
              "system": true
            },
            {
              "key": "Cookie",
              "value": "sails.sid=s%3APkXufcZjFs7M9-AZs6X7xfz6RCn5iGIs.7FwKT2EVt1uBqYdZ%2BJIXC4qpbuLAeJfgJsfY5IE7kOA",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"id\": \"7875be4b-917d-4aff-8cc4-5606c36bf418\",\n  \"name\": \"Sample Postman Collection\",\n  \"description\": \"A sample collection to demonstrate collections as a set of related requests\",\n  \"order\": [\n    \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n    \"141ba274-cc50-4377-a59c-e080066f375e\"\n  ],\n  \"folders\": [],\n  \"requests\": [\n    {\n      \"id\": \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n      \"name\": \"A simple GET request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"GET\",\n      \"headers\": \"\",\n      \"data\": [],\n      \"rawModeData\": \"\",\n      \"tests\": \"tests['response code is 200'] = (responseCode.code === 200);\",\n      \"preRequestScript\": \"\",\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\"\n    },\n    {\n      \"id\": \"141ba274-cc50-4377-a59c-e080066f375e\",\n      \"name\": \"A simple POST request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"POST\",\n      \"headers\": \"Content-Type: text/plain\",\n      \"dataMode\": \"raw\",\n      \"data\": [],\n      \"rawModeData\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\",\n      \"url\": \"https://postman-echo.com/post\"\n    }\n  ]\n}"
          }
        },
        "response": {
          "id": "227f2207-cfb7-4396-ab80-e733bc4500f6",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Fri, 12 Jun 2020 13:15:50 GMT"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3Aikj0j30V-ladk6oY-a6GqSsCUcAagCxG.4P5m5%2BHExcCeDx96YLMYMsfNwna1xq3gPaE2%2BbuYVzo; Path=/; HttpOnly"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 131,
          "responseSize": 0
        },
        "id": "e299a4a4-5574-4f05-9581-2ef60f545732",
        "assertions": [
          {
            "assertion": "response is ok",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "response is ok",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response has almost valid items",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response has almost valid items",
              "message": "expected undefined in response to contain property 'info.schema'",
              "stack": "AssertionError: expected undefined in response to contain property 'info.schema'\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "df61e0ed-3d0a-435e-b341-9af1ded07b2c",
          "length": 37,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "9c80b966-99ff-4731-be82-da017c1c6fc3"
        },
        "item": {
          "_": {
            "postman_id": "4657083a-08fe-4d58-850e-cd4a2cf7baee"
          },
          "id": "4657083a-08fe-4d58-850e-cd4a2cf7baee",
          "name": "Transform collection from format v2 to v1",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "transform",
                "collection"
              ],
              "host": [
                "postman-echo",
                "com"
              ],
              "query": [
                {
                  "key": "from",
                  "value": "2"
                },
                {
                  "key": "to",
                  "value": "1"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"info\": {\n    \"name\": \"Sample Postman Collection\",\n    \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\",\n    \"description\": \"A sample collection to demonstrate collections as a set of related requests\"\n  },\n\n  \"item\": [{\n    \"name\": \"A simple GET request\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\",\n      \"method\": \"GET\"\n    }\n  }, {\n    \"name\": \"A simple POST request\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/post\",\n      \"method\": \"POST\",\n      \"header\": [{\n        \"key\": \"Content-Type\",\n        \"value\": \"text/plain\"\n      }],\n      \"body\": {\n        \"mode\": \"raw\",\n        \"raw\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\"\n      }\n    }\n  }]\n}"
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "aea638eb-dcbf-42dd-9f42-bb62f4267a77",
              "name": "Sample v1 Response",
              "originalRequest": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "transform",
                    "collection"
                  ],
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "query": [
                    {
                      "key": "from",
                      "value": "2"
                    },
                    {
                      "key": "to",
                      "value": "1"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "The mime type of this content",
                      "type": "text/plain"
                    },
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"info\": {\n    \"name\": \"Sample Postman Collection\",\n    \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\",\n    \"description\": \"A sample collection to demonstrate collections as a set of related requests\"\n  },\n\n  \"item\": [{\n    \"name\": \"A simple GET request\",\n    \"event\": [{\n      \"listen\": \"test\",\n      \"script\": {\n        \"type\": \"text/javascript\",\n        \"exec\": [\"tests['response code is 200'] = (responseCode.code === 200);\"]\n      }\n    }],\n    \"request\": {\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\",\n      \"method\": \"GET\"\n    }\n  }, {\n    \"name\": \"A simple POST request\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/post\",\n      \"method\": \"POST\",\n      \"header\": [{\n        \"key\": \"Content-Type\",\n        \"value\": \"text/plain\"\n      }],\n      \"body\": {\n        \"mode\": \"raw\",\n        \"raw\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\"\n      }\n    }\n  }, {\n    \"name\": \"A simple POST request with JSON body\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/post\",\n      \"method\": \"POST\",\n      \"header\": [{\n        \"key\": \"Content-Type\",\n        \"value\": \"application/json\"\n      }],\n      \"body\": {\n        \"mode\": \"raw\",\n        \"raw\": \"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\"\n      }\n    }\n  }]\n}"
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "name": "Access-Control-Allow-Credentials",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Credentials",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Headers",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Methods",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Methods",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Origin",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Origin",
                  "value": ""
                },
                {
                  "name": "Access-Control-Expose-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Expose-Headers",
                  "value": ""
                },
                {
                  "name": "Connection",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "name": "Content-Encoding",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Encoding",
                  "value": "gzip"
                },
                {
                  "name": "Content-Type",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "name": "Date",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Date",
                  "value": "Wed, 11 Jan 2017 10:38:42 GMT"
                },
                {
                  "name": "ETag",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "ETag",
                  "value": "W/\"569-P9uLZEIyoPfMmQ+U0mTO1A\""
                },
                {
                  "name": "Server",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Server",
                  "value": "nginx/1.10.1"
                },
                {
                  "name": "Vary",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Vary",
                  "value": "X-HTTP-Method-Override, Accept-Encoding"
                },
                {
                  "name": "set-cookie",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "set-cookie",
                  "value": "sails.sid=s%3A55y5Ll7HpTzt_hKuw6N54k4N04ilmMdn.uCPCHttP5DmI%2BdBw2I9NZL55lFFOzz4XxS4qAHv47gI; Path=/; HttpOnly"
                },
                {
                  "name": "transfer-encoding",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "transfer-encoding",
                  "value": "chunked"
                }
              ],
              "body": "{\"id\":\"0c42230c-c8e4-4ca0-a4aa-d393971de8b8\",\"name\":\"Sample Postman Collection\",\"description\":\"A sample collection to demonstrate collections as a set of related requests\",\"order\":[\"3d04ed83-dc1e-40ec-923c-16aa92509e50\",\"e02f8160-fb41-4633-be80-cc7d701e85b4\",\"77bd6d4d-1060-4927-aa5c-dcdba7f750cf\"],\"folders\":[],\"requests\":[{\"id\":\"3d04ed83-dc1e-40ec-923c-16aa92509e50\",\"name\":\"A simple GET request\",\"collectionId\":\"1dd68aff-a3fa-4f52-904f-5b75053bc9d9\",\"method\":\"GET\",\"headers\":\"\",\"data\":[],\"rawModeData\":\"\",\"tests\":\"tests['response code is 200'] = (responseCode.code === 200);\",\"preRequestScript\":\"\",\"url\":\"https://postman-echo.com/get?source=newman-sample-github-collection\"},{\"id\":\"e02f8160-fb41-4633-be80-cc7d701e85b4\",\"name\":\"A simple POST request\",\"collectionId\":\"1dd68aff-a3fa-4f52-904f-5b75053bc9d9\",\"method\":\"POST\",\"headers\":\"Content-Type: text/plain\",\"dataMode\":\"raw\",\"data\":[],\"rawModeData\":\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\",\"url\":\"https://postman-echo.com/post\"},{\"id\":\"77bd6d4d-1060-4927-aa5c-dcdba7f750cf\",\"name\":\"A simple POST request with JSON body\",\"collectionId\":\"1dd68aff-a3fa-4f52-904f-5b75053bc9d9\",\"method\":\"POST\",\"headers\":\"Content-Type: application/json\",\"dataMode\":\"raw\",\"data\":[],\"rawModeData\":\"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\",\"url\":\"https://postman-echo.com/post\"}]}",
              "cookie": [
                {
                  "name": "sails.sid",
                  "expires": null,
                  "domain": "postman-echo.com",
                  "path": "/",
                  "secure": false,
                  "httpOnly": true,
                  "value": "s%3A55y5Ll7HpTzt_hKuw6N54k4N04ilmMdn.uCPCHttP5DmI%2BdBw2I9NZL55lFFOzz4XxS4qAHv47gI"
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7189cb58-d2bc-4430-91ed-4bf807ad54d6",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response has almost valid items\", function () {",
                  "    pm.response.to.have.jsonBody('folders', [])",
                  "        .and.to.have.jsonBody('order')",
                  "        .and.to.have.jsonBody('requests[0].name', 'A simple GET request')",
                  "        .and.to.have.jsonBody('requests[1].name', 'A simple POST request');",
                  "});"
                ],
                "_lastExecutionId": "8aa41d4a-fc9e-4df3-a94a-1c7d64de650c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "transform",
              "collection"
            ],
            "host": [
              "postman-echo",
              "com"
            ],
            "query": [
              {
                "key": "from",
                "value": "2"
              },
              {
                "key": "to",
                "value": "1"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.26.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "eefbb3ed-f692-4788-bea8-6cc74418eebd",
              "system": true
            },
            {
              "key": "Host",
              "value": "postman-echo.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": 789,
              "system": true
            },
            {
              "key": "Cookie",
              "value": "sails.sid=s%3Aikj0j30V-ladk6oY-a6GqSsCUcAagCxG.4P5m5%2BHExcCeDx96YLMYMsfNwna1xq3gPaE2%2BbuYVzo",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"info\": {\n    \"name\": \"Sample Postman Collection\",\n    \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\",\n    \"description\": \"A sample collection to demonstrate collections as a set of related requests\"\n  },\n\n  \"item\": [{\n    \"name\": \"A simple GET request\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\",\n      \"method\": \"GET\"\n    }\n  }, {\n    \"name\": \"A simple POST request\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/post\",\n      \"method\": \"POST\",\n      \"header\": [{\n        \"key\": \"Content-Type\",\n        \"value\": \"text/plain\"\n      }],\n      \"body\": {\n        \"mode\": \"raw\",\n        \"raw\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\"\n      }\n    }\n  }]\n}"
          }
        },
        "response": {
          "id": "a9b4f135-1a86-4c93-9efb-15427f4296e9",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Fri, 12 Jun 2020 13:15:50 GMT"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3AmtnYTIxy5llzB0Z7JqMwVWuIgw-fIzbs.3cW2eIpvycodB97L%2FK6Yb9tVsttfDXja%2BZiFP7U0H5U; Path=/; HttpOnly"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 129,
          "responseSize": 0
        },
        "id": "4657083a-08fe-4d58-850e-cd4a2cf7baee",
        "assertions": [
          {
            "assertion": "response is ok",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "response is ok",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response has almost valid items",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response has almost valid items",
              "message": "expected undefined in response to contain property 'folders'",
              "stack": "AssertionError: expected undefined in response to contain property 'folders'\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "8491740a-998d-40a1-bdf0-4f95cac48954",
          "length": 37,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "52bd30f7-2e6e-4eb9-9c14-ade1cfb097a5"
        },
        "item": {
          "_": {
            "postman_id": "dd5e65ed-b444-48ed-952d-2c584324d01c"
          },
          "id": "dd5e65ed-b444-48ed-952d-2c584324d01c",
          "name": "DigestAuth Request",
          "request": {
            "description": {
              "content": "Performing a simple `GET` request to this endpoint returns status code `401 Unauthorized` with `WWW-Authenticate` header containing information to successfully authenticate subsequent requests.\nThe `WWW-Authenticate` header must be processed to extract `realm` and `nonce` values to hash subsequent requests.\n\nWhen this request is executed within Postman, the script attached with this request does the hard work of extracting realm and nonce from the header and set it as [global variables](https://www.getpostman.com/docs/environments#global-variables?source=echo-collection-app-onboarding) named `echo_digest_nonce` and `echo_digest_realm`.\nThese variables are re-used in subsequent request for seamless integration of the two requests.",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "digest-auth"
              ],
              "host": [
                "postman-echo",
                "com"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b33bf1dc-b4e6-4047-87a7-d09d3a5ec078",
                "type": "text/javascript",
                "exec": [
                  "tests[\"response code is 401\"] = responseCode.code === 401;",
                  "tests[\"response has WWW-Authenticate header\"] = (postman.getResponseHeader('WWW-Authenticate'));",
                  "",
                  "var authenticateHeader = postman.getResponseHeader('WWW-Authenticate'),",
                  "    realmStart = authenticateHeader.indexOf('\"',authenticateHeader.indexOf(\"realm\")) + 1 ,",
                  "    realmEnd = authenticateHeader.indexOf('\"',realmStart),",
                  "    realm = authenticateHeader.slice(realmStart,realmEnd),",
                  "    nonceStart = authenticateHeader.indexOf('\"',authenticateHeader.indexOf(\"nonce\")) + 1,",
                  "    nonceEnd = authenticateHeader.indexOf('\"',nonceStart),",
                  "    nonce = authenticateHeader.slice(nonceStart,nonceEnd);",
                  "    ",
                  "postman.setGlobalVariable('echo_digest_realm', realm);",
                  "postman.setGlobalVariable('echo_digest_nonce', nonce);"
                ],
                "_lastExecutionId": "78a55cd9-31d2-4d25-888d-3b11e413cee6"
              }
            }
          ]
        },
        "request": {
          "description": {
            "content": "Performing a simple `GET` request to this endpoint returns status code `401 Unauthorized` with `WWW-Authenticate` header containing information to successfully authenticate subsequent requests.\nThe `WWW-Authenticate` header must be processed to extract `realm` and `nonce` values to hash subsequent requests.\n\nWhen this request is executed within Postman, the script attached with this request does the hard work of extracting realm and nonce from the header and set it as [global variables](https://www.getpostman.com/docs/environments#global-variables?source=echo-collection-app-onboarding) named `echo_digest_nonce` and `echo_digest_realm`.\nThese variables are re-used in subsequent request for seamless integration of the two requests.",
            "type": "text/plain"
          },
          "url": {
            "protocol": "https",
            "path": [
              "digest-auth"
            ],
            "host": [
              "postman-echo",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.26.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "2316db6f-ab6a-4a29-88c1-aa2be58ba273",
              "system": true
            },
            {
              "key": "Host",
              "value": "postman-echo.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Cookie",
              "value": "sails.sid=s%3AmtnYTIxy5llzB0Z7JqMwVWuIgw-fIzbs.3cW2eIpvycodB97L%2FK6Yb9tVsttfDXja%2BZiFP7U0H5U",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "bfb28c31-dfff-4716-948e-65c122595b17",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Date",
              "value": "Fri, 12 Jun 2020 13:15:50 GMT"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "WWW-Authenticate",
              "value": "Digest realm=\"Users\", nonce=\"41JrDmUKoiXDEJWLX7G3WwhmceVZRNuk\", qop=\"auth\""
            },
            {
              "key": "set-cookie",
              "value": "sails.sid=s%3ABsAo1fe6yGPZEvKBoiY0nzuftxxPvNxO.lN%2FcrvP8vcRbJUhQX7EHR93eXRv8iFBLfDW%2BBJtmwgs; Path=/; HttpOnly"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              85,
              110,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              101,
              100
            ]
          },
          "cookie": [],
          "responseTime": 121,
          "responseSize": 12
        },
        "id": "dd5e65ed-b444-48ed-952d-2c584324d01c",
        "assertions": [
          {
            "assertion": "response code is 401",
            "skipped": false
          },
          {
            "assertion": "response has WWW-Authenticate header",
            "skipped": false
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 24008
    },
    "failures": [
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "response body has json saying passed 'status'",
          "message": "expected { Object (message) } in response to contain property 'status'",
          "stack": "AssertionError: expected { Object (message) } in response to contain property 'status'\n   at Object.eval sandbox-script.js:2:11)",
          "checksum": "e50c91af50f556c238d6c09b158dc2ac",
          "id": "559d1526-0aa3-4b34-84a6-36604462b173",
          "timestamp": 1591967744493,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "_": {
            "postman_id": "baae227c-4680-4b7c-ac96-2d3accaf2b26"
          },
          "id": "baae227c-4680-4b7c-ac96-2d3accaf2b26",
          "name": "Hawk Auth",
          "request": {
            "description": {
              "content": "This endpoint is a Hawk Authentication protected endpoint. [Hawk authentication](https://github.com/hueniverse/hawk) is a widely used protocol for protecting API endpoints. One of Hawk's main goals is to enable HTTP authentication for services that do not use TLS (although it can be used in conjunction with TLS as well).\n\nIn order to use this endpoint, select the \"Hawk Auth\" helper inside Postman, and set the following values:\n\nHawk Auth ID: `dh37fgj492je`\n\nHawk Auth Key: `werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn`\n\nAlgorithm: `sha256`\n\nThe rest of the values are optional, and can be left blank. Hitting send should give you a response with a status code of 200 OK.",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "auth",
                "hawk"
              ],
              "host": [
                "postman-echo",
                "com"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "hawk",
              "hawk": [
                {
                  "type": "any",
                  "value": "dh37fgj492je",
                  "key": "authId"
                },
                {
                  "type": "any",
                  "value": "werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn",
                  "key": "authKey"
                },
                {
                  "type": "any",
                  "value": "sha256",
                  "key": "algorithm"
                },
                {
                  "type": "any",
                  "value": "",
                  "key": "user"
                },
                {
                  "type": "any",
                  "value": "RZKGNz",
                  "key": "nonce"
                },
                {
                  "type": "any",
                  "value": "",
                  "key": "timestamp"
                }
              ]
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "javascript"
              },
              "id": "43c98c7a-dfc9-42df-a3da-9c34f997219d",
              "name": "Success",
              "originalRequest": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "auth",
                    "hawk"
                  ],
                  "host": [
                    "echo",
                    "getpostman",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "name": "Authorization",
                    "key": "Authorization",
                    "value": "Hawk id=\"dh37fgj492je\", ts=\"1459422734\", nonce=\"XiwiCU\", mac=\"KzMHk67BYCC9zZqRy5hRdWFEFLHX5bNlRWGdmOAWKp0=\""
                  }
                ],
                "method": "GET"
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "name": "Access-Control-Allow-Credentials",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Credentials",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Headers",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Methods",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Methods",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Origin",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Origin",
                  "value": ""
                },
                {
                  "name": "Connection",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "name": "Content-Encoding",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Encoding",
                  "value": "gzip"
                },
                {
                  "name": "Content-Type",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "name": "Date",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Date",
                  "value": "Thu, 31 Mar 2016 11:12:16 GMT"
                },
                {
                  "name": "Server",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Server",
                  "value": "nginx/1.6.2"
                },
                {
                  "name": "Server-Authorization",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Server-Authorization",
                  "value": "Hawk mac=\"vRrUzDdcHu2NaNts/r4zg2xmXMdX8wPiTGTM398BDRg=\", hash=\"qmtflETMybaZiOQ2dLT17yiRunFT5OCIxZRZ0boQaiE=\""
                },
                {
                  "name": "Vary",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Vary",
                  "value": "Accept-Encoding"
                },
                {
                  "name": "X-Powered-By",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "X-Powered-By",
                  "value": "Sails <sailsjs.org>"
                },
                {
                  "name": "transfer-encoding",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "transfer-encoding",
                  "value": "chunked"
                }
              ],
              "body": "{\"status\":\"pass\",\"message\":\"Hawk Authentication successful\"}",
              "cookie": [
                {
                  "name": "getpostmanlogin",
                  "expires": null,
                  "domain": ".getpostman.com",
                  "path": "/",
                  "secure": false,
                  "httpOnly": false,
                  "hostOnly": false,
                  "session": false,
                  "value": "yes"
                },
                {
                  "name": "postman.sid",
                  "expires": null,
                  "domain": ".getpostman.com",
                  "path": "/",
                  "secure": false,
                  "httpOnly": false,
                  "hostOnly": false,
                  "session": false,
                  "value": "9f887f3b7f14b8c29ac4dc4109381b0b89a76e785c7b34251d6c8025b41b24013d2aa49f40e2deac19cbf0594dd984169455534d91ff98d4d1868d67ac857017629f137926e3a04a616bb83a2fb5ab9e6cbea9579ed5d5c1155d47545d72aad5be99f4abd0a7130805b3807d70cd507171dbe9d950d8e35a853f9ec075f5a767c95df4d57f7d521b66605b3bda3801700e26e651d1129c798b729ee3b91702d43ae64ab226c3f426893753def772c15442a7552dc84a3c773d6099a50b0a6af940b64c8176fedfcecd5fc31ccfc3bbc0124bfdaa0d62e4252d4aafb46a3c10963d12391e1fa97a1c0f19a636f57a3ac8cc35567d1cb6cb53b77f8adde3f6754a765596d7d00bdeb9acb5cc8d115e7c3f50ec3228e34d3e6c7464e9039b01868e03d10e9f87772397602453e9e91205de7b86021fad06eb26e69298e99ff1597a670faeb310f8c092041d544851de84f2bee89a92123da6eea286210524035c85361e2af42166a6"
                },
                {
                  "name": "sails.sid",
                  "expires": null,
                  "domain": "echo.getpostman.com",
                  "path": "/",
                  "secure": false,
                  "httpOnly": true,
                  "hostOnly": true,
                  "session": true,
                  "value": "s%3AryJV7v-PE4PuTjBK6nH5XOynQ4atuATV.n17KcaLhVmV8TBHNLwdwXgGR7lmqs3i478WPlTbRgZ4"
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2aefec67-b23b-47b5-95c7-2afca45c32b7",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response body has json saying passed 'status'\", function () {",
                  "    pm.response.to.have.jsonBody('status', 'pass');",
                  "});"
                ],
                "_lastExecutionId": "471ccfaa-73bf-4b3c-90f3-078114fa46e3"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "e6e48cc4-7376-4f0b-b95a-ac77547f3c5d"
          },
          "id": "e6e48cc4-7376-4f0b-b95a-ac77547f3c5d",
          "name": "Authentication Methods",
          "item": [
            {
              "_": {
                "postman_id": "64b7a2c6-7f3e-4ddd-b5ce-e9ee1c4b3dfe"
              },
              "id": "64b7a2c6-7f3e-4ddd-b5ce-e9ee1c4b3dfe",
              "name": "Basic Auth",
              "request": {
                "description": {
                  "content": "This endpoint simulates a **basic-auth** protected endpoint. \nThe endpoint accepts a default username and password and returns a status code of `200 ok` only if the same is provided. \nOtherwise it will return a status code `401 unauthorized`.\n\n> Username: `postman`\n> \n> Password: `password`\n\nTo use this endpoint, send a request with the header `Authorization: Basic cG9zdG1hbjpwYXNzd29yZA==`. \nThe cryptic latter half of the header value is a base64 encoded concatenation of the default username and password. \nUsing Postman, to send this request, you can simply fill in the username and password in the \"Authorization\" tab and Postman will do the rest for you.\n\nTo know more about basic authentication, refer to the [Basic Access Authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) wikipedia article.\nThe article on [authentication helpers](https://www.getpostman.com/docs/helpers#basic-auth?source=echo-collection-app-onboarding) elaborates how to use the same within the Postman app.",
                  "type": "text/plain"
                },
                "url": {
                  "protocol": "https",
                  "path": [
                    "basic-auth"
                  ],
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "basic",
                  "basic": [
                    {
                      "type": "any",
                      "value": "postman",
                      "key": "username"
                    },
                    {
                      "type": "any",
                      "value": "password",
                      "key": "password"
                    },
                    {
                      "type": "any",
                      "value": false,
                      "key": "showPassword"
                    }
                  ]
                }
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "javascript"
                  },
                  "id": "e8ed109c-f7f7-44d8-8c54-ceb0c2ed67af",
                  "name": "200",
                  "originalRequest": {
                    "url": {
                      "query": [],
                      "variable": []
                    },
                    "method": "GET"
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "name": "Access-Control-Allow-Credentials",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Credentials",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Headers",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Methods",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Methods",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Origin",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Origin",
                      "value": ""
                    },
                    {
                      "name": "Connection",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "name": "Content-Encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Encoding",
                      "value": "gzip"
                    },
                    {
                      "name": "Content-Length",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Length",
                      "value": "42"
                    },
                    {
                      "name": "Content-Type",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "name": "Date",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Date",
                      "value": "Sat, 31 Oct 2015 06:38:25 GMT"
                    },
                    {
                      "name": "Server",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server",
                      "value": "nginx/1.6.2"
                    },
                    {
                      "name": "Vary",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Vary",
                      "value": "Accept-Encoding"
                    },
                    {
                      "name": "X-Powered-By",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "X-Powered-By",
                      "value": "Sails <sailsjs.org>"
                    }
                  ],
                  "body": "{\"authenticated\":true}",
                  "cookie": []
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c8e84bc1-7205-4883-bafc-7754ee41efec",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response body has json saying 'authenticated'\", function () {",
                      "    pm.response.to.have.jsonBody('authenticated', true);",
                      "});"
                    ],
                    "_lastExecutionId": "38cf21c7-f996-400f-8a8d-4bbdca4c38a0"
                  }
                }
              ]
            },
            {
              "_": {
                "postman_id": "3702b6e0-4a65-44be-91d9-0bed03dea66a"
              },
              "id": "3702b6e0-4a65-44be-91d9-0bed03dea66a",
              "name": "DigestAuth Success",
              "request": {
                "description": {
                  "content": "This endpoint sends a hashed Digest Authorization header to gain access to a valid `200 Ok` response code. In Postman, it uses the stored [global variables](https://www.getpostman.com/docs/environments#gloval-variables?source=echo-collection-app-onboarding), `echo_digest_realm` and `echo_digest_nonce`, to generate the hashed authorisation header.\n\nWithin Postman, for this request to successfully authenticate, running the previous request \"DigestAuth Request\" stores the relevant information within the global variables.",
                  "type": "text/plain"
                },
                "url": {
                  "protocol": "https",
                  "path": [
                    "digest-auth"
                  ],
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Digest username=\"postman\", realm=\"Users\", nonce=\"ni1LiL0O37PRRhofWdCLmwFsnEtH1lew\", uri=\"/digest-auth\", response=\"254679099562cf07df9b6f5d8d15db44\", opaque=\"\""
                  }
                ],
                "method": "GET",
                "auth": {
                  "type": "digest",
                  "digest": [
                    {
                      "type": "any",
                      "value": "MD5",
                      "key": "algorithm"
                    },
                    {
                      "type": "any",
                      "value": "postman",
                      "key": "username"
                    },
                    {
                      "type": "any",
                      "value": "{{echo_digest_realm}}",
                      "key": "realm"
                    },
                    {
                      "type": "any",
                      "value": "password",
                      "key": "password"
                    },
                    {
                      "type": "any",
                      "value": "{{echo_digest_nonce}}",
                      "key": "nonce"
                    },
                    {
                      "type": "any",
                      "value": "",
                      "key": "nonceCount"
                    },
                    {
                      "type": "any",
                      "value": "",
                      "key": "clientNonce"
                    },
                    {
                      "type": "any",
                      "value": "",
                      "key": "opaque"
                    },
                    {
                      "type": "any",
                      "value": "",
                      "key": "qop"
                    }
                  ]
                }
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "javascript"
                  },
                  "id": "97ac9fca-c0aa-4ed1-a87f-f442d4011c3c",
                  "name": "200",
                  "originalRequest": {
                    "url": {
                      "query": [],
                      "variable": []
                    },
                    "method": "GET"
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "name": "Access-Control-Allow-Credentials",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Credentials",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Headers",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Methods",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Methods",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Origin",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Origin",
                      "value": ""
                    },
                    {
                      "name": "Connection",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "name": "Content-Encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Encoding",
                      "value": "gzip"
                    },
                    {
                      "name": "Content-Length",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Length",
                      "value": "42"
                    },
                    {
                      "name": "Content-Type",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "name": "Date",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Date",
                      "value": "Thu, 29 Oct 2015 06:17:51 GMT"
                    },
                    {
                      "name": "Server",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server",
                      "value": "nginx/1.6.2"
                    },
                    {
                      "name": "Vary",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Vary",
                      "value": "Accept-Encoding"
                    },
                    {
                      "name": "X-Powered-By",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "X-Powered-By",
                      "value": "Sails <sailsjs.org>"
                    }
                  ],
                  "body": "{\"authenticated\":true}",
                  "cookie": []
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "39dce069-b1a0-4440-8687-214debd8cf75",
                    "type": "text/javascript",
                    "exec": [
                      "tests[\"response code is 200\"] = responseCode.code === 200;",
                      "tests[\"body contains authenticated\"] = responseBody.has(\"authenticated\");"
                    ],
                    "_lastExecutionId": "01580e05-c182-4553-980f-fc770230a351"
                  }
                }
              ]
            },
            {
              "_": {
                "postman_id": "baae227c-4680-4b7c-ac96-2d3accaf2b26"
              },
              "id": "baae227c-4680-4b7c-ac96-2d3accaf2b26",
              "name": "Hawk Auth",
              "request": {
                "description": {
                  "content": "This endpoint is a Hawk Authentication protected endpoint. [Hawk authentication](https://github.com/hueniverse/hawk) is a widely used protocol for protecting API endpoints. One of Hawk's main goals is to enable HTTP authentication for services that do not use TLS (although it can be used in conjunction with TLS as well).\n\nIn order to use this endpoint, select the \"Hawk Auth\" helper inside Postman, and set the following values:\n\nHawk Auth ID: `dh37fgj492je`\n\nHawk Auth Key: `werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn`\n\nAlgorithm: `sha256`\n\nThe rest of the values are optional, and can be left blank. Hitting send should give you a response with a status code of 200 OK.",
                  "type": "text/plain"
                },
                "url": {
                  "protocol": "https",
                  "path": [
                    "auth",
                    "hawk"
                  ],
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "hawk",
                  "hawk": [
                    {
                      "type": "any",
                      "value": "dh37fgj492je",
                      "key": "authId"
                    },
                    {
                      "type": "any",
                      "value": "werxhqb98rpaxn39848xrunpaw3489ruxnpa98w4rxn",
                      "key": "authKey"
                    },
                    {
                      "type": "any",
                      "value": "sha256",
                      "key": "algorithm"
                    },
                    {
                      "type": "any",
                      "value": "",
                      "key": "user"
                    },
                    {
                      "type": "any",
                      "value": "RZKGNz",
                      "key": "nonce"
                    },
                    {
                      "type": "any",
                      "value": "",
                      "key": "timestamp"
                    }
                  ]
                }
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "javascript"
                  },
                  "id": "43c98c7a-dfc9-42df-a3da-9c34f997219d",
                  "name": "Success",
                  "originalRequest": {
                    "url": {
                      "protocol": "https",
                      "path": [
                        "auth",
                        "hawk"
                      ],
                      "host": [
                        "echo",
                        "getpostman",
                        "com"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "name": "Authorization",
                        "key": "Authorization",
                        "value": "Hawk id=\"dh37fgj492je\", ts=\"1459422734\", nonce=\"XiwiCU\", mac=\"KzMHk67BYCC9zZqRy5hRdWFEFLHX5bNlRWGdmOAWKp0=\""
                      }
                    ],
                    "method": "GET"
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "name": "Access-Control-Allow-Credentials",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Credentials",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Headers",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Methods",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Methods",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Origin",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Origin",
                      "value": ""
                    },
                    {
                      "name": "Connection",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "name": "Content-Encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Encoding",
                      "value": "gzip"
                    },
                    {
                      "name": "Content-Type",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "name": "Date",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Date",
                      "value": "Thu, 31 Mar 2016 11:12:16 GMT"
                    },
                    {
                      "name": "Server",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server",
                      "value": "nginx/1.6.2"
                    },
                    {
                      "name": "Server-Authorization",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server-Authorization",
                      "value": "Hawk mac=\"vRrUzDdcHu2NaNts/r4zg2xmXMdX8wPiTGTM398BDRg=\", hash=\"qmtflETMybaZiOQ2dLT17yiRunFT5OCIxZRZ0boQaiE=\""
                    },
                    {
                      "name": "Vary",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Vary",
                      "value": "Accept-Encoding"
                    },
                    {
                      "name": "X-Powered-By",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "X-Powered-By",
                      "value": "Sails <sailsjs.org>"
                    },
                    {
                      "name": "transfer-encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "transfer-encoding",
                      "value": "chunked"
                    }
                  ],
                  "body": "{\"status\":\"pass\",\"message\":\"Hawk Authentication successful\"}",
                  "cookie": [
                    {
                      "name": "getpostmanlogin",
                      "expires": null,
                      "domain": ".getpostman.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": false,
                      "hostOnly": false,
                      "session": false,
                      "value": "yes"
                    },
                    {
                      "name": "postman.sid",
                      "expires": null,
                      "domain": ".getpostman.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": false,
                      "hostOnly": false,
                      "session": false,
                      "value": "9f887f3b7f14b8c29ac4dc4109381b0b89a76e785c7b34251d6c8025b41b24013d2aa49f40e2deac19cbf0594dd984169455534d91ff98d4d1868d67ac857017629f137926e3a04a616bb83a2fb5ab9e6cbea9579ed5d5c1155d47545d72aad5be99f4abd0a7130805b3807d70cd507171dbe9d950d8e35a853f9ec075f5a767c95df4d57f7d521b66605b3bda3801700e26e651d1129c798b729ee3b91702d43ae64ab226c3f426893753def772c15442a7552dc84a3c773d6099a50b0a6af940b64c8176fedfcecd5fc31ccfc3bbc0124bfdaa0d62e4252d4aafb46a3c10963d12391e1fa97a1c0f19a636f57a3ac8cc35567d1cb6cb53b77f8adde3f6754a765596d7d00bdeb9acb5cc8d115e7c3f50ec3228e34d3e6c7464e9039b01868e03d10e9f87772397602453e9e91205de7b86021fad06eb26e69298e99ff1597a670faeb310f8c092041d544851de84f2bee89a92123da6eea286210524035c85361e2af42166a6"
                    },
                    {
                      "name": "sails.sid",
                      "expires": null,
                      "domain": "echo.getpostman.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": true,
                      "hostOnly": true,
                      "session": true,
                      "value": "s%3AryJV7v-PE4PuTjBK6nH5XOynQ4atuATV.n17KcaLhVmV8TBHNLwdwXgGR7lmqs3i478WPlTbRgZ4"
                    }
                  ]
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2aefec67-b23b-47b5-95c7-2afca45c32b7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response body has json saying passed 'status'\", function () {",
                      "    pm.response.to.have.jsonBody('status', 'pass');",
                      "});"
                    ],
                    "_lastExecutionId": "471ccfaa-73bf-4b3c-90f3-078114fa46e3"
                  }
                }
              ]
            },
            {
              "_": {
                "postman_id": "c24dde0c-a7e6-417e-837b-f9b5d930dd8b"
              },
              "id": "c24dde0c-a7e6-417e-837b-f9b5d930dd8b",
              "name": "OAuth1.0 (verify signature)",
              "request": {
                "description": {
                  "content": "OAuth1.0a is a specification that defines a protocol that can be used by one\nservice to access \"protected\" resources (endpoints) on another service. A\nmajor part of OAuth1.0 is HTTP Request Signing. This endpoint allows you to \ncheck whether the request calculation works properly in the client. \n\nThe endpoint supports the HTTP ``Authorization`` header. In case the signature\nverification fails, the endpoint provides the four debug values,\n\n* ``base_uri``\n* ``normalized_param_string``\n* ``base_string``\n* ``signing_key``\n\nFor more details about these parameters, check the [OAuth1.0a Specification](http://oauth.net/core/1.0a/)\n\nIn order to use this endpoint, you can set the following values:\n\n> Consumer Key: ``RKCGzna7bv9YD57c``\n>\n> Consumer Secret: ``D+EdQ-gs$-%@2Nu7``\n\nIf you are using Postman, also check the \"Add params to header\" and \n\"Auto add parameters\" boxes.",
                  "type": "text/plain"
                },
                "url": {
                  "protocol": "https",
                  "path": [
                    "oauth1"
                  ],
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "oauth1",
                  "oauth1": [
                    {
                      "type": "any",
                      "value": "RKCGzna7bv9YD57c",
                      "key": "consumerKey"
                    },
                    {
                      "type": "any",
                      "value": "D+EdQ-gs$-%@2Nu7",
                      "key": "consumerSecret"
                    },
                    {
                      "type": "any",
                      "value": "",
                      "key": "token"
                    },
                    {
                      "type": "any",
                      "value": "",
                      "key": "tokenSecret"
                    },
                    {
                      "type": "any",
                      "value": "HMAC-SHA1",
                      "key": "signatureMethod"
                    },
                    {
                      "type": "any",
                      "value": "",
                      "key": "timestamp"
                    },
                    {
                      "type": "any",
                      "value": "",
                      "key": "nonce"
                    },
                    {
                      "type": "any",
                      "value": "",
                      "key": "version"
                    },
                    {
                      "type": "any",
                      "value": "",
                      "key": "realm"
                    },
                    {
                      "type": "any",
                      "value": true,
                      "key": "addParamsToHeader"
                    },
                    {
                      "type": "any",
                      "value": false,
                      "key": "addEmptyParamsToSign"
                    }
                  ]
                }
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "javascript"
                  },
                  "id": "29828e02-1c2f-4bd9-9b1c-b87bef13daec",
                  "name": "401",
                  "originalRequest": {
                    "url": {
                      "protocol": "https",
                      "path": [
                        "oauth1"
                      ],
                      "host": [
                        "echo",
                        "getpostman",
                        "com"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "name": "Authorization",
                        "key": "Authorization",
                        "value": "OAuth oauth_consumer_key=\"RKCGzna7bv9YD57c_wrong\",oauth_signature_method=\"HMAC-SHA1\",oauth_timestamp=\"1472121295\",oauth_nonce=\"8LTsU2\",oauth_version=\"1.0\",oauth_signature=\"tSUexpY%2B7EhSY7cFXiFN5EMx2zw%3D\""
                      }
                    ],
                    "method": "GET"
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "name": "Access-Control-Allow-Credentials",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Credentials",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Headers",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Methods",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Methods",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Origin",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Origin",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Expose-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Expose-Headers",
                      "value": ""
                    },
                    {
                      "name": "Connection",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "name": "Content-Length",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Length",
                      "value": "536"
                    },
                    {
                      "name": "Content-Type",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "name": "Date",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Date",
                      "value": "Thu, 25 Aug 2016 10:34:55 GMT"
                    },
                    {
                      "name": "ETag",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "ETag",
                      "value": "W/\"218-SGnurnTsu5qV5cCYWxsJlg\""
                    },
                    {
                      "name": "Server",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server",
                      "value": "nginx/1.8.1"
                    },
                    {
                      "name": "Vary",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Vary",
                      "value": "Accept-Encoding"
                    }
                  ],
                  "body": "{\"status\":\"fail\",\"message\":\"HMAC-SHA1 verification failed\",\"base_uri\":\"https://echo.getpostman.com/oauth1\",\"normalized_param_string\":\"oauth_consumer_key=RKCGzna7bv9YD57c_wrong&oauth_nonce=8LTsU2&oauth_signature_method=HMAC-SHA1&oauth_timestamp=1472121295&oauth_version=1.0\",\"base_string\":\"GET&https%3A%2F%2Fecho.getpostman.com%2Foauth1&oauth_consumer_key%3DRKCGzna7bv9YD57c_wrong%26oauth_nonce%3D8LTsU2%26oauth_signature_method%3DHMAC-SHA1%26oauth_timestamp%3D1472121295%26oauth_version%3D1.0\",\"signing_key\":\"D%2BEdQ-gs%24-%25%402Nu7&\"}",
                  "cookie": []
                },
                {
                  "_": {
                    "postman_previewlanguage": "javascript"
                  },
                  "id": "c7bfbbd7-3b6c-4200-9215-bb6ce3b00341",
                  "name": "200",
                  "originalRequest": {
                    "url": {
                      "protocol": "https",
                      "path": [
                        "oauth1"
                      ],
                      "host": [
                        "echo",
                        "getpostman",
                        "com"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "name": "Authorization",
                        "key": "Authorization",
                        "value": "OAuth oauth_consumer_key=\"RKCGzna7bv9YD57c\",oauth_signature_method=\"HMAC-SHA1\",oauth_timestamp=\"1472121261\",oauth_nonce=\"ki0RQW\",oauth_version=\"1.0\",oauth_signature=\"s0rK92Myxx7ceUBVzlMaxiiXU00%3D\""
                      }
                    ],
                    "method": "GET"
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "name": "Access-Control-Allow-Credentials",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Credentials",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Headers",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Methods",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Methods",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Origin",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Origin",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Expose-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Expose-Headers",
                      "value": ""
                    },
                    {
                      "name": "Connection",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "name": "Content-Encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Encoding",
                      "value": "gzip"
                    },
                    {
                      "name": "Content-Length",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Length",
                      "value": "95"
                    },
                    {
                      "name": "Content-Type",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "name": "Date",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Date",
                      "value": "Thu, 25 Aug 2016 10:34:23 GMT"
                    },
                    {
                      "name": "ETag",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "ETag",
                      "value": "W/\"4e-Cq3UhvpVSyl6R6204lPVIA\""
                    },
                    {
                      "name": "Server",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server",
                      "value": "nginx/1.8.1"
                    },
                    {
                      "name": "Vary",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Vary",
                      "value": "Accept-Encoding"
                    }
                  ],
                  "body": "{\"status\":\"pass\",\"message\":\"OAuth-1.0a signature verification was successful\"}",
                  "cookie": []
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "17c097fe-980e-419c-8951-0f95f422f1ec",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response body has json saying passed 'status'\", function () {",
                      "    pm.response.to.have.jsonBody('status', 'pass');",
                      "});"
                    ],
                    "_lastExecutionId": "bf58dedc-13f2-40c5-9f50-4b4a426055e7"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "ref": "ccc30e3b-c17d-4088-a797-a041240e6e1b",
          "length": 37,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "9108dafb-c89a-4f9f-9602-8cdbe3d5da13",
          "scriptId": "2aefec67-b23b-47b5-95c7-2afca45c32b7",
          "execution": "471ccfaa-73bf-4b3c-90f3-078114fa46e3"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "response headers should indicate valid content encoding",
          "message": "expected 'content-type' response header to be 'application/json' but got 'application/json; charset=utf-8'",
          "stack": "AssertionError: expected 'content-type' response header to be 'application/json' but got 'application/json; charset=utf-8'\n   at Object.eval sandbox-script.js:3:20)",
          "checksum": "d58f4b3b303eae73377f3ad108fb0af0",
          "id": "cf562750-c2a5-44be-8b62-5c12ea45a229",
          "timestamp": 1591967748541,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 20,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "_": {
            "postman_id": "d4c90b85-644a-4637-8ff6-683443b3b37c"
          },
          "id": "d4c90b85-644a-4637-8ff6-683443b3b37c",
          "name": "GZip Compressed Response",
          "request": {
            "description": {
              "content": "This endpoint returns the response using [gzip compression algoritm](https://en.wikipedia.org/wiki/Gzip).\nThe uncompressed response is a JSON string containing the details of the request sent by the client. For this endpoint to work, one should request with `Accept-encoding` header containing `gzip` as part of its value. Postman supports gzip, deflate and SDCH decoding and automatically sends them as part of the request.\n\nHTTP Compression allows the server to send responses in a compressed format, which is uncompressed by the client before processing. This reduces network bandwidth consumption at the cost of increase in CPU usage.\nTo know more about this, refer the [HTTP Compression](https://en.wikipedia.org/wiki/HTTP_compression) wikipedia article.",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "gzip"
              ],
              "host": [
                "postman-echo",
                "com"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e1a272b2-6014-4cc4-903d-7051aa2004e3",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response has valid json body\", function () {",
                  "    pm.response.to.have.jsonBody('gzipped', true);",
                  "});",
                  "",
                  "pm.test('response headers should indicate valid content encoding', function  () {",
                  "    pm.response.to.have.header('content-encoding', 'gzip')",
                  "        .and.have.header('content-type', 'application/json');",
                  "});",
                  "",
                  "pm.test('requesting http client should accept compressed response', function () {",
                  "    pm.expect(pm.response.json()).to.have.nested.property('headers.accept-encoding')",
                  "        .and.to.match(/.*gzip.*/);",
                  "});"
                ],
                "_lastExecutionId": "a9256b13-2642-4017-a4d6-26b409a4b491"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "1d98b63b-354a-4372-b41c-73729a57a0b7"
          },
          "id": "1d98b63b-354a-4372-b41c-73729a57a0b7",
          "name": "Utilities",
          "item": [
            {
              "_": {
                "postman_id": "f2f62e92-0f71-4c99-8e85-1d56b2baeb27"
              },
              "id": "f2f62e92-0f71-4c99-8e85-1d56b2baeb27",
              "name": "Response Status Code",
              "request": {
                "description": {
                  "content": "This endpoint allows one to instruct the server which status code to respond with.\n\nEvery response is accompanied by a status code. The status code provides a summary of the nature of response sent by the server. For example, a status code of `200` means everything is okay with the response and a code of `404` implies that the requested URL does not exist on server. \nA list of all valid HTTP status code can be found at the [List of Status Codes](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) wikipedia article. When using Postman, the response status code is described for easy reference.\n\nNote that if an invalid status code is requested to be sent, the server returns a status code of `400 Bad Request`.",
                  "type": "text/plain"
                },
                "url": {
                  "protocol": "https",
                  "path": [
                    "status",
                    "200"
                  ],
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "javascript"
                  },
                  "id": "79471268-5417-450a-ad71-28d08ad8f9f7",
                  "name": "200",
                  "originalRequest": {
                    "url": {
                      "protocol": "https",
                      "path": [
                        "status",
                        "200"
                      ],
                      "host": [
                        "echo",
                        "getpostman",
                        "com"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "GET"
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "name": "Access-Control-Allow-Credentials",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Credentials",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Headers",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Methods",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Methods",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Origin",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Origin",
                      "value": ""
                    },
                    {
                      "name": "Connection",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "name": "Content-Length",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Length",
                      "value": "14"
                    },
                    {
                      "name": "Content-Type",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "name": "Date",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Date",
                      "value": "Thu, 31 Mar 2016 11:58:47 GMT"
                    },
                    {
                      "name": "ETag",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "ETag",
                      "value": "W/\"e-1056260003\""
                    },
                    {
                      "name": "Server",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server",
                      "value": "nginx/1.6.2"
                    },
                    {
                      "name": "Vary",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Vary",
                      "value": "Accept-Encoding"
                    },
                    {
                      "name": "X-Powered-By",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "X-Powered-By",
                      "value": "Sails <sailsjs.org>"
                    }
                  ],
                  "body": "{\"status\":200}",
                  "cookie": [
                    {
                      "name": "getpostmanlogin",
                      "expires": null,
                      "domain": ".getpostman.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": false,
                      "hostOnly": false,
                      "session": false,
                      "value": "yes"
                    },
                    {
                      "name": "postman.sid",
                      "expires": null,
                      "domain": ".getpostman.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": false,
                      "hostOnly": false,
                      "session": false,
                      "value": "df0c0256028d7ec4d641f766104a9571a8e249685bbc667d7cee030bbf44d3209495c70c03248e31e678a93812591d5e12187a8e99bf6bc5e80c40903f6ff6226938f24e413c0ffa613a7372064ec44a8594e8d3ede6945e34394f369573feeebc4a73a3e24b8c9ac18a53704addb5fd3f71f1ede488ff551feb059e9c1fb208164814e45e0312c4df8ea6e83c26702f42ae634c6afbe82d57c857bbf5598b5527961c1c28688dc2580070a4389f0cf4ec0a179b5b9c11b2ecbaa5460d374065bf5c7a3add9505df0fa89acb9f227f05ed2d4c6b58c39d6d728bd49f6f323ae67d4a75882aa7682f5d6fc5b981ba411d94aa93970bfaefa1953a73e440d50d012b5f288975c888e2345ee7777e746fb5aed3a7b2dbc087c6456621aa78c24a3c17c5f96cf59844933249a352f631e2008cffac6faf06d0e253dcc01cf0067bf56c1fbc5ed61fec1861b60c5accf35ffc2e56154a113004fa1db9d7171c3af8fc063918554092f5"
                    },
                    {
                      "name": "_ga",
                      "expires": null,
                      "domain": ".echo.getpostman.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": false,
                      "hostOnly": false,
                      "session": false,
                      "value": "GA1.3.1703443399.1459422978"
                    },
                    {
                      "name": "sails.sid",
                      "expires": null,
                      "domain": "echo.getpostman.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": true,
                      "hostOnly": true,
                      "session": true,
                      "value": "s%3AvuHU0EKeDbyNjVrEc7U30dMPzVu8CRaD.GOV1H9olcVzXqrwqP%2BC%2B6MVj2UczXivcN00jgPoDYfs"
                    }
                  ]
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dd731543-1b42-418c-91ee-08a3c28d37a8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response has valid json body\", function () {",
                      "    pm.response.to.have.jsonBody('status');",
                      "});",
                      "",
                      "// additional sanity tests",
                      "pm.test(\"status in response body must match the one in request\", function () {",
                      "    pm.response.to.have.jsonBody('status', Number(_.get(pm.request, 'url.path[1]')));",
                      "});"
                    ],
                    "_lastExecutionId": "10acb2bb-9be0-4b26-b70e-adba3cf7bd2a"
                  }
                }
              ]
            },
            {
              "_": {
                "postman_id": "45562bc6-8571-48db-adfa-105f1be68a30"
              },
              "id": "45562bc6-8571-48db-adfa-105f1be68a30",
              "name": "Streamed Response",
              "request": {
                "description": {
                  "content": "This endpoint allows one to recieve streaming http response using [chunked transfer encoding](https://en.wikipedia.org/wiki/Chunked_transfer_encoding) of a configurable length.\n\nA streaming response does not wait for the entire response to be generated on server before flushing it out. This implies that for a fairly large response, parts of it can be streamed to the requestee as and when it is generated on server. The client can then take actions of processing this partially received data.",
                  "type": "text/plain"
                },
                "url": {
                  "protocol": "https",
                  "path": [
                    "stream",
                    "5"
                  ],
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2e1210f5-c25a-42e3-8091-e8489054af4e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response has chunked transfer encoding header\", function () {",
                      "    pm.response.to.have.header('transfer-encoding', 'chunked');",
                      "});"
                    ],
                    "_lastExecutionId": "750e9cb5-bbe5-4a35-9589-7833ea666975"
                  }
                }
              ]
            },
            {
              "_": {
                "postman_id": "19ec1bde-bd85-4b3e-9c7c-5fb739f1a267"
              },
              "id": "19ec1bde-bd85-4b3e-9c7c-5fb739f1a267",
              "name": "Delay Response",
              "request": {
                "description": {
                  "content": "Using this endpoint one can configure how long it takes for the server to come back with a response. Appending a number to the URL defines the time (in seconds) the server will wait before responding.\n\nNote that a maximum delay of 10 seconds is accepted by the server.",
                  "type": "text/plain"
                },
                "url": {
                  "protocol": "https",
                  "path": [
                    "delay",
                    "2"
                  ],
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "json"
                  },
                  "id": "25e4abc5-a7e4-4eac-9ffa-4c6d1a21c45e",
                  "name": "success-response",
                  "originalRequest": {
                    "url": {
                      "protocol": "https",
                      "path": [
                        "delay",
                        "3"
                      ],
                      "host": [
                        "echo",
                        "getpostman",
                        "com"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "GET"
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "name": "Access-Control-Allow-Credentials",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Credentials",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Headers",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Methods",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Methods",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Origin",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Origin",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Expose-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Expose-Headers",
                      "value": ""
                    },
                    {
                      "name": "Connection",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "name": "Content-Length",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Length",
                      "value": "13"
                    },
                    {
                      "name": "Content-Type",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "name": "Date",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Date",
                      "value": "Mon, 02 Jan 2017 09:19:03 GMT"
                    },
                    {
                      "name": "ETag",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "ETag",
                      "value": "W/\"d-t/L/D5c0SDl+MoXtKdSVOg\""
                    },
                    {
                      "name": "Server",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server",
                      "value": "nginx/1.10.1"
                    },
                    {
                      "name": "Vary",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Vary",
                      "value": "Accept-Encoding"
                    }
                  ],
                  "body": "{\"delay\":\"3\"}",
                  "cookie": [
                    {
                      "name": "sails.sid",
                      "expires": null,
                      "domain": "echo.getpostman.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": true,
                      "value": "s%3AYjUiFBtGiJVL2a-qzZQZ1DFlAMhgXN9O.WaAjRUV0OteZxwmhbNibuB7VKse068JJIh6PwLQUKmQ"
                    }
                  ]
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4243d71b-c0cb-4af8-9f32-6859a3397506",
                    "type": "text/javascript",
                    "exec": [
                      "var _ = require('lodash');",
                      "",
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response has valid json body\", function () {",
                      "    pm.response.to.have.jsonBody('delay');",
                      "});",
                      "",
                      "// additional sanity tests",
                      "pm.test(\"request must have a valid delay\", function () {",
                      "    pm.expect(Number(_.get(pm.request, 'url.path[1]'))).to.be.above(0).and.below(10);",
                      "});",
                      "pm.test(\"response should take more time than the delay specified\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.above(Number(_.get(pm.request, 'url.path[1]')));",
                      "});"
                    ],
                    "_lastExecutionId": "dedb7e80-5254-4790-b823-c1900b54f147"
                  }
                }
              ]
            },
            {
              "_": {
                "postman_id": "b14cae14-5220-4966-88b7-42d7167b0e82"
              },
              "id": "b14cae14-5220-4966-88b7-42d7167b0e82",
              "name": "Get UTF8 Encoded Response",
              "request": {
                "description": {
                  "content": "If a response of an endpoint requires to send data beyond the basic English / ASCII character set, the `charset` parameter in the `Content-Type` response header defines the character encoding policy.\n\nThis endpoint returns an `UTF8` character encoded response body with text in various languages such as Greek, Latin, East Asian, etc. Postman can interpret the character encoding and use appropriate methods to display the character set in responses.",
                  "type": "text/plain"
                },
                "url": {
                  "protocol": "https",
                  "path": [
                    "encoding",
                    "utf8"
                  ],
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "810dd656-181c-4e5a-9fe7-191d5a1a8e31",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response has charset in content-type header\", function () {",
                      "    pm.response.to.have.header('content-type', 'text/html; charset=utf-8');",
                      "});",
                      "",
                      "pm.test(\"response has chunked transfer encoding header\", function () {",
                      "    pm.response.to.have.header('transfer-encoding', 'chunked');",
                      "});"
                    ],
                    "_lastExecutionId": "25e34363-0b2b-41d3-a0ae-3512bdfca7c5"
                  }
                }
              ]
            },
            {
              "_": {
                "postman_id": "d4c90b85-644a-4637-8ff6-683443b3b37c"
              },
              "id": "d4c90b85-644a-4637-8ff6-683443b3b37c",
              "name": "GZip Compressed Response",
              "request": {
                "description": {
                  "content": "This endpoint returns the response using [gzip compression algoritm](https://en.wikipedia.org/wiki/Gzip).\nThe uncompressed response is a JSON string containing the details of the request sent by the client. For this endpoint to work, one should request with `Accept-encoding` header containing `gzip` as part of its value. Postman supports gzip, deflate and SDCH decoding and automatically sends them as part of the request.\n\nHTTP Compression allows the server to send responses in a compressed format, which is uncompressed by the client before processing. This reduces network bandwidth consumption at the cost of increase in CPU usage.\nTo know more about this, refer the [HTTP Compression](https://en.wikipedia.org/wiki/HTTP_compression) wikipedia article.",
                  "type": "text/plain"
                },
                "url": {
                  "protocol": "https",
                  "path": [
                    "gzip"
                  ],
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e1a272b2-6014-4cc4-903d-7051aa2004e3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response has valid json body\", function () {",
                      "    pm.response.to.have.jsonBody('gzipped', true);",
                      "});",
                      "",
                      "pm.test('response headers should indicate valid content encoding', function  () {",
                      "    pm.response.to.have.header('content-encoding', 'gzip')",
                      "        .and.have.header('content-type', 'application/json');",
                      "});",
                      "",
                      "pm.test('requesting http client should accept compressed response', function () {",
                      "    pm.expect(pm.response.json()).to.have.nested.property('headers.accept-encoding')",
                      "        .and.to.match(/.*gzip.*/);",
                      "});"
                    ],
                    "_lastExecutionId": "a9256b13-2642-4017-a4d6-26b409a4b491"
                  }
                }
              ]
            },
            {
              "_": {
                "postman_id": "1a13c2df-f757-49d5-b37b-6bf6851f0df8"
              },
              "id": "1a13c2df-f757-49d5-b37b-6bf6851f0df8",
              "name": "Deflate Compressed Response",
              "request": {
                "description": {
                  "content": "This endpoint returns the response using [deflate compression algoritm](https://en.wikipedia.org/wiki/DEFLATE). \nThe uncompressed response is a JSON string containing the details of the request sent by the client. For this endpoint to work, one should request with `Accept-encoding` header containing `deflate` as part of its value. Postman supports gzip, deflate and SDCH decoding and automatically sends them as part of the request.\n\nHTTP Compression allows the server to send responses in a compressed format, which is uncompressed by the client before processing. This reduces network bandwidth consumption at the cost of increase in CPU usage.\nTo know more about this, refer the [HTTP Compression](https://en.wikipedia.org/wiki/HTTP_compression) wikipedia article.",
                  "type": "text/plain"
                },
                "url": {
                  "protocol": "https",
                  "path": [
                    "deflate"
                  ],
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "353b437b-66f2-4ce3-8edf-f457f1581772",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response has valid json body\", function () {",
                      "    pm.response.to.have.jsonBody('deflated', true);",
                      "});",
                      "",
                      "pm.test('response headers should indicate valid content encoding', function  () {",
                      "    pm.response.to.have.header('content-encoding', 'deflate')",
                      "        .and.have.header('content-type', 'application/json');",
                      "});",
                      "",
                      "pm.test('requesting http client should accept compressed response', function () {",
                      "    pm.expect(pm.response.json()).to.have.nested.property('headers.accept-encoding')",
                      "        .and.to.match(/.*deflate.*/);",
                      "});"
                    ],
                    "_lastExecutionId": "4660971a-3ff5-44f5-a124-9f5fe105c621"
                  }
                }
              ]
            },
            {
              "_": {
                "postman_id": "9ada0814-d483-4355-978c-d1ba3436f3c3"
              },
              "id": "9ada0814-d483-4355-978c-d1ba3436f3c3",
              "name": "IP address in JSON format",
              "request": {
                "description": {
                  "content": "A simple `GET` request to return the IP address of the source request in the following `JSON` format:\n\n```json\n{\n  ip: \"request-ip-address\"\n}\n```",
                  "type": "text/plain"
                },
                "url": {
                  "protocol": "https",
                  "path": [
                    "ip"
                  ],
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8e24e512-a983-47fd-a07c-b875b18e1774",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response has valid json body\", function () {",
                      "    pm.response.to.have.jsonBody('ip');",
                      "});",
                      "",
                      "pm.test(\"response must return a valid ip address\", function () {",
                      "    pm.expect(pm.response.json().ip).to",
                      "        // a really gnarly regular expression to ensure that ip address is in correct format",
                      "        .match(/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/);",
                      "});"
                    ],
                    "_lastExecutionId": "5213408a-a005-4cc1-a144-56850d047df0"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "ref": "2464a011-d857-406a-957b-5152706e8123",
          "length": 37,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "0700d50f-411b-4dd9-94a3-f50748d35f6a",
          "scriptId": "e1a272b2-6014-4cc4-903d-7051aa2004e3",
          "execution": "a9256b13-2642-4017-a4d6-26b409a4b491"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "response headers should indicate valid content encoding",
          "message": "expected 'content-type' response header to be 'application/json' but got 'application/json; charset=utf-8'",
          "stack": "AssertionError: expected 'content-type' response header to be 'application/json' but got 'application/json; charset=utf-8'\n   at Object.eval sandbox-script.js:3:21)",
          "checksum": "15cb746f27ffc8d12851edb0f467ac40",
          "id": "8a3ce25e-2514-4183-9d22-39f95b0f66e8",
          "timestamp": 1591967748683,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 21,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "_": {
            "postman_id": "1a13c2df-f757-49d5-b37b-6bf6851f0df8"
          },
          "id": "1a13c2df-f757-49d5-b37b-6bf6851f0df8",
          "name": "Deflate Compressed Response",
          "request": {
            "description": {
              "content": "This endpoint returns the response using [deflate compression algoritm](https://en.wikipedia.org/wiki/DEFLATE). \nThe uncompressed response is a JSON string containing the details of the request sent by the client. For this endpoint to work, one should request with `Accept-encoding` header containing `deflate` as part of its value. Postman supports gzip, deflate and SDCH decoding and automatically sends them as part of the request.\n\nHTTP Compression allows the server to send responses in a compressed format, which is uncompressed by the client before processing. This reduces network bandwidth consumption at the cost of increase in CPU usage.\nTo know more about this, refer the [HTTP Compression](https://en.wikipedia.org/wiki/HTTP_compression) wikipedia article.",
              "type": "text/plain"
            },
            "url": {
              "protocol": "https",
              "path": [
                "deflate"
              ],
              "host": [
                "postman-echo",
                "com"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "353b437b-66f2-4ce3-8edf-f457f1581772",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response has valid json body\", function () {",
                  "    pm.response.to.have.jsonBody('deflated', true);",
                  "});",
                  "",
                  "pm.test('response headers should indicate valid content encoding', function  () {",
                  "    pm.response.to.have.header('content-encoding', 'deflate')",
                  "        .and.have.header('content-type', 'application/json');",
                  "});",
                  "",
                  "pm.test('requesting http client should accept compressed response', function () {",
                  "    pm.expect(pm.response.json()).to.have.nested.property('headers.accept-encoding')",
                  "        .and.to.match(/.*deflate.*/);",
                  "});"
                ],
                "_lastExecutionId": "4660971a-3ff5-44f5-a124-9f5fe105c621"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "1d98b63b-354a-4372-b41c-73729a57a0b7"
          },
          "id": "1d98b63b-354a-4372-b41c-73729a57a0b7",
          "name": "Utilities",
          "item": [
            {
              "_": {
                "postman_id": "f2f62e92-0f71-4c99-8e85-1d56b2baeb27"
              },
              "id": "f2f62e92-0f71-4c99-8e85-1d56b2baeb27",
              "name": "Response Status Code",
              "request": {
                "description": {
                  "content": "This endpoint allows one to instruct the server which status code to respond with.\n\nEvery response is accompanied by a status code. The status code provides a summary of the nature of response sent by the server. For example, a status code of `200` means everything is okay with the response and a code of `404` implies that the requested URL does not exist on server. \nA list of all valid HTTP status code can be found at the [List of Status Codes](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) wikipedia article. When using Postman, the response status code is described for easy reference.\n\nNote that if an invalid status code is requested to be sent, the server returns a status code of `400 Bad Request`.",
                  "type": "text/plain"
                },
                "url": {
                  "protocol": "https",
                  "path": [
                    "status",
                    "200"
                  ],
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "javascript"
                  },
                  "id": "79471268-5417-450a-ad71-28d08ad8f9f7",
                  "name": "200",
                  "originalRequest": {
                    "url": {
                      "protocol": "https",
                      "path": [
                        "status",
                        "200"
                      ],
                      "host": [
                        "echo",
                        "getpostman",
                        "com"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "GET"
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "name": "Access-Control-Allow-Credentials",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Credentials",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Headers",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Methods",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Methods",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Origin",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Origin",
                      "value": ""
                    },
                    {
                      "name": "Connection",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "name": "Content-Length",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Length",
                      "value": "14"
                    },
                    {
                      "name": "Content-Type",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "name": "Date",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Date",
                      "value": "Thu, 31 Mar 2016 11:58:47 GMT"
                    },
                    {
                      "name": "ETag",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "ETag",
                      "value": "W/\"e-1056260003\""
                    },
                    {
                      "name": "Server",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server",
                      "value": "nginx/1.6.2"
                    },
                    {
                      "name": "Vary",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Vary",
                      "value": "Accept-Encoding"
                    },
                    {
                      "name": "X-Powered-By",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "X-Powered-By",
                      "value": "Sails <sailsjs.org>"
                    }
                  ],
                  "body": "{\"status\":200}",
                  "cookie": [
                    {
                      "name": "getpostmanlogin",
                      "expires": null,
                      "domain": ".getpostman.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": false,
                      "hostOnly": false,
                      "session": false,
                      "value": "yes"
                    },
                    {
                      "name": "postman.sid",
                      "expires": null,
                      "domain": ".getpostman.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": false,
                      "hostOnly": false,
                      "session": false,
                      "value": "df0c0256028d7ec4d641f766104a9571a8e249685bbc667d7cee030bbf44d3209495c70c03248e31e678a93812591d5e12187a8e99bf6bc5e80c40903f6ff6226938f24e413c0ffa613a7372064ec44a8594e8d3ede6945e34394f369573feeebc4a73a3e24b8c9ac18a53704addb5fd3f71f1ede488ff551feb059e9c1fb208164814e45e0312c4df8ea6e83c26702f42ae634c6afbe82d57c857bbf5598b5527961c1c28688dc2580070a4389f0cf4ec0a179b5b9c11b2ecbaa5460d374065bf5c7a3add9505df0fa89acb9f227f05ed2d4c6b58c39d6d728bd49f6f323ae67d4a75882aa7682f5d6fc5b981ba411d94aa93970bfaefa1953a73e440d50d012b5f288975c888e2345ee7777e746fb5aed3a7b2dbc087c6456621aa78c24a3c17c5f96cf59844933249a352f631e2008cffac6faf06d0e253dcc01cf0067bf56c1fbc5ed61fec1861b60c5accf35ffc2e56154a113004fa1db9d7171c3af8fc063918554092f5"
                    },
                    {
                      "name": "_ga",
                      "expires": null,
                      "domain": ".echo.getpostman.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": false,
                      "hostOnly": false,
                      "session": false,
                      "value": "GA1.3.1703443399.1459422978"
                    },
                    {
                      "name": "sails.sid",
                      "expires": null,
                      "domain": "echo.getpostman.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": true,
                      "hostOnly": true,
                      "session": true,
                      "value": "s%3AvuHU0EKeDbyNjVrEc7U30dMPzVu8CRaD.GOV1H9olcVzXqrwqP%2BC%2B6MVj2UczXivcN00jgPoDYfs"
                    }
                  ]
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dd731543-1b42-418c-91ee-08a3c28d37a8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response has valid json body\", function () {",
                      "    pm.response.to.have.jsonBody('status');",
                      "});",
                      "",
                      "// additional sanity tests",
                      "pm.test(\"status in response body must match the one in request\", function () {",
                      "    pm.response.to.have.jsonBody('status', Number(_.get(pm.request, 'url.path[1]')));",
                      "});"
                    ],
                    "_lastExecutionId": "10acb2bb-9be0-4b26-b70e-adba3cf7bd2a"
                  }
                }
              ]
            },
            {
              "_": {
                "postman_id": "45562bc6-8571-48db-adfa-105f1be68a30"
              },
              "id": "45562bc6-8571-48db-adfa-105f1be68a30",
              "name": "Streamed Response",
              "request": {
                "description": {
                  "content": "This endpoint allows one to recieve streaming http response using [chunked transfer encoding](https://en.wikipedia.org/wiki/Chunked_transfer_encoding) of a configurable length.\n\nA streaming response does not wait for the entire response to be generated on server before flushing it out. This implies that for a fairly large response, parts of it can be streamed to the requestee as and when it is generated on server. The client can then take actions of processing this partially received data.",
                  "type": "text/plain"
                },
                "url": {
                  "protocol": "https",
                  "path": [
                    "stream",
                    "5"
                  ],
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2e1210f5-c25a-42e3-8091-e8489054af4e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response has chunked transfer encoding header\", function () {",
                      "    pm.response.to.have.header('transfer-encoding', 'chunked');",
                      "});"
                    ],
                    "_lastExecutionId": "750e9cb5-bbe5-4a35-9589-7833ea666975"
                  }
                }
              ]
            },
            {
              "_": {
                "postman_id": "19ec1bde-bd85-4b3e-9c7c-5fb739f1a267"
              },
              "id": "19ec1bde-bd85-4b3e-9c7c-5fb739f1a267",
              "name": "Delay Response",
              "request": {
                "description": {
                  "content": "Using this endpoint one can configure how long it takes for the server to come back with a response. Appending a number to the URL defines the time (in seconds) the server will wait before responding.\n\nNote that a maximum delay of 10 seconds is accepted by the server.",
                  "type": "text/plain"
                },
                "url": {
                  "protocol": "https",
                  "path": [
                    "delay",
                    "2"
                  ],
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "json"
                  },
                  "id": "25e4abc5-a7e4-4eac-9ffa-4c6d1a21c45e",
                  "name": "success-response",
                  "originalRequest": {
                    "url": {
                      "protocol": "https",
                      "path": [
                        "delay",
                        "3"
                      ],
                      "host": [
                        "echo",
                        "getpostman",
                        "com"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "GET"
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "name": "Access-Control-Allow-Credentials",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Credentials",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Headers",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Methods",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Methods",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Origin",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Origin",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Expose-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Expose-Headers",
                      "value": ""
                    },
                    {
                      "name": "Connection",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "name": "Content-Length",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Length",
                      "value": "13"
                    },
                    {
                      "name": "Content-Type",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "name": "Date",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Date",
                      "value": "Mon, 02 Jan 2017 09:19:03 GMT"
                    },
                    {
                      "name": "ETag",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "ETag",
                      "value": "W/\"d-t/L/D5c0SDl+MoXtKdSVOg\""
                    },
                    {
                      "name": "Server",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server",
                      "value": "nginx/1.10.1"
                    },
                    {
                      "name": "Vary",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Vary",
                      "value": "Accept-Encoding"
                    }
                  ],
                  "body": "{\"delay\":\"3\"}",
                  "cookie": [
                    {
                      "name": "sails.sid",
                      "expires": null,
                      "domain": "echo.getpostman.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": true,
                      "value": "s%3AYjUiFBtGiJVL2a-qzZQZ1DFlAMhgXN9O.WaAjRUV0OteZxwmhbNibuB7VKse068JJIh6PwLQUKmQ"
                    }
                  ]
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4243d71b-c0cb-4af8-9f32-6859a3397506",
                    "type": "text/javascript",
                    "exec": [
                      "var _ = require('lodash');",
                      "",
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response has valid json body\", function () {",
                      "    pm.response.to.have.jsonBody('delay');",
                      "});",
                      "",
                      "// additional sanity tests",
                      "pm.test(\"request must have a valid delay\", function () {",
                      "    pm.expect(Number(_.get(pm.request, 'url.path[1]'))).to.be.above(0).and.below(10);",
                      "});",
                      "pm.test(\"response should take more time than the delay specified\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.above(Number(_.get(pm.request, 'url.path[1]')));",
                      "});"
                    ],
                    "_lastExecutionId": "dedb7e80-5254-4790-b823-c1900b54f147"
                  }
                }
              ]
            },
            {
              "_": {
                "postman_id": "b14cae14-5220-4966-88b7-42d7167b0e82"
              },
              "id": "b14cae14-5220-4966-88b7-42d7167b0e82",
              "name": "Get UTF8 Encoded Response",
              "request": {
                "description": {
                  "content": "If a response of an endpoint requires to send data beyond the basic English / ASCII character set, the `charset` parameter in the `Content-Type` response header defines the character encoding policy.\n\nThis endpoint returns an `UTF8` character encoded response body with text in various languages such as Greek, Latin, East Asian, etc. Postman can interpret the character encoding and use appropriate methods to display the character set in responses.",
                  "type": "text/plain"
                },
                "url": {
                  "protocol": "https",
                  "path": [
                    "encoding",
                    "utf8"
                  ],
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "810dd656-181c-4e5a-9fe7-191d5a1a8e31",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response has charset in content-type header\", function () {",
                      "    pm.response.to.have.header('content-type', 'text/html; charset=utf-8');",
                      "});",
                      "",
                      "pm.test(\"response has chunked transfer encoding header\", function () {",
                      "    pm.response.to.have.header('transfer-encoding', 'chunked');",
                      "});"
                    ],
                    "_lastExecutionId": "25e34363-0b2b-41d3-a0ae-3512bdfca7c5"
                  }
                }
              ]
            },
            {
              "_": {
                "postman_id": "d4c90b85-644a-4637-8ff6-683443b3b37c"
              },
              "id": "d4c90b85-644a-4637-8ff6-683443b3b37c",
              "name": "GZip Compressed Response",
              "request": {
                "description": {
                  "content": "This endpoint returns the response using [gzip compression algoritm](https://en.wikipedia.org/wiki/Gzip).\nThe uncompressed response is a JSON string containing the details of the request sent by the client. For this endpoint to work, one should request with `Accept-encoding` header containing `gzip` as part of its value. Postman supports gzip, deflate and SDCH decoding and automatically sends them as part of the request.\n\nHTTP Compression allows the server to send responses in a compressed format, which is uncompressed by the client before processing. This reduces network bandwidth consumption at the cost of increase in CPU usage.\nTo know more about this, refer the [HTTP Compression](https://en.wikipedia.org/wiki/HTTP_compression) wikipedia article.",
                  "type": "text/plain"
                },
                "url": {
                  "protocol": "https",
                  "path": [
                    "gzip"
                  ],
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e1a272b2-6014-4cc4-903d-7051aa2004e3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response has valid json body\", function () {",
                      "    pm.response.to.have.jsonBody('gzipped', true);",
                      "});",
                      "",
                      "pm.test('response headers should indicate valid content encoding', function  () {",
                      "    pm.response.to.have.header('content-encoding', 'gzip')",
                      "        .and.have.header('content-type', 'application/json');",
                      "});",
                      "",
                      "pm.test('requesting http client should accept compressed response', function () {",
                      "    pm.expect(pm.response.json()).to.have.nested.property('headers.accept-encoding')",
                      "        .and.to.match(/.*gzip.*/);",
                      "});"
                    ],
                    "_lastExecutionId": "a9256b13-2642-4017-a4d6-26b409a4b491"
                  }
                }
              ]
            },
            {
              "_": {
                "postman_id": "1a13c2df-f757-49d5-b37b-6bf6851f0df8"
              },
              "id": "1a13c2df-f757-49d5-b37b-6bf6851f0df8",
              "name": "Deflate Compressed Response",
              "request": {
                "description": {
                  "content": "This endpoint returns the response using [deflate compression algoritm](https://en.wikipedia.org/wiki/DEFLATE). \nThe uncompressed response is a JSON string containing the details of the request sent by the client. For this endpoint to work, one should request with `Accept-encoding` header containing `deflate` as part of its value. Postman supports gzip, deflate and SDCH decoding and automatically sends them as part of the request.\n\nHTTP Compression allows the server to send responses in a compressed format, which is uncompressed by the client before processing. This reduces network bandwidth consumption at the cost of increase in CPU usage.\nTo know more about this, refer the [HTTP Compression](https://en.wikipedia.org/wiki/HTTP_compression) wikipedia article.",
                  "type": "text/plain"
                },
                "url": {
                  "protocol": "https",
                  "path": [
                    "deflate"
                  ],
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "353b437b-66f2-4ce3-8edf-f457f1581772",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response has valid json body\", function () {",
                      "    pm.response.to.have.jsonBody('deflated', true);",
                      "});",
                      "",
                      "pm.test('response headers should indicate valid content encoding', function  () {",
                      "    pm.response.to.have.header('content-encoding', 'deflate')",
                      "        .and.have.header('content-type', 'application/json');",
                      "});",
                      "",
                      "pm.test('requesting http client should accept compressed response', function () {",
                      "    pm.expect(pm.response.json()).to.have.nested.property('headers.accept-encoding')",
                      "        .and.to.match(/.*deflate.*/);",
                      "});"
                    ],
                    "_lastExecutionId": "4660971a-3ff5-44f5-a124-9f5fe105c621"
                  }
                }
              ]
            },
            {
              "_": {
                "postman_id": "9ada0814-d483-4355-978c-d1ba3436f3c3"
              },
              "id": "9ada0814-d483-4355-978c-d1ba3436f3c3",
              "name": "IP address in JSON format",
              "request": {
                "description": {
                  "content": "A simple `GET` request to return the IP address of the source request in the following `JSON` format:\n\n```json\n{\n  ip: \"request-ip-address\"\n}\n```",
                  "type": "text/plain"
                },
                "url": {
                  "protocol": "https",
                  "path": [
                    "ip"
                  ],
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8e24e512-a983-47fd-a07c-b875b18e1774",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response has valid json body\", function () {",
                      "    pm.response.to.have.jsonBody('ip');",
                      "});",
                      "",
                      "pm.test(\"response must return a valid ip address\", function () {",
                      "    pm.expect(pm.response.json().ip).to",
                      "        // a really gnarly regular expression to ensure that ip address is in correct format",
                      "        .match(/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/);",
                      "});"
                    ],
                    "_lastExecutionId": "5213408a-a005-4cc1-a144-56850d047df0"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "ref": "5d160689-5461-498f-8dce-2d91af886e9d",
          "length": 37,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "d4826307-73be-4f85-9c42-a9f1bcf31f05",
          "scriptId": "353b437b-66f2-4ce3-8edf-f457f1581772",
          "execution": "4660971a-3ff5-44f5-a124-9f5fe105c621"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "response is ok",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:35)",
          "checksum": "c281763398ddfb4f781935e05692edd0",
          "id": "9cf90082-17de-494e-b21a-de9265e50a3e",
          "timestamp": 1591967750658,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 35,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "_": {
            "postman_id": "e299a4a4-5574-4f05-9581-2ef60f545732"
          },
          "id": "e299a4a4-5574-4f05-9581-2ef60f545732",
          "name": "Transform collection from format v1 to v2",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "transform",
                "collection"
              ],
              "host": [
                "postman-echo",
                "com"
              ],
              "query": [
                {
                  "key": "from",
                  "value": "1"
                },
                {
                  "key": "to",
                  "value": "2"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"id\": \"7875be4b-917d-4aff-8cc4-5606c36bf418\",\n  \"name\": \"Sample Postman Collection\",\n  \"description\": \"A sample collection to demonstrate collections as a set of related requests\",\n  \"order\": [\n    \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n    \"141ba274-cc50-4377-a59c-e080066f375e\"\n  ],\n  \"folders\": [],\n  \"requests\": [\n    {\n      \"id\": \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n      \"name\": \"A simple GET request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"GET\",\n      \"headers\": \"\",\n      \"data\": [],\n      \"rawModeData\": \"\",\n      \"tests\": \"tests['response code is 200'] = (responseCode.code === 200);\",\n      \"preRequestScript\": \"\",\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\"\n    },\n    {\n      \"id\": \"141ba274-cc50-4377-a59c-e080066f375e\",\n      \"name\": \"A simple POST request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"POST\",\n      \"headers\": \"Content-Type: text/plain\",\n      \"dataMode\": \"raw\",\n      \"data\": [],\n      \"rawModeData\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\",\n      \"url\": \"https://postman-echo.com/post\"\n    }\n  ]\n}"
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "79270673-03ed-4fa2-abc5-80b405f5d662",
              "name": "Sample v2 Response",
              "originalRequest": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "transform",
                    "collection"
                  ],
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "query": [
                    {
                      "key": "from",
                      "value": "1"
                    },
                    {
                      "key": "to",
                      "value": "2"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "The mime type of this content",
                      "type": "text/plain"
                    },
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"id\": \"7875be4b-917d-4aff-8cc4-5606c36bf418\",\n  \"name\": \"Sample Postman Collection\",\n  \"description\": \"A sample collection to demonstrate collections as a set of related requests\",\n  \"order\": [\n    \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n    \"141ba274-cc50-4377-a59c-e080066f375e\",\n    \"4511ca8b-0bc7-430f-b894-a7ec1036f322\"\n  ],\n  \"folders\": [],\n  \"requests\": [\n    {\n      \"id\": \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n      \"name\": \"A simple GET request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"GET\",\n      \"headers\": \"\",\n      \"data\": [],\n      \"rawModeData\": \"\",\n      \"tests\": \"tests['response code is 200'] = (responseCode.code === 200);\",\n      \"preRequestScript\": \"\",\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\"\n    },\n    {\n      \"id\": \"141ba274-cc50-4377-a59c-e080066f375e\",\n      \"name\": \"A simple POST request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"POST\",\n      \"headers\": \"Content-Type: text/plain\",\n      \"dataMode\": \"raw\",\n      \"data\": [],\n      \"rawModeData\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\",\n      \"url\": \"https://postman-echo.com/post\"\n    },\n    {\n      \"id\": \"4511ca8b-0bc7-430f-b894-a7ec1036f322\",\n      \"name\": \"A simple POST request with JSON body\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"POST\",\n      \"headers\": \"Content-Type: application/json\",\n      \"dataMode\": \"raw\",\n      \"data\": [],\n      \"rawModeData\": \"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\",\n      \"url\": \"https://postman-echo.com/post\"\n    }\n  ]\n}"
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "name": "Access-Control-Allow-Credentials",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Credentials",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Headers",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Methods",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Methods",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Origin",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Origin",
                  "value": ""
                },
                {
                  "name": "Access-Control-Expose-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Expose-Headers",
                  "value": ""
                },
                {
                  "name": "Connection",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "name": "Content-Encoding",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Encoding",
                  "value": "gzip"
                },
                {
                  "name": "Content-Type",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "name": "Date",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Date",
                  "value": "Wed, 11 Jan 2017 10:41:32 GMT"
                },
                {
                  "name": "ETag",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "ETag",
                  "value": "W/\"4cc-7P727Clhlrl9+b1/vneniw\""
                },
                {
                  "name": "Server",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Server",
                  "value": "nginx/1.10.1"
                },
                {
                  "name": "Vary",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Vary",
                  "value": "X-HTTP-Method-Override, Accept-Encoding"
                },
                {
                  "name": "set-cookie",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "set-cookie",
                  "value": "sails.sid=s%3AHtnQ1hlPxoj7wZahoNkcjN-aw9nQL0fc.KSyfLbEKhv1Lt3LvH13Ogjv9ENZgsBBSM6V8Y7TqVOU; Path=/; HttpOnly"
                },
                {
                  "name": "transfer-encoding",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "transfer-encoding",
                  "value": "chunked"
                }
              ],
              "body": "{\"variables\":[],\"info\":{\"name\":\"Sample Postman Collection\",\"_postman_id\":\"7875be4b-917d-4aff-8cc4-5606c36bf418\",\"description\":\"A sample collection to demonstrate collections as a set of related requests\",\"schema\":\"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\"},\"item\":[{\"name\":\"A simple GET request\",\"event\":[{\"listen\":\"test\",\"script\":{\"type\":\"text/javascript\",\"exec\":[\"tests['response code is 200'] = (responseCode.code === 200);\"]}}],\"request\":{\"url\":\"https://postman-echo.com/get?source=newman-sample-github-collection\",\"method\":\"GET\",\"header\":[],\"body\":{\"mode\":\"raw\",\"raw\":\"\"}},\"response\":[]},{\"name\":\"A simple POST request\",\"request\":{\"url\":\"https://postman-echo.com/post\",\"method\":\"POST\",\"header\":[{\"key\":\"Content-Type\",\"value\":\"text/plain\",\"description\":\"\"}],\"body\":{\"mode\":\"raw\",\"raw\":\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\"}},\"response\":[]},{\"name\":\"A simple POST request with JSON body\",\"request\":{\"url\":\"https://postman-echo.com/post\",\"method\":\"POST\",\"header\":[{\"key\":\"Content-Type\",\"value\":\"application/json\",\"description\":\"\"}],\"body\":{\"mode\":\"raw\",\"raw\":\"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\"}},\"response\":[]}]}",
              "cookie": [
                {
                  "name": "sails.sid",
                  "expires": null,
                  "domain": "postman-echo.com",
                  "path": "/",
                  "secure": false,
                  "httpOnly": true,
                  "value": "s%3AHtnQ1hlPxoj7wZahoNkcjN-aw9nQL0fc.KSyfLbEKhv1Lt3LvH13Ogjv9ENZgsBBSM6V8Y7TqVOU"
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e74cf076-42a5-48a1-b283-822ab6a76189",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response has almost valid items\", function () {",
                  "    pm.response.to.have.jsonBody('info.schema', 'https://schema.getpostman.com/json/collection/v2.0.0/collection.json')",
                  "        .and.to.have.jsonBody('item[0].name', 'A simple GET request')",
                  "        .and.to.have.jsonBody('item[1].name', 'A simple POST request');",
                  "});"
                ],
                "_lastExecutionId": "133ae8d6-0dce-44be-aa69-7f5bdfde9fc2"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "6513eb24-d61a-4bd1-9d50-8583ec230f2d"
          },
          "id": "6513eb24-d61a-4bd1-9d50-8583ec230f2d",
          "name": "Utilities / Postman Collection",
          "item": [
            {
              "_": {
                "postman_id": "e299a4a4-5574-4f05-9581-2ef60f545732"
              },
              "id": "e299a4a4-5574-4f05-9581-2ef60f545732",
              "name": "Transform collection from format v1 to v2",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "transform",
                    "collection"
                  ],
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "query": [
                    {
                      "key": "from",
                      "value": "1"
                    },
                    {
                      "key": "to",
                      "value": "2"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"id\": \"7875be4b-917d-4aff-8cc4-5606c36bf418\",\n  \"name\": \"Sample Postman Collection\",\n  \"description\": \"A sample collection to demonstrate collections as a set of related requests\",\n  \"order\": [\n    \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n    \"141ba274-cc50-4377-a59c-e080066f375e\"\n  ],\n  \"folders\": [],\n  \"requests\": [\n    {\n      \"id\": \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n      \"name\": \"A simple GET request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"GET\",\n      \"headers\": \"\",\n      \"data\": [],\n      \"rawModeData\": \"\",\n      \"tests\": \"tests['response code is 200'] = (responseCode.code === 200);\",\n      \"preRequestScript\": \"\",\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\"\n    },\n    {\n      \"id\": \"141ba274-cc50-4377-a59c-e080066f375e\",\n      \"name\": \"A simple POST request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"POST\",\n      \"headers\": \"Content-Type: text/plain\",\n      \"dataMode\": \"raw\",\n      \"data\": [],\n      \"rawModeData\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\",\n      \"url\": \"https://postman-echo.com/post\"\n    }\n  ]\n}"
                }
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "json"
                  },
                  "id": "79270673-03ed-4fa2-abc5-80b405f5d662",
                  "name": "Sample v2 Response",
                  "originalRequest": {
                    "url": {
                      "protocol": "https",
                      "path": [
                        "transform",
                        "collection"
                      ],
                      "host": [
                        "postman-echo",
                        "com"
                      ],
                      "query": [
                        {
                          "key": "from",
                          "value": "1"
                        },
                        {
                          "key": "to",
                          "value": "2"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "The mime type of this content",
                          "type": "text/plain"
                        },
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"id\": \"7875be4b-917d-4aff-8cc4-5606c36bf418\",\n  \"name\": \"Sample Postman Collection\",\n  \"description\": \"A sample collection to demonstrate collections as a set of related requests\",\n  \"order\": [\n    \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n    \"141ba274-cc50-4377-a59c-e080066f375e\",\n    \"4511ca8b-0bc7-430f-b894-a7ec1036f322\"\n  ],\n  \"folders\": [],\n  \"requests\": [\n    {\n      \"id\": \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n      \"name\": \"A simple GET request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"GET\",\n      \"headers\": \"\",\n      \"data\": [],\n      \"rawModeData\": \"\",\n      \"tests\": \"tests['response code is 200'] = (responseCode.code === 200);\",\n      \"preRequestScript\": \"\",\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\"\n    },\n    {\n      \"id\": \"141ba274-cc50-4377-a59c-e080066f375e\",\n      \"name\": \"A simple POST request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"POST\",\n      \"headers\": \"Content-Type: text/plain\",\n      \"dataMode\": \"raw\",\n      \"data\": [],\n      \"rawModeData\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\",\n      \"url\": \"https://postman-echo.com/post\"\n    },\n    {\n      \"id\": \"4511ca8b-0bc7-430f-b894-a7ec1036f322\",\n      \"name\": \"A simple POST request with JSON body\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"POST\",\n      \"headers\": \"Content-Type: application/json\",\n      \"dataMode\": \"raw\",\n      \"data\": [],\n      \"rawModeData\": \"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\",\n      \"url\": \"https://postman-echo.com/post\"\n    }\n  ]\n}"
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "name": "Access-Control-Allow-Credentials",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Credentials",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Headers",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Methods",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Methods",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Origin",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Origin",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Expose-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Expose-Headers",
                      "value": ""
                    },
                    {
                      "name": "Connection",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "name": "Content-Encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Encoding",
                      "value": "gzip"
                    },
                    {
                      "name": "Content-Type",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "name": "Date",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Date",
                      "value": "Wed, 11 Jan 2017 10:41:32 GMT"
                    },
                    {
                      "name": "ETag",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "ETag",
                      "value": "W/\"4cc-7P727Clhlrl9+b1/vneniw\""
                    },
                    {
                      "name": "Server",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server",
                      "value": "nginx/1.10.1"
                    },
                    {
                      "name": "Vary",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Vary",
                      "value": "X-HTTP-Method-Override, Accept-Encoding"
                    },
                    {
                      "name": "set-cookie",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "set-cookie",
                      "value": "sails.sid=s%3AHtnQ1hlPxoj7wZahoNkcjN-aw9nQL0fc.KSyfLbEKhv1Lt3LvH13Ogjv9ENZgsBBSM6V8Y7TqVOU; Path=/; HttpOnly"
                    },
                    {
                      "name": "transfer-encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "transfer-encoding",
                      "value": "chunked"
                    }
                  ],
                  "body": "{\"variables\":[],\"info\":{\"name\":\"Sample Postman Collection\",\"_postman_id\":\"7875be4b-917d-4aff-8cc4-5606c36bf418\",\"description\":\"A sample collection to demonstrate collections as a set of related requests\",\"schema\":\"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\"},\"item\":[{\"name\":\"A simple GET request\",\"event\":[{\"listen\":\"test\",\"script\":{\"type\":\"text/javascript\",\"exec\":[\"tests['response code is 200'] = (responseCode.code === 200);\"]}}],\"request\":{\"url\":\"https://postman-echo.com/get?source=newman-sample-github-collection\",\"method\":\"GET\",\"header\":[],\"body\":{\"mode\":\"raw\",\"raw\":\"\"}},\"response\":[]},{\"name\":\"A simple POST request\",\"request\":{\"url\":\"https://postman-echo.com/post\",\"method\":\"POST\",\"header\":[{\"key\":\"Content-Type\",\"value\":\"text/plain\",\"description\":\"\"}],\"body\":{\"mode\":\"raw\",\"raw\":\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\"}},\"response\":[]},{\"name\":\"A simple POST request with JSON body\",\"request\":{\"url\":\"https://postman-echo.com/post\",\"method\":\"POST\",\"header\":[{\"key\":\"Content-Type\",\"value\":\"application/json\",\"description\":\"\"}],\"body\":{\"mode\":\"raw\",\"raw\":\"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\"}},\"response\":[]}]}",
                  "cookie": [
                    {
                      "name": "sails.sid",
                      "expires": null,
                      "domain": "postman-echo.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": true,
                      "value": "s%3AHtnQ1hlPxoj7wZahoNkcjN-aw9nQL0fc.KSyfLbEKhv1Lt3LvH13Ogjv9ENZgsBBSM6V8Y7TqVOU"
                    }
                  ]
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e74cf076-42a5-48a1-b283-822ab6a76189",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response has almost valid items\", function () {",
                      "    pm.response.to.have.jsonBody('info.schema', 'https://schema.getpostman.com/json/collection/v2.0.0/collection.json')",
                      "        .and.to.have.jsonBody('item[0].name', 'A simple GET request')",
                      "        .and.to.have.jsonBody('item[1].name', 'A simple POST request');",
                      "});"
                    ],
                    "_lastExecutionId": "133ae8d6-0dce-44be-aa69-7f5bdfde9fc2"
                  }
                }
              ]
            },
            {
              "_": {
                "postman_id": "4657083a-08fe-4d58-850e-cd4a2cf7baee"
              },
              "id": "4657083a-08fe-4d58-850e-cd4a2cf7baee",
              "name": "Transform collection from format v2 to v1",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "transform",
                    "collection"
                  ],
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "query": [
                    {
                      "key": "from",
                      "value": "2"
                    },
                    {
                      "key": "to",
                      "value": "1"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"info\": {\n    \"name\": \"Sample Postman Collection\",\n    \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\",\n    \"description\": \"A sample collection to demonstrate collections as a set of related requests\"\n  },\n\n  \"item\": [{\n    \"name\": \"A simple GET request\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\",\n      \"method\": \"GET\"\n    }\n  }, {\n    \"name\": \"A simple POST request\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/post\",\n      \"method\": \"POST\",\n      \"header\": [{\n        \"key\": \"Content-Type\",\n        \"value\": \"text/plain\"\n      }],\n      \"body\": {\n        \"mode\": \"raw\",\n        \"raw\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\"\n      }\n    }\n  }]\n}"
                }
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "json"
                  },
                  "id": "aea638eb-dcbf-42dd-9f42-bb62f4267a77",
                  "name": "Sample v1 Response",
                  "originalRequest": {
                    "url": {
                      "protocol": "https",
                      "path": [
                        "transform",
                        "collection"
                      ],
                      "host": [
                        "postman-echo",
                        "com"
                      ],
                      "query": [
                        {
                          "key": "from",
                          "value": "2"
                        },
                        {
                          "key": "to",
                          "value": "1"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "The mime type of this content",
                          "type": "text/plain"
                        },
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"info\": {\n    \"name\": \"Sample Postman Collection\",\n    \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\",\n    \"description\": \"A sample collection to demonstrate collections as a set of related requests\"\n  },\n\n  \"item\": [{\n    \"name\": \"A simple GET request\",\n    \"event\": [{\n      \"listen\": \"test\",\n      \"script\": {\n        \"type\": \"text/javascript\",\n        \"exec\": [\"tests['response code is 200'] = (responseCode.code === 200);\"]\n      }\n    }],\n    \"request\": {\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\",\n      \"method\": \"GET\"\n    }\n  }, {\n    \"name\": \"A simple POST request\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/post\",\n      \"method\": \"POST\",\n      \"header\": [{\n        \"key\": \"Content-Type\",\n        \"value\": \"text/plain\"\n      }],\n      \"body\": {\n        \"mode\": \"raw\",\n        \"raw\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\"\n      }\n    }\n  }, {\n    \"name\": \"A simple POST request with JSON body\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/post\",\n      \"method\": \"POST\",\n      \"header\": [{\n        \"key\": \"Content-Type\",\n        \"value\": \"application/json\"\n      }],\n      \"body\": {\n        \"mode\": \"raw\",\n        \"raw\": \"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\"\n      }\n    }\n  }]\n}"
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "name": "Access-Control-Allow-Credentials",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Credentials",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Headers",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Methods",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Methods",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Origin",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Origin",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Expose-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Expose-Headers",
                      "value": ""
                    },
                    {
                      "name": "Connection",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "name": "Content-Encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Encoding",
                      "value": "gzip"
                    },
                    {
                      "name": "Content-Type",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "name": "Date",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Date",
                      "value": "Wed, 11 Jan 2017 10:38:42 GMT"
                    },
                    {
                      "name": "ETag",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "ETag",
                      "value": "W/\"569-P9uLZEIyoPfMmQ+U0mTO1A\""
                    },
                    {
                      "name": "Server",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server",
                      "value": "nginx/1.10.1"
                    },
                    {
                      "name": "Vary",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Vary",
                      "value": "X-HTTP-Method-Override, Accept-Encoding"
                    },
                    {
                      "name": "set-cookie",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "set-cookie",
                      "value": "sails.sid=s%3A55y5Ll7HpTzt_hKuw6N54k4N04ilmMdn.uCPCHttP5DmI%2BdBw2I9NZL55lFFOzz4XxS4qAHv47gI; Path=/; HttpOnly"
                    },
                    {
                      "name": "transfer-encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "transfer-encoding",
                      "value": "chunked"
                    }
                  ],
                  "body": "{\"id\":\"0c42230c-c8e4-4ca0-a4aa-d393971de8b8\",\"name\":\"Sample Postman Collection\",\"description\":\"A sample collection to demonstrate collections as a set of related requests\",\"order\":[\"3d04ed83-dc1e-40ec-923c-16aa92509e50\",\"e02f8160-fb41-4633-be80-cc7d701e85b4\",\"77bd6d4d-1060-4927-aa5c-dcdba7f750cf\"],\"folders\":[],\"requests\":[{\"id\":\"3d04ed83-dc1e-40ec-923c-16aa92509e50\",\"name\":\"A simple GET request\",\"collectionId\":\"1dd68aff-a3fa-4f52-904f-5b75053bc9d9\",\"method\":\"GET\",\"headers\":\"\",\"data\":[],\"rawModeData\":\"\",\"tests\":\"tests['response code is 200'] = (responseCode.code === 200);\",\"preRequestScript\":\"\",\"url\":\"https://postman-echo.com/get?source=newman-sample-github-collection\"},{\"id\":\"e02f8160-fb41-4633-be80-cc7d701e85b4\",\"name\":\"A simple POST request\",\"collectionId\":\"1dd68aff-a3fa-4f52-904f-5b75053bc9d9\",\"method\":\"POST\",\"headers\":\"Content-Type: text/plain\",\"dataMode\":\"raw\",\"data\":[],\"rawModeData\":\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\",\"url\":\"https://postman-echo.com/post\"},{\"id\":\"77bd6d4d-1060-4927-aa5c-dcdba7f750cf\",\"name\":\"A simple POST request with JSON body\",\"collectionId\":\"1dd68aff-a3fa-4f52-904f-5b75053bc9d9\",\"method\":\"POST\",\"headers\":\"Content-Type: application/json\",\"dataMode\":\"raw\",\"data\":[],\"rawModeData\":\"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\",\"url\":\"https://postman-echo.com/post\"}]}",
                  "cookie": [
                    {
                      "name": "sails.sid",
                      "expires": null,
                      "domain": "postman-echo.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": true,
                      "value": "s%3A55y5Ll7HpTzt_hKuw6N54k4N04ilmMdn.uCPCHttP5DmI%2BdBw2I9NZL55lFFOzz4XxS4qAHv47gI"
                    }
                  ]
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7189cb58-d2bc-4430-91ed-4bf807ad54d6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response has almost valid items\", function () {",
                      "    pm.response.to.have.jsonBody('folders', [])",
                      "        .and.to.have.jsonBody('order')",
                      "        .and.to.have.jsonBody('requests[0].name', 'A simple GET request')",
                      "        .and.to.have.jsonBody('requests[1].name', 'A simple POST request');",
                      "});"
                    ],
                    "_lastExecutionId": "8aa41d4a-fc9e-4df3-a94a-1c7d64de650c"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "ref": "8810fad2-1c3c-44d2-b481-1795909fabbe",
          "length": 37,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "568fbc88-fce9-47ce-ae45-71349229c9ae",
          "scriptId": "e74cf076-42a5-48a1-b283-822ab6a76189",
          "execution": "133ae8d6-0dce-44be-aa69-7f5bdfde9fc2"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "response has almost valid items",
          "message": "expected undefined in response to contain property 'info.schema'",
          "stack": "AssertionError: expected undefined in response to contain property 'info.schema'\n   at Object.eval sandbox-script.js:2:35)",
          "checksum": "73768e62fdd65a8aeb40438e906c3dc6",
          "id": "e370f8d1-c423-4c97-9230-927e011b5600",
          "timestamp": 1591967750660,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 35,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "_": {
            "postman_id": "e299a4a4-5574-4f05-9581-2ef60f545732"
          },
          "id": "e299a4a4-5574-4f05-9581-2ef60f545732",
          "name": "Transform collection from format v1 to v2",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "transform",
                "collection"
              ],
              "host": [
                "postman-echo",
                "com"
              ],
              "query": [
                {
                  "key": "from",
                  "value": "1"
                },
                {
                  "key": "to",
                  "value": "2"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"id\": \"7875be4b-917d-4aff-8cc4-5606c36bf418\",\n  \"name\": \"Sample Postman Collection\",\n  \"description\": \"A sample collection to demonstrate collections as a set of related requests\",\n  \"order\": [\n    \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n    \"141ba274-cc50-4377-a59c-e080066f375e\"\n  ],\n  \"folders\": [],\n  \"requests\": [\n    {\n      \"id\": \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n      \"name\": \"A simple GET request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"GET\",\n      \"headers\": \"\",\n      \"data\": [],\n      \"rawModeData\": \"\",\n      \"tests\": \"tests['response code is 200'] = (responseCode.code === 200);\",\n      \"preRequestScript\": \"\",\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\"\n    },\n    {\n      \"id\": \"141ba274-cc50-4377-a59c-e080066f375e\",\n      \"name\": \"A simple POST request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"POST\",\n      \"headers\": \"Content-Type: text/plain\",\n      \"dataMode\": \"raw\",\n      \"data\": [],\n      \"rawModeData\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\",\n      \"url\": \"https://postman-echo.com/post\"\n    }\n  ]\n}"
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "79270673-03ed-4fa2-abc5-80b405f5d662",
              "name": "Sample v2 Response",
              "originalRequest": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "transform",
                    "collection"
                  ],
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "query": [
                    {
                      "key": "from",
                      "value": "1"
                    },
                    {
                      "key": "to",
                      "value": "2"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "The mime type of this content",
                      "type": "text/plain"
                    },
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"id\": \"7875be4b-917d-4aff-8cc4-5606c36bf418\",\n  \"name\": \"Sample Postman Collection\",\n  \"description\": \"A sample collection to demonstrate collections as a set of related requests\",\n  \"order\": [\n    \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n    \"141ba274-cc50-4377-a59c-e080066f375e\",\n    \"4511ca8b-0bc7-430f-b894-a7ec1036f322\"\n  ],\n  \"folders\": [],\n  \"requests\": [\n    {\n      \"id\": \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n      \"name\": \"A simple GET request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"GET\",\n      \"headers\": \"\",\n      \"data\": [],\n      \"rawModeData\": \"\",\n      \"tests\": \"tests['response code is 200'] = (responseCode.code === 200);\",\n      \"preRequestScript\": \"\",\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\"\n    },\n    {\n      \"id\": \"141ba274-cc50-4377-a59c-e080066f375e\",\n      \"name\": \"A simple POST request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"POST\",\n      \"headers\": \"Content-Type: text/plain\",\n      \"dataMode\": \"raw\",\n      \"data\": [],\n      \"rawModeData\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\",\n      \"url\": \"https://postman-echo.com/post\"\n    },\n    {\n      \"id\": \"4511ca8b-0bc7-430f-b894-a7ec1036f322\",\n      \"name\": \"A simple POST request with JSON body\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"POST\",\n      \"headers\": \"Content-Type: application/json\",\n      \"dataMode\": \"raw\",\n      \"data\": [],\n      \"rawModeData\": \"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\",\n      \"url\": \"https://postman-echo.com/post\"\n    }\n  ]\n}"
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "name": "Access-Control-Allow-Credentials",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Credentials",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Headers",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Methods",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Methods",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Origin",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Origin",
                  "value": ""
                },
                {
                  "name": "Access-Control-Expose-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Expose-Headers",
                  "value": ""
                },
                {
                  "name": "Connection",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "name": "Content-Encoding",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Encoding",
                  "value": "gzip"
                },
                {
                  "name": "Content-Type",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "name": "Date",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Date",
                  "value": "Wed, 11 Jan 2017 10:41:32 GMT"
                },
                {
                  "name": "ETag",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "ETag",
                  "value": "W/\"4cc-7P727Clhlrl9+b1/vneniw\""
                },
                {
                  "name": "Server",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Server",
                  "value": "nginx/1.10.1"
                },
                {
                  "name": "Vary",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Vary",
                  "value": "X-HTTP-Method-Override, Accept-Encoding"
                },
                {
                  "name": "set-cookie",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "set-cookie",
                  "value": "sails.sid=s%3AHtnQ1hlPxoj7wZahoNkcjN-aw9nQL0fc.KSyfLbEKhv1Lt3LvH13Ogjv9ENZgsBBSM6V8Y7TqVOU; Path=/; HttpOnly"
                },
                {
                  "name": "transfer-encoding",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "transfer-encoding",
                  "value": "chunked"
                }
              ],
              "body": "{\"variables\":[],\"info\":{\"name\":\"Sample Postman Collection\",\"_postman_id\":\"7875be4b-917d-4aff-8cc4-5606c36bf418\",\"description\":\"A sample collection to demonstrate collections as a set of related requests\",\"schema\":\"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\"},\"item\":[{\"name\":\"A simple GET request\",\"event\":[{\"listen\":\"test\",\"script\":{\"type\":\"text/javascript\",\"exec\":[\"tests['response code is 200'] = (responseCode.code === 200);\"]}}],\"request\":{\"url\":\"https://postman-echo.com/get?source=newman-sample-github-collection\",\"method\":\"GET\",\"header\":[],\"body\":{\"mode\":\"raw\",\"raw\":\"\"}},\"response\":[]},{\"name\":\"A simple POST request\",\"request\":{\"url\":\"https://postman-echo.com/post\",\"method\":\"POST\",\"header\":[{\"key\":\"Content-Type\",\"value\":\"text/plain\",\"description\":\"\"}],\"body\":{\"mode\":\"raw\",\"raw\":\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\"}},\"response\":[]},{\"name\":\"A simple POST request with JSON body\",\"request\":{\"url\":\"https://postman-echo.com/post\",\"method\":\"POST\",\"header\":[{\"key\":\"Content-Type\",\"value\":\"application/json\",\"description\":\"\"}],\"body\":{\"mode\":\"raw\",\"raw\":\"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\"}},\"response\":[]}]}",
              "cookie": [
                {
                  "name": "sails.sid",
                  "expires": null,
                  "domain": "postman-echo.com",
                  "path": "/",
                  "secure": false,
                  "httpOnly": true,
                  "value": "s%3AHtnQ1hlPxoj7wZahoNkcjN-aw9nQL0fc.KSyfLbEKhv1Lt3LvH13Ogjv9ENZgsBBSM6V8Y7TqVOU"
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e74cf076-42a5-48a1-b283-822ab6a76189",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response has almost valid items\", function () {",
                  "    pm.response.to.have.jsonBody('info.schema', 'https://schema.getpostman.com/json/collection/v2.0.0/collection.json')",
                  "        .and.to.have.jsonBody('item[0].name', 'A simple GET request')",
                  "        .and.to.have.jsonBody('item[1].name', 'A simple POST request');",
                  "});"
                ],
                "_lastExecutionId": "133ae8d6-0dce-44be-aa69-7f5bdfde9fc2"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "6513eb24-d61a-4bd1-9d50-8583ec230f2d"
          },
          "id": "6513eb24-d61a-4bd1-9d50-8583ec230f2d",
          "name": "Utilities / Postman Collection",
          "item": [
            {
              "_": {
                "postman_id": "e299a4a4-5574-4f05-9581-2ef60f545732"
              },
              "id": "e299a4a4-5574-4f05-9581-2ef60f545732",
              "name": "Transform collection from format v1 to v2",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "transform",
                    "collection"
                  ],
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "query": [
                    {
                      "key": "from",
                      "value": "1"
                    },
                    {
                      "key": "to",
                      "value": "2"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"id\": \"7875be4b-917d-4aff-8cc4-5606c36bf418\",\n  \"name\": \"Sample Postman Collection\",\n  \"description\": \"A sample collection to demonstrate collections as a set of related requests\",\n  \"order\": [\n    \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n    \"141ba274-cc50-4377-a59c-e080066f375e\"\n  ],\n  \"folders\": [],\n  \"requests\": [\n    {\n      \"id\": \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n      \"name\": \"A simple GET request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"GET\",\n      \"headers\": \"\",\n      \"data\": [],\n      \"rawModeData\": \"\",\n      \"tests\": \"tests['response code is 200'] = (responseCode.code === 200);\",\n      \"preRequestScript\": \"\",\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\"\n    },\n    {\n      \"id\": \"141ba274-cc50-4377-a59c-e080066f375e\",\n      \"name\": \"A simple POST request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"POST\",\n      \"headers\": \"Content-Type: text/plain\",\n      \"dataMode\": \"raw\",\n      \"data\": [],\n      \"rawModeData\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\",\n      \"url\": \"https://postman-echo.com/post\"\n    }\n  ]\n}"
                }
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "json"
                  },
                  "id": "79270673-03ed-4fa2-abc5-80b405f5d662",
                  "name": "Sample v2 Response",
                  "originalRequest": {
                    "url": {
                      "protocol": "https",
                      "path": [
                        "transform",
                        "collection"
                      ],
                      "host": [
                        "postman-echo",
                        "com"
                      ],
                      "query": [
                        {
                          "key": "from",
                          "value": "1"
                        },
                        {
                          "key": "to",
                          "value": "2"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "The mime type of this content",
                          "type": "text/plain"
                        },
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"id\": \"7875be4b-917d-4aff-8cc4-5606c36bf418\",\n  \"name\": \"Sample Postman Collection\",\n  \"description\": \"A sample collection to demonstrate collections as a set of related requests\",\n  \"order\": [\n    \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n    \"141ba274-cc50-4377-a59c-e080066f375e\",\n    \"4511ca8b-0bc7-430f-b894-a7ec1036f322\"\n  ],\n  \"folders\": [],\n  \"requests\": [\n    {\n      \"id\": \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n      \"name\": \"A simple GET request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"GET\",\n      \"headers\": \"\",\n      \"data\": [],\n      \"rawModeData\": \"\",\n      \"tests\": \"tests['response code is 200'] = (responseCode.code === 200);\",\n      \"preRequestScript\": \"\",\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\"\n    },\n    {\n      \"id\": \"141ba274-cc50-4377-a59c-e080066f375e\",\n      \"name\": \"A simple POST request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"POST\",\n      \"headers\": \"Content-Type: text/plain\",\n      \"dataMode\": \"raw\",\n      \"data\": [],\n      \"rawModeData\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\",\n      \"url\": \"https://postman-echo.com/post\"\n    },\n    {\n      \"id\": \"4511ca8b-0bc7-430f-b894-a7ec1036f322\",\n      \"name\": \"A simple POST request with JSON body\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"POST\",\n      \"headers\": \"Content-Type: application/json\",\n      \"dataMode\": \"raw\",\n      \"data\": [],\n      \"rawModeData\": \"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\",\n      \"url\": \"https://postman-echo.com/post\"\n    }\n  ]\n}"
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "name": "Access-Control-Allow-Credentials",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Credentials",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Headers",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Methods",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Methods",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Origin",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Origin",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Expose-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Expose-Headers",
                      "value": ""
                    },
                    {
                      "name": "Connection",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "name": "Content-Encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Encoding",
                      "value": "gzip"
                    },
                    {
                      "name": "Content-Type",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "name": "Date",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Date",
                      "value": "Wed, 11 Jan 2017 10:41:32 GMT"
                    },
                    {
                      "name": "ETag",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "ETag",
                      "value": "W/\"4cc-7P727Clhlrl9+b1/vneniw\""
                    },
                    {
                      "name": "Server",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server",
                      "value": "nginx/1.10.1"
                    },
                    {
                      "name": "Vary",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Vary",
                      "value": "X-HTTP-Method-Override, Accept-Encoding"
                    },
                    {
                      "name": "set-cookie",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "set-cookie",
                      "value": "sails.sid=s%3AHtnQ1hlPxoj7wZahoNkcjN-aw9nQL0fc.KSyfLbEKhv1Lt3LvH13Ogjv9ENZgsBBSM6V8Y7TqVOU; Path=/; HttpOnly"
                    },
                    {
                      "name": "transfer-encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "transfer-encoding",
                      "value": "chunked"
                    }
                  ],
                  "body": "{\"variables\":[],\"info\":{\"name\":\"Sample Postman Collection\",\"_postman_id\":\"7875be4b-917d-4aff-8cc4-5606c36bf418\",\"description\":\"A sample collection to demonstrate collections as a set of related requests\",\"schema\":\"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\"},\"item\":[{\"name\":\"A simple GET request\",\"event\":[{\"listen\":\"test\",\"script\":{\"type\":\"text/javascript\",\"exec\":[\"tests['response code is 200'] = (responseCode.code === 200);\"]}}],\"request\":{\"url\":\"https://postman-echo.com/get?source=newman-sample-github-collection\",\"method\":\"GET\",\"header\":[],\"body\":{\"mode\":\"raw\",\"raw\":\"\"}},\"response\":[]},{\"name\":\"A simple POST request\",\"request\":{\"url\":\"https://postman-echo.com/post\",\"method\":\"POST\",\"header\":[{\"key\":\"Content-Type\",\"value\":\"text/plain\",\"description\":\"\"}],\"body\":{\"mode\":\"raw\",\"raw\":\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\"}},\"response\":[]},{\"name\":\"A simple POST request with JSON body\",\"request\":{\"url\":\"https://postman-echo.com/post\",\"method\":\"POST\",\"header\":[{\"key\":\"Content-Type\",\"value\":\"application/json\",\"description\":\"\"}],\"body\":{\"mode\":\"raw\",\"raw\":\"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\"}},\"response\":[]}]}",
                  "cookie": [
                    {
                      "name": "sails.sid",
                      "expires": null,
                      "domain": "postman-echo.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": true,
                      "value": "s%3AHtnQ1hlPxoj7wZahoNkcjN-aw9nQL0fc.KSyfLbEKhv1Lt3LvH13Ogjv9ENZgsBBSM6V8Y7TqVOU"
                    }
                  ]
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e74cf076-42a5-48a1-b283-822ab6a76189",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response has almost valid items\", function () {",
                      "    pm.response.to.have.jsonBody('info.schema', 'https://schema.getpostman.com/json/collection/v2.0.0/collection.json')",
                      "        .and.to.have.jsonBody('item[0].name', 'A simple GET request')",
                      "        .and.to.have.jsonBody('item[1].name', 'A simple POST request');",
                      "});"
                    ],
                    "_lastExecutionId": "133ae8d6-0dce-44be-aa69-7f5bdfde9fc2"
                  }
                }
              ]
            },
            {
              "_": {
                "postman_id": "4657083a-08fe-4d58-850e-cd4a2cf7baee"
              },
              "id": "4657083a-08fe-4d58-850e-cd4a2cf7baee",
              "name": "Transform collection from format v2 to v1",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "transform",
                    "collection"
                  ],
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "query": [
                    {
                      "key": "from",
                      "value": "2"
                    },
                    {
                      "key": "to",
                      "value": "1"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"info\": {\n    \"name\": \"Sample Postman Collection\",\n    \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\",\n    \"description\": \"A sample collection to demonstrate collections as a set of related requests\"\n  },\n\n  \"item\": [{\n    \"name\": \"A simple GET request\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\",\n      \"method\": \"GET\"\n    }\n  }, {\n    \"name\": \"A simple POST request\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/post\",\n      \"method\": \"POST\",\n      \"header\": [{\n        \"key\": \"Content-Type\",\n        \"value\": \"text/plain\"\n      }],\n      \"body\": {\n        \"mode\": \"raw\",\n        \"raw\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\"\n      }\n    }\n  }]\n}"
                }
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "json"
                  },
                  "id": "aea638eb-dcbf-42dd-9f42-bb62f4267a77",
                  "name": "Sample v1 Response",
                  "originalRequest": {
                    "url": {
                      "protocol": "https",
                      "path": [
                        "transform",
                        "collection"
                      ],
                      "host": [
                        "postman-echo",
                        "com"
                      ],
                      "query": [
                        {
                          "key": "from",
                          "value": "2"
                        },
                        {
                          "key": "to",
                          "value": "1"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "The mime type of this content",
                          "type": "text/plain"
                        },
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"info\": {\n    \"name\": \"Sample Postman Collection\",\n    \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\",\n    \"description\": \"A sample collection to demonstrate collections as a set of related requests\"\n  },\n\n  \"item\": [{\n    \"name\": \"A simple GET request\",\n    \"event\": [{\n      \"listen\": \"test\",\n      \"script\": {\n        \"type\": \"text/javascript\",\n        \"exec\": [\"tests['response code is 200'] = (responseCode.code === 200);\"]\n      }\n    }],\n    \"request\": {\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\",\n      \"method\": \"GET\"\n    }\n  }, {\n    \"name\": \"A simple POST request\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/post\",\n      \"method\": \"POST\",\n      \"header\": [{\n        \"key\": \"Content-Type\",\n        \"value\": \"text/plain\"\n      }],\n      \"body\": {\n        \"mode\": \"raw\",\n        \"raw\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\"\n      }\n    }\n  }, {\n    \"name\": \"A simple POST request with JSON body\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/post\",\n      \"method\": \"POST\",\n      \"header\": [{\n        \"key\": \"Content-Type\",\n        \"value\": \"application/json\"\n      }],\n      \"body\": {\n        \"mode\": \"raw\",\n        \"raw\": \"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\"\n      }\n    }\n  }]\n}"
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "name": "Access-Control-Allow-Credentials",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Credentials",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Headers",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Methods",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Methods",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Origin",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Origin",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Expose-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Expose-Headers",
                      "value": ""
                    },
                    {
                      "name": "Connection",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "name": "Content-Encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Encoding",
                      "value": "gzip"
                    },
                    {
                      "name": "Content-Type",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "name": "Date",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Date",
                      "value": "Wed, 11 Jan 2017 10:38:42 GMT"
                    },
                    {
                      "name": "ETag",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "ETag",
                      "value": "W/\"569-P9uLZEIyoPfMmQ+U0mTO1A\""
                    },
                    {
                      "name": "Server",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server",
                      "value": "nginx/1.10.1"
                    },
                    {
                      "name": "Vary",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Vary",
                      "value": "X-HTTP-Method-Override, Accept-Encoding"
                    },
                    {
                      "name": "set-cookie",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "set-cookie",
                      "value": "sails.sid=s%3A55y5Ll7HpTzt_hKuw6N54k4N04ilmMdn.uCPCHttP5DmI%2BdBw2I9NZL55lFFOzz4XxS4qAHv47gI; Path=/; HttpOnly"
                    },
                    {
                      "name": "transfer-encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "transfer-encoding",
                      "value": "chunked"
                    }
                  ],
                  "body": "{\"id\":\"0c42230c-c8e4-4ca0-a4aa-d393971de8b8\",\"name\":\"Sample Postman Collection\",\"description\":\"A sample collection to demonstrate collections as a set of related requests\",\"order\":[\"3d04ed83-dc1e-40ec-923c-16aa92509e50\",\"e02f8160-fb41-4633-be80-cc7d701e85b4\",\"77bd6d4d-1060-4927-aa5c-dcdba7f750cf\"],\"folders\":[],\"requests\":[{\"id\":\"3d04ed83-dc1e-40ec-923c-16aa92509e50\",\"name\":\"A simple GET request\",\"collectionId\":\"1dd68aff-a3fa-4f52-904f-5b75053bc9d9\",\"method\":\"GET\",\"headers\":\"\",\"data\":[],\"rawModeData\":\"\",\"tests\":\"tests['response code is 200'] = (responseCode.code === 200);\",\"preRequestScript\":\"\",\"url\":\"https://postman-echo.com/get?source=newman-sample-github-collection\"},{\"id\":\"e02f8160-fb41-4633-be80-cc7d701e85b4\",\"name\":\"A simple POST request\",\"collectionId\":\"1dd68aff-a3fa-4f52-904f-5b75053bc9d9\",\"method\":\"POST\",\"headers\":\"Content-Type: text/plain\",\"dataMode\":\"raw\",\"data\":[],\"rawModeData\":\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\",\"url\":\"https://postman-echo.com/post\"},{\"id\":\"77bd6d4d-1060-4927-aa5c-dcdba7f750cf\",\"name\":\"A simple POST request with JSON body\",\"collectionId\":\"1dd68aff-a3fa-4f52-904f-5b75053bc9d9\",\"method\":\"POST\",\"headers\":\"Content-Type: application/json\",\"dataMode\":\"raw\",\"data\":[],\"rawModeData\":\"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\",\"url\":\"https://postman-echo.com/post\"}]}",
                  "cookie": [
                    {
                      "name": "sails.sid",
                      "expires": null,
                      "domain": "postman-echo.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": true,
                      "value": "s%3A55y5Ll7HpTzt_hKuw6N54k4N04ilmMdn.uCPCHttP5DmI%2BdBw2I9NZL55lFFOzz4XxS4qAHv47gI"
                    }
                  ]
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7189cb58-d2bc-4430-91ed-4bf807ad54d6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response has almost valid items\", function () {",
                      "    pm.response.to.have.jsonBody('folders', [])",
                      "        .and.to.have.jsonBody('order')",
                      "        .and.to.have.jsonBody('requests[0].name', 'A simple GET request')",
                      "        .and.to.have.jsonBody('requests[1].name', 'A simple POST request');",
                      "});"
                    ],
                    "_lastExecutionId": "8aa41d4a-fc9e-4df3-a94a-1c7d64de650c"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "ref": "8810fad2-1c3c-44d2-b481-1795909fabbe",
          "length": 37,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "568fbc88-fce9-47ce-ae45-71349229c9ae",
          "scriptId": "e74cf076-42a5-48a1-b283-822ab6a76189",
          "execution": "133ae8d6-0dce-44be-aa69-7f5bdfde9fc2"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "response is ok",
          "message": "expected response to have status code 200 but got 404",
          "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:36)",
          "checksum": "b907917ca1e4586ea6d21cfd8b107730",
          "id": "751abd53-3324-4a6d-baf9-01a0169258f3",
          "timestamp": 1591967750811,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 36,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "_": {
            "postman_id": "4657083a-08fe-4d58-850e-cd4a2cf7baee"
          },
          "id": "4657083a-08fe-4d58-850e-cd4a2cf7baee",
          "name": "Transform collection from format v2 to v1",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "transform",
                "collection"
              ],
              "host": [
                "postman-echo",
                "com"
              ],
              "query": [
                {
                  "key": "from",
                  "value": "2"
                },
                {
                  "key": "to",
                  "value": "1"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"info\": {\n    \"name\": \"Sample Postman Collection\",\n    \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\",\n    \"description\": \"A sample collection to demonstrate collections as a set of related requests\"\n  },\n\n  \"item\": [{\n    \"name\": \"A simple GET request\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\",\n      \"method\": \"GET\"\n    }\n  }, {\n    \"name\": \"A simple POST request\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/post\",\n      \"method\": \"POST\",\n      \"header\": [{\n        \"key\": \"Content-Type\",\n        \"value\": \"text/plain\"\n      }],\n      \"body\": {\n        \"mode\": \"raw\",\n        \"raw\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\"\n      }\n    }\n  }]\n}"
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "aea638eb-dcbf-42dd-9f42-bb62f4267a77",
              "name": "Sample v1 Response",
              "originalRequest": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "transform",
                    "collection"
                  ],
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "query": [
                    {
                      "key": "from",
                      "value": "2"
                    },
                    {
                      "key": "to",
                      "value": "1"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "The mime type of this content",
                      "type": "text/plain"
                    },
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"info\": {\n    \"name\": \"Sample Postman Collection\",\n    \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\",\n    \"description\": \"A sample collection to demonstrate collections as a set of related requests\"\n  },\n\n  \"item\": [{\n    \"name\": \"A simple GET request\",\n    \"event\": [{\n      \"listen\": \"test\",\n      \"script\": {\n        \"type\": \"text/javascript\",\n        \"exec\": [\"tests['response code is 200'] = (responseCode.code === 200);\"]\n      }\n    }],\n    \"request\": {\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\",\n      \"method\": \"GET\"\n    }\n  }, {\n    \"name\": \"A simple POST request\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/post\",\n      \"method\": \"POST\",\n      \"header\": [{\n        \"key\": \"Content-Type\",\n        \"value\": \"text/plain\"\n      }],\n      \"body\": {\n        \"mode\": \"raw\",\n        \"raw\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\"\n      }\n    }\n  }, {\n    \"name\": \"A simple POST request with JSON body\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/post\",\n      \"method\": \"POST\",\n      \"header\": [{\n        \"key\": \"Content-Type\",\n        \"value\": \"application/json\"\n      }],\n      \"body\": {\n        \"mode\": \"raw\",\n        \"raw\": \"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\"\n      }\n    }\n  }]\n}"
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "name": "Access-Control-Allow-Credentials",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Credentials",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Headers",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Methods",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Methods",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Origin",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Origin",
                  "value": ""
                },
                {
                  "name": "Access-Control-Expose-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Expose-Headers",
                  "value": ""
                },
                {
                  "name": "Connection",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "name": "Content-Encoding",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Encoding",
                  "value": "gzip"
                },
                {
                  "name": "Content-Type",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "name": "Date",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Date",
                  "value": "Wed, 11 Jan 2017 10:38:42 GMT"
                },
                {
                  "name": "ETag",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "ETag",
                  "value": "W/\"569-P9uLZEIyoPfMmQ+U0mTO1A\""
                },
                {
                  "name": "Server",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Server",
                  "value": "nginx/1.10.1"
                },
                {
                  "name": "Vary",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Vary",
                  "value": "X-HTTP-Method-Override, Accept-Encoding"
                },
                {
                  "name": "set-cookie",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "set-cookie",
                  "value": "sails.sid=s%3A55y5Ll7HpTzt_hKuw6N54k4N04ilmMdn.uCPCHttP5DmI%2BdBw2I9NZL55lFFOzz4XxS4qAHv47gI; Path=/; HttpOnly"
                },
                {
                  "name": "transfer-encoding",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "transfer-encoding",
                  "value": "chunked"
                }
              ],
              "body": "{\"id\":\"0c42230c-c8e4-4ca0-a4aa-d393971de8b8\",\"name\":\"Sample Postman Collection\",\"description\":\"A sample collection to demonstrate collections as a set of related requests\",\"order\":[\"3d04ed83-dc1e-40ec-923c-16aa92509e50\",\"e02f8160-fb41-4633-be80-cc7d701e85b4\",\"77bd6d4d-1060-4927-aa5c-dcdba7f750cf\"],\"folders\":[],\"requests\":[{\"id\":\"3d04ed83-dc1e-40ec-923c-16aa92509e50\",\"name\":\"A simple GET request\",\"collectionId\":\"1dd68aff-a3fa-4f52-904f-5b75053bc9d9\",\"method\":\"GET\",\"headers\":\"\",\"data\":[],\"rawModeData\":\"\",\"tests\":\"tests['response code is 200'] = (responseCode.code === 200);\",\"preRequestScript\":\"\",\"url\":\"https://postman-echo.com/get?source=newman-sample-github-collection\"},{\"id\":\"e02f8160-fb41-4633-be80-cc7d701e85b4\",\"name\":\"A simple POST request\",\"collectionId\":\"1dd68aff-a3fa-4f52-904f-5b75053bc9d9\",\"method\":\"POST\",\"headers\":\"Content-Type: text/plain\",\"dataMode\":\"raw\",\"data\":[],\"rawModeData\":\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\",\"url\":\"https://postman-echo.com/post\"},{\"id\":\"77bd6d4d-1060-4927-aa5c-dcdba7f750cf\",\"name\":\"A simple POST request with JSON body\",\"collectionId\":\"1dd68aff-a3fa-4f52-904f-5b75053bc9d9\",\"method\":\"POST\",\"headers\":\"Content-Type: application/json\",\"dataMode\":\"raw\",\"data\":[],\"rawModeData\":\"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\",\"url\":\"https://postman-echo.com/post\"}]}",
              "cookie": [
                {
                  "name": "sails.sid",
                  "expires": null,
                  "domain": "postman-echo.com",
                  "path": "/",
                  "secure": false,
                  "httpOnly": true,
                  "value": "s%3A55y5Ll7HpTzt_hKuw6N54k4N04ilmMdn.uCPCHttP5DmI%2BdBw2I9NZL55lFFOzz4XxS4qAHv47gI"
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7189cb58-d2bc-4430-91ed-4bf807ad54d6",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response has almost valid items\", function () {",
                  "    pm.response.to.have.jsonBody('folders', [])",
                  "        .and.to.have.jsonBody('order')",
                  "        .and.to.have.jsonBody('requests[0].name', 'A simple GET request')",
                  "        .and.to.have.jsonBody('requests[1].name', 'A simple POST request');",
                  "});"
                ],
                "_lastExecutionId": "8aa41d4a-fc9e-4df3-a94a-1c7d64de650c"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "6513eb24-d61a-4bd1-9d50-8583ec230f2d"
          },
          "id": "6513eb24-d61a-4bd1-9d50-8583ec230f2d",
          "name": "Utilities / Postman Collection",
          "item": [
            {
              "_": {
                "postman_id": "e299a4a4-5574-4f05-9581-2ef60f545732"
              },
              "id": "e299a4a4-5574-4f05-9581-2ef60f545732",
              "name": "Transform collection from format v1 to v2",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "transform",
                    "collection"
                  ],
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "query": [
                    {
                      "key": "from",
                      "value": "1"
                    },
                    {
                      "key": "to",
                      "value": "2"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"id\": \"7875be4b-917d-4aff-8cc4-5606c36bf418\",\n  \"name\": \"Sample Postman Collection\",\n  \"description\": \"A sample collection to demonstrate collections as a set of related requests\",\n  \"order\": [\n    \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n    \"141ba274-cc50-4377-a59c-e080066f375e\"\n  ],\n  \"folders\": [],\n  \"requests\": [\n    {\n      \"id\": \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n      \"name\": \"A simple GET request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"GET\",\n      \"headers\": \"\",\n      \"data\": [],\n      \"rawModeData\": \"\",\n      \"tests\": \"tests['response code is 200'] = (responseCode.code === 200);\",\n      \"preRequestScript\": \"\",\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\"\n    },\n    {\n      \"id\": \"141ba274-cc50-4377-a59c-e080066f375e\",\n      \"name\": \"A simple POST request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"POST\",\n      \"headers\": \"Content-Type: text/plain\",\n      \"dataMode\": \"raw\",\n      \"data\": [],\n      \"rawModeData\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\",\n      \"url\": \"https://postman-echo.com/post\"\n    }\n  ]\n}"
                }
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "json"
                  },
                  "id": "79270673-03ed-4fa2-abc5-80b405f5d662",
                  "name": "Sample v2 Response",
                  "originalRequest": {
                    "url": {
                      "protocol": "https",
                      "path": [
                        "transform",
                        "collection"
                      ],
                      "host": [
                        "postman-echo",
                        "com"
                      ],
                      "query": [
                        {
                          "key": "from",
                          "value": "1"
                        },
                        {
                          "key": "to",
                          "value": "2"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "The mime type of this content",
                          "type": "text/plain"
                        },
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"id\": \"7875be4b-917d-4aff-8cc4-5606c36bf418\",\n  \"name\": \"Sample Postman Collection\",\n  \"description\": \"A sample collection to demonstrate collections as a set of related requests\",\n  \"order\": [\n    \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n    \"141ba274-cc50-4377-a59c-e080066f375e\",\n    \"4511ca8b-0bc7-430f-b894-a7ec1036f322\"\n  ],\n  \"folders\": [],\n  \"requests\": [\n    {\n      \"id\": \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n      \"name\": \"A simple GET request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"GET\",\n      \"headers\": \"\",\n      \"data\": [],\n      \"rawModeData\": \"\",\n      \"tests\": \"tests['response code is 200'] = (responseCode.code === 200);\",\n      \"preRequestScript\": \"\",\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\"\n    },\n    {\n      \"id\": \"141ba274-cc50-4377-a59c-e080066f375e\",\n      \"name\": \"A simple POST request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"POST\",\n      \"headers\": \"Content-Type: text/plain\",\n      \"dataMode\": \"raw\",\n      \"data\": [],\n      \"rawModeData\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\",\n      \"url\": \"https://postman-echo.com/post\"\n    },\n    {\n      \"id\": \"4511ca8b-0bc7-430f-b894-a7ec1036f322\",\n      \"name\": \"A simple POST request with JSON body\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"POST\",\n      \"headers\": \"Content-Type: application/json\",\n      \"dataMode\": \"raw\",\n      \"data\": [],\n      \"rawModeData\": \"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\",\n      \"url\": \"https://postman-echo.com/post\"\n    }\n  ]\n}"
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "name": "Access-Control-Allow-Credentials",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Credentials",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Headers",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Methods",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Methods",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Origin",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Origin",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Expose-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Expose-Headers",
                      "value": ""
                    },
                    {
                      "name": "Connection",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "name": "Content-Encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Encoding",
                      "value": "gzip"
                    },
                    {
                      "name": "Content-Type",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "name": "Date",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Date",
                      "value": "Wed, 11 Jan 2017 10:41:32 GMT"
                    },
                    {
                      "name": "ETag",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "ETag",
                      "value": "W/\"4cc-7P727Clhlrl9+b1/vneniw\""
                    },
                    {
                      "name": "Server",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server",
                      "value": "nginx/1.10.1"
                    },
                    {
                      "name": "Vary",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Vary",
                      "value": "X-HTTP-Method-Override, Accept-Encoding"
                    },
                    {
                      "name": "set-cookie",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "set-cookie",
                      "value": "sails.sid=s%3AHtnQ1hlPxoj7wZahoNkcjN-aw9nQL0fc.KSyfLbEKhv1Lt3LvH13Ogjv9ENZgsBBSM6V8Y7TqVOU; Path=/; HttpOnly"
                    },
                    {
                      "name": "transfer-encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "transfer-encoding",
                      "value": "chunked"
                    }
                  ],
                  "body": "{\"variables\":[],\"info\":{\"name\":\"Sample Postman Collection\",\"_postman_id\":\"7875be4b-917d-4aff-8cc4-5606c36bf418\",\"description\":\"A sample collection to demonstrate collections as a set of related requests\",\"schema\":\"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\"},\"item\":[{\"name\":\"A simple GET request\",\"event\":[{\"listen\":\"test\",\"script\":{\"type\":\"text/javascript\",\"exec\":[\"tests['response code is 200'] = (responseCode.code === 200);\"]}}],\"request\":{\"url\":\"https://postman-echo.com/get?source=newman-sample-github-collection\",\"method\":\"GET\",\"header\":[],\"body\":{\"mode\":\"raw\",\"raw\":\"\"}},\"response\":[]},{\"name\":\"A simple POST request\",\"request\":{\"url\":\"https://postman-echo.com/post\",\"method\":\"POST\",\"header\":[{\"key\":\"Content-Type\",\"value\":\"text/plain\",\"description\":\"\"}],\"body\":{\"mode\":\"raw\",\"raw\":\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\"}},\"response\":[]},{\"name\":\"A simple POST request with JSON body\",\"request\":{\"url\":\"https://postman-echo.com/post\",\"method\":\"POST\",\"header\":[{\"key\":\"Content-Type\",\"value\":\"application/json\",\"description\":\"\"}],\"body\":{\"mode\":\"raw\",\"raw\":\"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\"}},\"response\":[]}]}",
                  "cookie": [
                    {
                      "name": "sails.sid",
                      "expires": null,
                      "domain": "postman-echo.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": true,
                      "value": "s%3AHtnQ1hlPxoj7wZahoNkcjN-aw9nQL0fc.KSyfLbEKhv1Lt3LvH13Ogjv9ENZgsBBSM6V8Y7TqVOU"
                    }
                  ]
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e74cf076-42a5-48a1-b283-822ab6a76189",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response has almost valid items\", function () {",
                      "    pm.response.to.have.jsonBody('info.schema', 'https://schema.getpostman.com/json/collection/v2.0.0/collection.json')",
                      "        .and.to.have.jsonBody('item[0].name', 'A simple GET request')",
                      "        .and.to.have.jsonBody('item[1].name', 'A simple POST request');",
                      "});"
                    ],
                    "_lastExecutionId": "133ae8d6-0dce-44be-aa69-7f5bdfde9fc2"
                  }
                }
              ]
            },
            {
              "_": {
                "postman_id": "4657083a-08fe-4d58-850e-cd4a2cf7baee"
              },
              "id": "4657083a-08fe-4d58-850e-cd4a2cf7baee",
              "name": "Transform collection from format v2 to v1",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "transform",
                    "collection"
                  ],
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "query": [
                    {
                      "key": "from",
                      "value": "2"
                    },
                    {
                      "key": "to",
                      "value": "1"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"info\": {\n    \"name\": \"Sample Postman Collection\",\n    \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\",\n    \"description\": \"A sample collection to demonstrate collections as a set of related requests\"\n  },\n\n  \"item\": [{\n    \"name\": \"A simple GET request\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\",\n      \"method\": \"GET\"\n    }\n  }, {\n    \"name\": \"A simple POST request\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/post\",\n      \"method\": \"POST\",\n      \"header\": [{\n        \"key\": \"Content-Type\",\n        \"value\": \"text/plain\"\n      }],\n      \"body\": {\n        \"mode\": \"raw\",\n        \"raw\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\"\n      }\n    }\n  }]\n}"
                }
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "json"
                  },
                  "id": "aea638eb-dcbf-42dd-9f42-bb62f4267a77",
                  "name": "Sample v1 Response",
                  "originalRequest": {
                    "url": {
                      "protocol": "https",
                      "path": [
                        "transform",
                        "collection"
                      ],
                      "host": [
                        "postman-echo",
                        "com"
                      ],
                      "query": [
                        {
                          "key": "from",
                          "value": "2"
                        },
                        {
                          "key": "to",
                          "value": "1"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "The mime type of this content",
                          "type": "text/plain"
                        },
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"info\": {\n    \"name\": \"Sample Postman Collection\",\n    \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\",\n    \"description\": \"A sample collection to demonstrate collections as a set of related requests\"\n  },\n\n  \"item\": [{\n    \"name\": \"A simple GET request\",\n    \"event\": [{\n      \"listen\": \"test\",\n      \"script\": {\n        \"type\": \"text/javascript\",\n        \"exec\": [\"tests['response code is 200'] = (responseCode.code === 200);\"]\n      }\n    }],\n    \"request\": {\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\",\n      \"method\": \"GET\"\n    }\n  }, {\n    \"name\": \"A simple POST request\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/post\",\n      \"method\": \"POST\",\n      \"header\": [{\n        \"key\": \"Content-Type\",\n        \"value\": \"text/plain\"\n      }],\n      \"body\": {\n        \"mode\": \"raw\",\n        \"raw\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\"\n      }\n    }\n  }, {\n    \"name\": \"A simple POST request with JSON body\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/post\",\n      \"method\": \"POST\",\n      \"header\": [{\n        \"key\": \"Content-Type\",\n        \"value\": \"application/json\"\n      }],\n      \"body\": {\n        \"mode\": \"raw\",\n        \"raw\": \"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\"\n      }\n    }\n  }]\n}"
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "name": "Access-Control-Allow-Credentials",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Credentials",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Headers",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Methods",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Methods",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Origin",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Origin",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Expose-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Expose-Headers",
                      "value": ""
                    },
                    {
                      "name": "Connection",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "name": "Content-Encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Encoding",
                      "value": "gzip"
                    },
                    {
                      "name": "Content-Type",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "name": "Date",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Date",
                      "value": "Wed, 11 Jan 2017 10:38:42 GMT"
                    },
                    {
                      "name": "ETag",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "ETag",
                      "value": "W/\"569-P9uLZEIyoPfMmQ+U0mTO1A\""
                    },
                    {
                      "name": "Server",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server",
                      "value": "nginx/1.10.1"
                    },
                    {
                      "name": "Vary",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Vary",
                      "value": "X-HTTP-Method-Override, Accept-Encoding"
                    },
                    {
                      "name": "set-cookie",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "set-cookie",
                      "value": "sails.sid=s%3A55y5Ll7HpTzt_hKuw6N54k4N04ilmMdn.uCPCHttP5DmI%2BdBw2I9NZL55lFFOzz4XxS4qAHv47gI; Path=/; HttpOnly"
                    },
                    {
                      "name": "transfer-encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "transfer-encoding",
                      "value": "chunked"
                    }
                  ],
                  "body": "{\"id\":\"0c42230c-c8e4-4ca0-a4aa-d393971de8b8\",\"name\":\"Sample Postman Collection\",\"description\":\"A sample collection to demonstrate collections as a set of related requests\",\"order\":[\"3d04ed83-dc1e-40ec-923c-16aa92509e50\",\"e02f8160-fb41-4633-be80-cc7d701e85b4\",\"77bd6d4d-1060-4927-aa5c-dcdba7f750cf\"],\"folders\":[],\"requests\":[{\"id\":\"3d04ed83-dc1e-40ec-923c-16aa92509e50\",\"name\":\"A simple GET request\",\"collectionId\":\"1dd68aff-a3fa-4f52-904f-5b75053bc9d9\",\"method\":\"GET\",\"headers\":\"\",\"data\":[],\"rawModeData\":\"\",\"tests\":\"tests['response code is 200'] = (responseCode.code === 200);\",\"preRequestScript\":\"\",\"url\":\"https://postman-echo.com/get?source=newman-sample-github-collection\"},{\"id\":\"e02f8160-fb41-4633-be80-cc7d701e85b4\",\"name\":\"A simple POST request\",\"collectionId\":\"1dd68aff-a3fa-4f52-904f-5b75053bc9d9\",\"method\":\"POST\",\"headers\":\"Content-Type: text/plain\",\"dataMode\":\"raw\",\"data\":[],\"rawModeData\":\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\",\"url\":\"https://postman-echo.com/post\"},{\"id\":\"77bd6d4d-1060-4927-aa5c-dcdba7f750cf\",\"name\":\"A simple POST request with JSON body\",\"collectionId\":\"1dd68aff-a3fa-4f52-904f-5b75053bc9d9\",\"method\":\"POST\",\"headers\":\"Content-Type: application/json\",\"dataMode\":\"raw\",\"data\":[],\"rawModeData\":\"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\",\"url\":\"https://postman-echo.com/post\"}]}",
                  "cookie": [
                    {
                      "name": "sails.sid",
                      "expires": null,
                      "domain": "postman-echo.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": true,
                      "value": "s%3A55y5Ll7HpTzt_hKuw6N54k4N04ilmMdn.uCPCHttP5DmI%2BdBw2I9NZL55lFFOzz4XxS4qAHv47gI"
                    }
                  ]
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7189cb58-d2bc-4430-91ed-4bf807ad54d6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response has almost valid items\", function () {",
                      "    pm.response.to.have.jsonBody('folders', [])",
                      "        .and.to.have.jsonBody('order')",
                      "        .and.to.have.jsonBody('requests[0].name', 'A simple GET request')",
                      "        .and.to.have.jsonBody('requests[1].name', 'A simple POST request');",
                      "});"
                    ],
                    "_lastExecutionId": "8aa41d4a-fc9e-4df3-a94a-1c7d64de650c"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "ref": "df61e0ed-3d0a-435e-b341-9af1ded07b2c",
          "length": 37,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "9c80b966-99ff-4731-be82-da017c1c6fc3",
          "scriptId": "7189cb58-d2bc-4430-91ed-4bf807ad54d6",
          "execution": "8aa41d4a-fc9e-4df3-a94a-1c7d64de650c"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "response has almost valid items",
          "message": "expected undefined in response to contain property 'folders'",
          "stack": "AssertionError: expected undefined in response to contain property 'folders'\n   at Object.eval sandbox-script.js:2:36)",
          "checksum": "80460d241971684e1f70dfb5fa699891",
          "id": "5cd0a2ef-4233-4b17-9a09-d4f6c72bb3f4",
          "timestamp": 1591967750812,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 36,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "_": {
            "postman_id": "4657083a-08fe-4d58-850e-cd4a2cf7baee"
          },
          "id": "4657083a-08fe-4d58-850e-cd4a2cf7baee",
          "name": "Transform collection from format v2 to v1",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "transform",
                "collection"
              ],
              "host": [
                "postman-echo",
                "com"
              ],
              "query": [
                {
                  "key": "from",
                  "value": "2"
                },
                {
                  "key": "to",
                  "value": "1"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"info\": {\n    \"name\": \"Sample Postman Collection\",\n    \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\",\n    \"description\": \"A sample collection to demonstrate collections as a set of related requests\"\n  },\n\n  \"item\": [{\n    \"name\": \"A simple GET request\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\",\n      \"method\": \"GET\"\n    }\n  }, {\n    \"name\": \"A simple POST request\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/post\",\n      \"method\": \"POST\",\n      \"header\": [{\n        \"key\": \"Content-Type\",\n        \"value\": \"text/plain\"\n      }],\n      \"body\": {\n        \"mode\": \"raw\",\n        \"raw\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\"\n      }\n    }\n  }]\n}"
            }
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "aea638eb-dcbf-42dd-9f42-bb62f4267a77",
              "name": "Sample v1 Response",
              "originalRequest": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "transform",
                    "collection"
                  ],
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "query": [
                    {
                      "key": "from",
                      "value": "2"
                    },
                    {
                      "key": "to",
                      "value": "1"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "The mime type of this content",
                      "type": "text/plain"
                    },
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"info\": {\n    \"name\": \"Sample Postman Collection\",\n    \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\",\n    \"description\": \"A sample collection to demonstrate collections as a set of related requests\"\n  },\n\n  \"item\": [{\n    \"name\": \"A simple GET request\",\n    \"event\": [{\n      \"listen\": \"test\",\n      \"script\": {\n        \"type\": \"text/javascript\",\n        \"exec\": [\"tests['response code is 200'] = (responseCode.code === 200);\"]\n      }\n    }],\n    \"request\": {\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\",\n      \"method\": \"GET\"\n    }\n  }, {\n    \"name\": \"A simple POST request\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/post\",\n      \"method\": \"POST\",\n      \"header\": [{\n        \"key\": \"Content-Type\",\n        \"value\": \"text/plain\"\n      }],\n      \"body\": {\n        \"mode\": \"raw\",\n        \"raw\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\"\n      }\n    }\n  }, {\n    \"name\": \"A simple POST request with JSON body\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/post\",\n      \"method\": \"POST\",\n      \"header\": [{\n        \"key\": \"Content-Type\",\n        \"value\": \"application/json\"\n      }],\n      \"body\": {\n        \"mode\": \"raw\",\n        \"raw\": \"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\"\n      }\n    }\n  }]\n}"
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "name": "Access-Control-Allow-Credentials",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Credentials",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Headers",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Methods",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Methods",
                  "value": ""
                },
                {
                  "name": "Access-Control-Allow-Origin",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Allow-Origin",
                  "value": ""
                },
                {
                  "name": "Access-Control-Expose-Headers",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Access-Control-Expose-Headers",
                  "value": ""
                },
                {
                  "name": "Connection",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "name": "Content-Encoding",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Encoding",
                  "value": "gzip"
                },
                {
                  "name": "Content-Type",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "name": "Date",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Date",
                  "value": "Wed, 11 Jan 2017 10:38:42 GMT"
                },
                {
                  "name": "ETag",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "ETag",
                  "value": "W/\"569-P9uLZEIyoPfMmQ+U0mTO1A\""
                },
                {
                  "name": "Server",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Server",
                  "value": "nginx/1.10.1"
                },
                {
                  "name": "Vary",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "Vary",
                  "value": "X-HTTP-Method-Override, Accept-Encoding"
                },
                {
                  "name": "set-cookie",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "set-cookie",
                  "value": "sails.sid=s%3A55y5Ll7HpTzt_hKuw6N54k4N04ilmMdn.uCPCHttP5DmI%2BdBw2I9NZL55lFFOzz4XxS4qAHv47gI; Path=/; HttpOnly"
                },
                {
                  "name": "transfer-encoding",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "transfer-encoding",
                  "value": "chunked"
                }
              ],
              "body": "{\"id\":\"0c42230c-c8e4-4ca0-a4aa-d393971de8b8\",\"name\":\"Sample Postman Collection\",\"description\":\"A sample collection to demonstrate collections as a set of related requests\",\"order\":[\"3d04ed83-dc1e-40ec-923c-16aa92509e50\",\"e02f8160-fb41-4633-be80-cc7d701e85b4\",\"77bd6d4d-1060-4927-aa5c-dcdba7f750cf\"],\"folders\":[],\"requests\":[{\"id\":\"3d04ed83-dc1e-40ec-923c-16aa92509e50\",\"name\":\"A simple GET request\",\"collectionId\":\"1dd68aff-a3fa-4f52-904f-5b75053bc9d9\",\"method\":\"GET\",\"headers\":\"\",\"data\":[],\"rawModeData\":\"\",\"tests\":\"tests['response code is 200'] = (responseCode.code === 200);\",\"preRequestScript\":\"\",\"url\":\"https://postman-echo.com/get?source=newman-sample-github-collection\"},{\"id\":\"e02f8160-fb41-4633-be80-cc7d701e85b4\",\"name\":\"A simple POST request\",\"collectionId\":\"1dd68aff-a3fa-4f52-904f-5b75053bc9d9\",\"method\":\"POST\",\"headers\":\"Content-Type: text/plain\",\"dataMode\":\"raw\",\"data\":[],\"rawModeData\":\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\",\"url\":\"https://postman-echo.com/post\"},{\"id\":\"77bd6d4d-1060-4927-aa5c-dcdba7f750cf\",\"name\":\"A simple POST request with JSON body\",\"collectionId\":\"1dd68aff-a3fa-4f52-904f-5b75053bc9d9\",\"method\":\"POST\",\"headers\":\"Content-Type: application/json\",\"dataMode\":\"raw\",\"data\":[],\"rawModeData\":\"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\",\"url\":\"https://postman-echo.com/post\"}]}",
              "cookie": [
                {
                  "name": "sails.sid",
                  "expires": null,
                  "domain": "postman-echo.com",
                  "path": "/",
                  "secure": false,
                  "httpOnly": true,
                  "value": "s%3A55y5Ll7HpTzt_hKuw6N54k4N04ilmMdn.uCPCHttP5DmI%2BdBw2I9NZL55lFFOzz4XxS4qAHv47gI"
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7189cb58-d2bc-4430-91ed-4bf807ad54d6",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"response is ok\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"response has almost valid items\", function () {",
                  "    pm.response.to.have.jsonBody('folders', [])",
                  "        .and.to.have.jsonBody('order')",
                  "        .and.to.have.jsonBody('requests[0].name', 'A simple GET request')",
                  "        .and.to.have.jsonBody('requests[1].name', 'A simple POST request');",
                  "});"
                ],
                "_lastExecutionId": "8aa41d4a-fc9e-4df3-a94a-1c7d64de650c"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "6513eb24-d61a-4bd1-9d50-8583ec230f2d"
          },
          "id": "6513eb24-d61a-4bd1-9d50-8583ec230f2d",
          "name": "Utilities / Postman Collection",
          "item": [
            {
              "_": {
                "postman_id": "e299a4a4-5574-4f05-9581-2ef60f545732"
              },
              "id": "e299a4a4-5574-4f05-9581-2ef60f545732",
              "name": "Transform collection from format v1 to v2",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "transform",
                    "collection"
                  ],
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "query": [
                    {
                      "key": "from",
                      "value": "1"
                    },
                    {
                      "key": "to",
                      "value": "2"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"id\": \"7875be4b-917d-4aff-8cc4-5606c36bf418\",\n  \"name\": \"Sample Postman Collection\",\n  \"description\": \"A sample collection to demonstrate collections as a set of related requests\",\n  \"order\": [\n    \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n    \"141ba274-cc50-4377-a59c-e080066f375e\"\n  ],\n  \"folders\": [],\n  \"requests\": [\n    {\n      \"id\": \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n      \"name\": \"A simple GET request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"GET\",\n      \"headers\": \"\",\n      \"data\": [],\n      \"rawModeData\": \"\",\n      \"tests\": \"tests['response code is 200'] = (responseCode.code === 200);\",\n      \"preRequestScript\": \"\",\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\"\n    },\n    {\n      \"id\": \"141ba274-cc50-4377-a59c-e080066f375e\",\n      \"name\": \"A simple POST request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"POST\",\n      \"headers\": \"Content-Type: text/plain\",\n      \"dataMode\": \"raw\",\n      \"data\": [],\n      \"rawModeData\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\",\n      \"url\": \"https://postman-echo.com/post\"\n    }\n  ]\n}"
                }
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "json"
                  },
                  "id": "79270673-03ed-4fa2-abc5-80b405f5d662",
                  "name": "Sample v2 Response",
                  "originalRequest": {
                    "url": {
                      "protocol": "https",
                      "path": [
                        "transform",
                        "collection"
                      ],
                      "host": [
                        "postman-echo",
                        "com"
                      ],
                      "query": [
                        {
                          "key": "from",
                          "value": "1"
                        },
                        {
                          "key": "to",
                          "value": "2"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "The mime type of this content",
                          "type": "text/plain"
                        },
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"id\": \"7875be4b-917d-4aff-8cc4-5606c36bf418\",\n  \"name\": \"Sample Postman Collection\",\n  \"description\": \"A sample collection to demonstrate collections as a set of related requests\",\n  \"order\": [\n    \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n    \"141ba274-cc50-4377-a59c-e080066f375e\",\n    \"4511ca8b-0bc7-430f-b894-a7ec1036f322\"\n  ],\n  \"folders\": [],\n  \"requests\": [\n    {\n      \"id\": \"4d9134be-e8bf-4693-9cd7-1c0fc66ae739\",\n      \"name\": \"A simple GET request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"GET\",\n      \"headers\": \"\",\n      \"data\": [],\n      \"rawModeData\": \"\",\n      \"tests\": \"tests['response code is 200'] = (responseCode.code === 200);\",\n      \"preRequestScript\": \"\",\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\"\n    },\n    {\n      \"id\": \"141ba274-cc50-4377-a59c-e080066f375e\",\n      \"name\": \"A simple POST request\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"POST\",\n      \"headers\": \"Content-Type: text/plain\",\n      \"dataMode\": \"raw\",\n      \"data\": [],\n      \"rawModeData\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\",\n      \"url\": \"https://postman-echo.com/post\"\n    },\n    {\n      \"id\": \"4511ca8b-0bc7-430f-b894-a7ec1036f322\",\n      \"name\": \"A simple POST request with JSON body\",\n      \"collectionId\": \"877b9dae-a50e-4152-9b89-870c37216f78\",\n      \"method\": \"POST\",\n      \"headers\": \"Content-Type: application/json\",\n      \"dataMode\": \"raw\",\n      \"data\": [],\n      \"rawModeData\": \"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\",\n      \"url\": \"https://postman-echo.com/post\"\n    }\n  ]\n}"
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "name": "Access-Control-Allow-Credentials",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Credentials",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Headers",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Methods",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Methods",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Origin",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Origin",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Expose-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Expose-Headers",
                      "value": ""
                    },
                    {
                      "name": "Connection",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "name": "Content-Encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Encoding",
                      "value": "gzip"
                    },
                    {
                      "name": "Content-Type",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "name": "Date",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Date",
                      "value": "Wed, 11 Jan 2017 10:41:32 GMT"
                    },
                    {
                      "name": "ETag",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "ETag",
                      "value": "W/\"4cc-7P727Clhlrl9+b1/vneniw\""
                    },
                    {
                      "name": "Server",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server",
                      "value": "nginx/1.10.1"
                    },
                    {
                      "name": "Vary",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Vary",
                      "value": "X-HTTP-Method-Override, Accept-Encoding"
                    },
                    {
                      "name": "set-cookie",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "set-cookie",
                      "value": "sails.sid=s%3AHtnQ1hlPxoj7wZahoNkcjN-aw9nQL0fc.KSyfLbEKhv1Lt3LvH13Ogjv9ENZgsBBSM6V8Y7TqVOU; Path=/; HttpOnly"
                    },
                    {
                      "name": "transfer-encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "transfer-encoding",
                      "value": "chunked"
                    }
                  ],
                  "body": "{\"variables\":[],\"info\":{\"name\":\"Sample Postman Collection\",\"_postman_id\":\"7875be4b-917d-4aff-8cc4-5606c36bf418\",\"description\":\"A sample collection to demonstrate collections as a set of related requests\",\"schema\":\"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\"},\"item\":[{\"name\":\"A simple GET request\",\"event\":[{\"listen\":\"test\",\"script\":{\"type\":\"text/javascript\",\"exec\":[\"tests['response code is 200'] = (responseCode.code === 200);\"]}}],\"request\":{\"url\":\"https://postman-echo.com/get?source=newman-sample-github-collection\",\"method\":\"GET\",\"header\":[],\"body\":{\"mode\":\"raw\",\"raw\":\"\"}},\"response\":[]},{\"name\":\"A simple POST request\",\"request\":{\"url\":\"https://postman-echo.com/post\",\"method\":\"POST\",\"header\":[{\"key\":\"Content-Type\",\"value\":\"text/plain\",\"description\":\"\"}],\"body\":{\"mode\":\"raw\",\"raw\":\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\"}},\"response\":[]},{\"name\":\"A simple POST request with JSON body\",\"request\":{\"url\":\"https://postman-echo.com/post\",\"method\":\"POST\",\"header\":[{\"key\":\"Content-Type\",\"value\":\"application/json\",\"description\":\"\"}],\"body\":{\"mode\":\"raw\",\"raw\":\"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\"}},\"response\":[]}]}",
                  "cookie": [
                    {
                      "name": "sails.sid",
                      "expires": null,
                      "domain": "postman-echo.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": true,
                      "value": "s%3AHtnQ1hlPxoj7wZahoNkcjN-aw9nQL0fc.KSyfLbEKhv1Lt3LvH13Ogjv9ENZgsBBSM6V8Y7TqVOU"
                    }
                  ]
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e74cf076-42a5-48a1-b283-822ab6a76189",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response has almost valid items\", function () {",
                      "    pm.response.to.have.jsonBody('info.schema', 'https://schema.getpostman.com/json/collection/v2.0.0/collection.json')",
                      "        .and.to.have.jsonBody('item[0].name', 'A simple GET request')",
                      "        .and.to.have.jsonBody('item[1].name', 'A simple POST request');",
                      "});"
                    ],
                    "_lastExecutionId": "133ae8d6-0dce-44be-aa69-7f5bdfde9fc2"
                  }
                }
              ]
            },
            {
              "_": {
                "postman_id": "4657083a-08fe-4d58-850e-cd4a2cf7baee"
              },
              "id": "4657083a-08fe-4d58-850e-cd4a2cf7baee",
              "name": "Transform collection from format v2 to v1",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "transform",
                    "collection"
                  ],
                  "host": [
                    "postman-echo",
                    "com"
                  ],
                  "query": [
                    {
                      "key": "from",
                      "value": "2"
                    },
                    {
                      "key": "to",
                      "value": "1"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"info\": {\n    \"name\": \"Sample Postman Collection\",\n    \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\",\n    \"description\": \"A sample collection to demonstrate collections as a set of related requests\"\n  },\n\n  \"item\": [{\n    \"name\": \"A simple GET request\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\",\n      \"method\": \"GET\"\n    }\n  }, {\n    \"name\": \"A simple POST request\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/post\",\n      \"method\": \"POST\",\n      \"header\": [{\n        \"key\": \"Content-Type\",\n        \"value\": \"text/plain\"\n      }],\n      \"body\": {\n        \"mode\": \"raw\",\n        \"raw\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\"\n      }\n    }\n  }]\n}"
                }
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "json"
                  },
                  "id": "aea638eb-dcbf-42dd-9f42-bb62f4267a77",
                  "name": "Sample v1 Response",
                  "originalRequest": {
                    "url": {
                      "protocol": "https",
                      "path": [
                        "transform",
                        "collection"
                      ],
                      "host": [
                        "postman-echo",
                        "com"
                      ],
                      "query": [
                        {
                          "key": "from",
                          "value": "2"
                        },
                        {
                          "key": "to",
                          "value": "1"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "The mime type of this content",
                          "type": "text/plain"
                        },
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"info\": {\n    \"name\": \"Sample Postman Collection\",\n    \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\",\n    \"description\": \"A sample collection to demonstrate collections as a set of related requests\"\n  },\n\n  \"item\": [{\n    \"name\": \"A simple GET request\",\n    \"event\": [{\n      \"listen\": \"test\",\n      \"script\": {\n        \"type\": \"text/javascript\",\n        \"exec\": [\"tests['response code is 200'] = (responseCode.code === 200);\"]\n      }\n    }],\n    \"request\": {\n      \"url\": \"https://postman-echo.com/get?source=newman-sample-github-collection\",\n      \"method\": \"GET\"\n    }\n  }, {\n    \"name\": \"A simple POST request\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/post\",\n      \"method\": \"POST\",\n      \"header\": [{\n        \"key\": \"Content-Type\",\n        \"value\": \"text/plain\"\n      }],\n      \"body\": {\n        \"mode\": \"raw\",\n        \"raw\": \"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\"\n      }\n    }\n  }, {\n    \"name\": \"A simple POST request with JSON body\",\n    \"request\": {\n      \"url\": \"https://postman-echo.com/post\",\n      \"method\": \"POST\",\n      \"header\": [{\n        \"key\": \"Content-Type\",\n        \"value\": \"application/json\"\n      }],\n      \"body\": {\n        \"mode\": \"raw\",\n        \"raw\": \"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\"\n      }\n    }\n  }]\n}"
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "name": "Access-Control-Allow-Credentials",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Credentials",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Headers",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Methods",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Methods",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Allow-Origin",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Allow-Origin",
                      "value": ""
                    },
                    {
                      "name": "Access-Control-Expose-Headers",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Access-Control-Expose-Headers",
                      "value": ""
                    },
                    {
                      "name": "Connection",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Connection",
                      "value": "keep-alive"
                    },
                    {
                      "name": "Content-Encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Encoding",
                      "value": "gzip"
                    },
                    {
                      "name": "Content-Type",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Content-Type",
                      "value": "application/json; charset=utf-8"
                    },
                    {
                      "name": "Date",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Date",
                      "value": "Wed, 11 Jan 2017 10:38:42 GMT"
                    },
                    {
                      "name": "ETag",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "ETag",
                      "value": "W/\"569-P9uLZEIyoPfMmQ+U0mTO1A\""
                    },
                    {
                      "name": "Server",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Server",
                      "value": "nginx/1.10.1"
                    },
                    {
                      "name": "Vary",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "Vary",
                      "value": "X-HTTP-Method-Override, Accept-Encoding"
                    },
                    {
                      "name": "set-cookie",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "set-cookie",
                      "value": "sails.sid=s%3A55y5Ll7HpTzt_hKuw6N54k4N04ilmMdn.uCPCHttP5DmI%2BdBw2I9NZL55lFFOzz4XxS4qAHv47gI; Path=/; HttpOnly"
                    },
                    {
                      "name": "transfer-encoding",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      },
                      "key": "transfer-encoding",
                      "value": "chunked"
                    }
                  ],
                  "body": "{\"id\":\"0c42230c-c8e4-4ca0-a4aa-d393971de8b8\",\"name\":\"Sample Postman Collection\",\"description\":\"A sample collection to demonstrate collections as a set of related requests\",\"order\":[\"3d04ed83-dc1e-40ec-923c-16aa92509e50\",\"e02f8160-fb41-4633-be80-cc7d701e85b4\",\"77bd6d4d-1060-4927-aa5c-dcdba7f750cf\"],\"folders\":[],\"requests\":[{\"id\":\"3d04ed83-dc1e-40ec-923c-16aa92509e50\",\"name\":\"A simple GET request\",\"collectionId\":\"1dd68aff-a3fa-4f52-904f-5b75053bc9d9\",\"method\":\"GET\",\"headers\":\"\",\"data\":[],\"rawModeData\":\"\",\"tests\":\"tests['response code is 200'] = (responseCode.code === 200);\",\"preRequestScript\":\"\",\"url\":\"https://postman-echo.com/get?source=newman-sample-github-collection\"},{\"id\":\"e02f8160-fb41-4633-be80-cc7d701e85b4\",\"name\":\"A simple POST request\",\"collectionId\":\"1dd68aff-a3fa-4f52-904f-5b75053bc9d9\",\"method\":\"POST\",\"headers\":\"Content-Type: text/plain\",\"dataMode\":\"raw\",\"data\":[],\"rawModeData\":\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\",\"url\":\"https://postman-echo.com/post\"},{\"id\":\"77bd6d4d-1060-4927-aa5c-dcdba7f750cf\",\"name\":\"A simple POST request with JSON body\",\"collectionId\":\"1dd68aff-a3fa-4f52-904f-5b75053bc9d9\",\"method\":\"POST\",\"headers\":\"Content-Type: application/json\",\"dataMode\":\"raw\",\"data\":[],\"rawModeData\":\"{\\\"text\\\":\\\"Duis posuere augue vel cursus pharetra. In luctus a ex nec pretium...\\\"}\",\"url\":\"https://postman-echo.com/post\"}]}",
                  "cookie": [
                    {
                      "name": "sails.sid",
                      "expires": null,
                      "domain": "postman-echo.com",
                      "path": "/",
                      "secure": false,
                      "httpOnly": true,
                      "value": "s%3A55y5Ll7HpTzt_hKuw6N54k4N04ilmMdn.uCPCHttP5DmI%2BdBw2I9NZL55lFFOzz4XxS4qAHv47gI"
                    }
                  ]
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7189cb58-d2bc-4430-91ed-4bf807ad54d6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"response is ok\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"response has almost valid items\", function () {",
                      "    pm.response.to.have.jsonBody('folders', [])",
                      "        .and.to.have.jsonBody('order')",
                      "        .and.to.have.jsonBody('requests[0].name', 'A simple GET request')",
                      "        .and.to.have.jsonBody('requests[1].name', 'A simple POST request');",
                      "});"
                    ],
                    "_lastExecutionId": "8aa41d4a-fc9e-4df3-a94a-1c7d64de650c"
                  }
                }
              ]
            }
          ],
          "event": [],
          "protocolProfileBehavior": {}
        },
        "cursor": {
          "ref": "df61e0ed-3d0a-435e-b341-9af1ded07b2c",
          "length": 37,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "9c80b966-99ff-4731-be82-da017c1c6fc3",
          "scriptId": "7189cb58-d2bc-4430-91ed-4bf807ad54d6",
          "execution": "8aa41d4a-fc9e-4df3-a94a-1c7d64de650c"
        }
      }
    ],
    "error": null
  }
}